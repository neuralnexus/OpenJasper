/*
 * Copyright VMware, Inc.
 * SPDX-License-Identifier: GPL-2.0-only
 */
/// <reference path="../../typings-recipe.d.ts" />
/*
 * Recipe for handling the Bitnami Agent
 */
"use strict";
const agentDirectory = `${platform.pathInfo.namiAppPath}/stats`;
const agentConfFile = `${agentDirectory}/agent.conf`;
const bitnamiLegacyPropertiesFile = "/opt/bitnami/properties.ini";
const agentExtraPropertiesFile = `${agentDirectory}/extra.ini`;
const agentBinary = `${agentDirectory}/agent.bin`;
const agentPropertiesFile = `${agentDirectory}/settings.db`;
recipes.register({
    id: "agent-init",
    on: { afterInitialize: {}, afterFailedInitialize: {} },
    conditions: {
        platformTags: { any: ["linux"] },
        cloudTags: { not: { any: ["skip-agent"] } },
        // don't run if the machine was provisioned externally
        shouldInvoke: (input) => !(input.provisioner.provisioned)
    },
    recipeHandler: async function (input) {
        if (!fs.existsSync(agentDirectory)) {
            logger.trace("Bitnami Agent directory not found. Skipping initialization.");
            return;
        }
        let agentMinute = (new Date).getMinutes();
        let bitnamiUser = "bitnami";
        // make sure we do not have any leftovers
        runProgram("sed", ["-i",
            "-e", "/installation_guid/d",
            "-e", "/generated by the/d",
            agentConfFile]);
        // setup cron
        runProgram("sed", ["-i", "/agent.bin/d", "/etc/crontab"]);
        let agentCommand = `cd ${agentDirectory} && ./agent.bin --run -D`;
        let cronLine = `${agentMinute} * * * * ${bitnamiUser} ${agentCommand}`;
        if (!fs.existsSync(agentExtraPropertiesFile)) {
            const deploymentId = provisioner.uniqueDeploymentId || "";
            fs.writeFileSync(agentExtraPropertiesFile, "");
            fs.appendFileSync(agentExtraPropertiesFile, "[all]\n");
            fs.appendFileSync(agentExtraPropertiesFile, `instance_tier_id=${provisioner.instanceTier}\n`);
            if (deploymentId !== "") {
                fs.appendFileSync(agentExtraPropertiesFile, "deployment_type=nami\n");
                fs.appendFileSync(agentExtraPropertiesFile, `deployment_id=${deploymentId}\n`);
            }
            else {
                fs.appendFileSync(agentExtraPropertiesFile, "deployment_type=nami_singlevm\n");
            }
            // demo detection
            let is_demo = await cloud.getUserDataBoolean("demo_machine");
            if (is_demo && is_demo !== undefined) {
                fs.appendFileSync(agentExtraPropertiesFile, `demo_machine=${is_demo}\n`);
            }
            // process extra properties
            let extraPropertyNames = await cloud.getUserData("bitnami_agent_extra");
            if (extraPropertyNames !== "" && extraPropertyNames !== undefined) {
                for (const l of extraPropertyNames.split(" ")) {
                    fs.appendFileSync(agentExtraPropertiesFile, `${l}=${await cloud.getUserData(l)}\n`);
                }
            }
            // add a testing mode
            if (await cloud.isBitnamiTestingMode()) {
                fs.appendFileSync(agentExtraPropertiesFile, "testing_mode=1\n");
            }
            // add account-id if available
            const accountId = await cloud.getMetaData("account-id");
            if (accountId && accountId.length > 0) {
                const hash = utils.createHashAsHex(accountId, "sha256");
                fs.appendFileSync(agentExtraPropertiesFile, `account_id_sha256=${hash}\n`);
            }
        }
        // write properties.ini file
        if (!fs.existsSync(bitnamiLegacyPropertiesFile)) {
            fs.writeFileSync(bitnamiLegacyPropertiesFile, "");
            fs.appendFileSync(bitnamiLegacyPropertiesFile, "[General]\n");
            let details = provisioner.stackDefinition.details;
            fs.appendFileSync(bitnamiLegacyPropertiesFile, `base_stack_name=${details.name}\n`);
            fs.appendFileSync(bitnamiLegacyPropertiesFile, `base_stack_key=${details.key}\n`);
            fs.appendFileSync(bitnamiLegacyPropertiesFile, `base_stack_version=${details.version}\n`);
        }
        // set proper permissions
        fs.chmodSync(agentBinary, "0755");
        runProgram("chown", ["-R", "bitnami:bitnami", agentDirectory]);
        // run the agent for the first time
        runProgram("sh", ["-c", agentCommand], { runAs: bitnamiUser });
        // register with crontab, after everything else has been run
        platform.createFileSection("/etc/crontab", { title: "BITNAMI AGENT", contents: cronLine });
        let agentConf = fs.readFileSync(agentConfFile).toString();
        logger.trace(`Agent Config File (${agentConfFile}):\n${agentConf}`);
    }
});
