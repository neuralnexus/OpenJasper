{"version":3,"sources":["webpack://jrs-ui/./runtime_dependencies/jquery-ui/ui/scroll-parent.js","webpack://jrs-ui/./src/core/core.ajax.js","webpack://jrs-ui/./src/core/core.ajax.utils.js"],"names":["factory","define","$","fn","scrollParent","includeHidden","position","this","css","excludeStaticParent","overflowRegex","parents","filter","parent","test","eq","length","ownerDocument","document","ajax","AjaxRequester","url","params","postData","synchronous","location","toString","xmlhttp","getXMLHTTP","rsChangeFunction","processResponse","onreadystatechange","async","requestTime","Date","handleResponse","requester","checkForErrors","responseHandler","ajaxRequestEnded","JRS","getElementById","className","targettedResponseHandler","fillId","fromId","callback","toLocation","jQuery","html","updateUsingResponseSubset","res","responseText","trim","indexOf","opentTag","substring","body","lastIndexOf","closeTag","ajaxBuffer","replace","text","xssUtil","invokeCallbacks","cumulativeResponseHandler","insert","rowCopyResponseHandler","tableId","theTable","tagName","tempDiv","Builder","copyTable","getElementsByTagName","alert","cancelRequestsBefore","LOADING_ID","addVar","addMethod","open","setRequestHeader","send","prototype","DUMMY_POST_PARAM","readyState","setErrorHandler","errorHandler","getResponseHeader","confirmContinue","responseTimer","window","setTimeout","dialogs","MAX_WAIT_TIME","clearTimeout","confirm","serverIsNotResponding","clobberingResponseHandler","fire","evalJSONResponseHandler","jSONResponse","evalJSON","e","console","log","fromLocation","toLoc","response","whatWeWant","copyTableJquery","append","scriptTags","sz","size","idx","iterate","scriptObj","get","attr","scriptName","scriptUrl","gotCallback","callbackFn","scriptElement","createElement","jr_scripts","setAttribute","onload","src","appendChild","scriptString","lines","match","eval","join","executeScript","customArg","ajaxClobberredUpdate","options","ajaxUpdate","ajaxTargettedUpdate","mode","CUMULATIVE_UPDATE","ROW_COPY_UPDATE","EVAL_JSON","preFillAction","ajaxNonReturningUpdate","ajaxClobberedFormSubmit","form","getPostData","extraPostData","appendPostData","ajaxTargettedFormSubmit","ajaxErrorHandler","showMessageDialog","ajaxError","ajaxErrorHeader","doNothing","fillLocation","isAutomaticRefresh","isIPad","busyCursor","silent","showLoading","hideLoader","ajaxRequestStarted","doPost","doGet","requesterErrorHandler","forms","data","i","elements","element","name","appendFormInput","appendFormValue","value","type","checked","option","selected","push","shift","encodeURIComponent","ERROR_POPUP_DIV","ERROR_POPUP_CONTENTS","ERROR_POPUP_BACK_BUTTON","ERROR_POPUP_CLOSE_BUTTON","hideErrorPopup","popOverlayObject","style","display","ajaxRequestCount","cursor","startResponseTimer","cancelResponseTimer","isValidJsonResponse","ajaxAgent","responseType","status","XMLHttpRequest","showErrorPopup","errorMessage","baseErrorHandler","removeClass","show"],"mappings":"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","file":"_chunks/chunk.9697.js","sourcesContent":["/*!\n * jQuery UI Scroll Parent 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: scrollParent\n//>>group: Core\n//>>description: Get the closest ancestor element that is scrollable.\n//>>docs: http://api.jqueryui.com/scrollParent/\n\n( function( factory ) {\n\t\"use strict\";\n\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine( [ \"jquery\", \"./version\" ], factory );\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory( jQuery );\n\t}\n} )( function( $ ) {\n\"use strict\";\n\nreturn $.fn.scrollParent = function( includeHidden ) {\n\tvar position = this.css( \"position\" ),\n\t\texcludeStaticParent = position === \"absolute\",\n\t\toverflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\n\t\tscrollParent = this.parents().filter( function() {\n\t\t\tvar parent = $( this );\n\t\t\tif ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\n\t\t\t\tparent.css( \"overflow-x\" ) );\n\t\t} ).eq( 0 );\n\n\treturn position === \"fixed\" || !scrollParent.length ?\n\t\t$( this[ 0 ].ownerDocument || document ) :\n\t\tscrollParent;\n};\n\n} );\n","/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved.\n * http://www.jaspersoft.com.\n *\n * Unless you have purchased a commercial license agreement from Jaspersoft,\n * the following license terms apply:\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n *  @author: Angus Croll\n * @version: $Id$\n */\n/* global confirm, serverIsNotResponding, alert, extraPostData, ajaxError, ajaxErrorHeader*/\n/**\n *  Generic Ajax Utils\n */\n/**\n * Global Ajax Object\n */\nimport jQuery from 'jquery';\nimport dialogs from '../components/components.dialogs';\nimport {copyTable, copyTableJquery, isIPad, popOverlayObject} from \"../util/utils.common\";\nimport {errorHandler, showMessageDialog} from \"./core.ajax.utils\";\nimport {JRS} from \"../namespace/namespace\";\nimport xssUtil from 'js-sdk/src/common/util/xssUtil';\nimport Builder from 'scriptaculous/src/builder';\n\nvar ajax = {};    //cancel all requests sent before this date (in ms)\n//cancel all requests sent before this date (in ms)\najax.cancelRequestsBefore;\najax.LOADING_ID = 'loading';    /**\n *  @class Manages incoming Ajax requests and processes corresponding Ajax responses\n *  based on specified attributes.\n *  Responses are bound to to the instance of AjaxRequester created by the corresponing request\n *\n *  @constructor\n *  @param {String} url address for server request\n *  @param {Array} params [1]fillLocation [2]fromLocation [3]Array of callbacks\n *  @param {String} postData user data for posting - where applicable\n *  @return a new AjaxRequester instance\n *  @type AjaxRequester\n */\n/**\n *  @class Manages incoming Ajax requests and processes corresponding Ajax responses\n *  based on specified attributes.\n *  Responses are bound to to the instance of AjaxRequester created by the corresponing request\n *\n *  @constructor\n *  @param {String} url address for server request\n *  @param {Array} params [1]fillLocation [2]fromLocation [3]Array of callbacks\n *  @param {String} postData user data for posting - where applicable\n *  @return a new AjaxRequester instance\n *  @type AjaxRequester\n */\nfunction AjaxRequester(url, params, postData, synchronous) {\n    this.url = url || document.location.toString();\n    this.params = params;\n    this.xmlhttp = getXMLHTTP();\n    var rsChangeFunction = this.processResponse(this);\n    this.xmlhttp.onreadystatechange = rsChangeFunction;\n    this.postData = postData;\n    this.async = !synchronous;\n    this.requestTime = +new Date();    //(new Date).getTime()\n}    /////////////////////////////////////////////////////////////////////////\n// Prototype Augmentation\n/////////////////////////////////////////////////////////////////////////\n//(new Date).getTime()\n/////////////////////////////////////////////////////////////////////////\n// Prototype Augmentation\n/////////////////////////////////////////////////////////////////////////\nAjaxRequester    //constants for targetted update modes\n    .addVar('CUMULATIVE_UPDATE', 'c').addVar('ROW_COPY_UPDATE', 'r').addVar('TARGETTED_REPLACE_UPDATE', 't').addVar('EVAL_JSON', 'j').addVar('DUMMY_POST_PARAM', 'dummyPostData').addVar('MAX_WAIT_TIME', 2000)    //default function assignment\n    .addVar('errorHandler', function () {\n        return false;\n    })    //the function to validate and report errors\n/**\n     * Submit an ajax get request\n     * @private\n     * @return true if successful\n     * @type boolean\n     */.addMethod('doGet', function () {\n        if (this.xmlhttp) {\n            this.xmlhttp.open('GET', this.url, this.async);\n            this.xmlhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            this.xmlhttp.setRequestHeader('If-Modified-Since', 'Sat, 1 Jan 2000 00:00:00 GMT');\n            this.xmlhttp.setRequestHeader('x-requested-with', 'AJAXRequest');\n            this.xmlhttp.send(null);\n            return true;\n        }\n        return false;\n    })    /**\n     * Submit an ajax post request\n     * @private\n     * @return true if successful\n     * @type boolean\n     */.addMethod('doPost', function () {\n        if (this.xmlhttp) {\n            if (this.postData === AjaxRequester.prototype.DUMMY_POST_PARAM) {\n                this.postData = null;\n            }\n            this.xmlhttp.open('POST', this.url, this.async);\n            this.xmlhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            this.xmlhttp.setRequestHeader('x-requested-with', 'AJAXRequest');\n            this.xmlhttp.send(this.postData);\n            return true;\n        }\n        return false;\n    })    /**\n     * Function to process the detected Ajax response\n     * @param {AjaxRequester} the instance who's request we are processing\n     * @private\n     * @return the handler function\n     * @type function\n     */.addMethod('processResponse', function (requester) {\n        return function () {\n            if (requester.xmlhttp.readyState == 4) {\n                if (ajax.cancelRequestsBefore && ajax.cancelRequestsBefore > requester.requestTime) {\n                //ignore this request\n                    ajaxRequestEnded(requester);\n                    return;\n                }    //if (requester.verifyAjaxResponse()) {\n                //if (requester.verifyAjaxResponse()) {\n                handleResponse(requester);    //}\n            }\n        };\n    })    /**\n     * Set error handler for this requester\n     * @param {function} the error handler function\n     * @private\n     */.addMethod('setErrorHandler', function (setErrorHandler) {\n        this.errorHandler = errorHandler;\n    }).addMethod('verifyAjaxResponse', function () {\n    //prompt if no server\n        return this.xmlhttp.getResponseHeader('Server') || this.confirmContinue();\n    })    /**\n     * Start countdown to \"no response\" message\n     */.addMethod('startResponseTimer', function () {\n        this.responseTimer = window.setTimeout(function () {\n            dialogs.popup.show(jQuery('#' + ajax.LOADING_ID)[0], true);\n        }, this.MAX_WAIT_TIME);\n    })    /**\n     * Cancel countdown to \"no response\" message\n     */.addMethod('cancelResponseTimer', function () {\n        window.clearTimeout(this.responseTimer);\n    })    /**\n     * Cancel countdown to \"no response\" message\n     */.addMethod('confirmContinue', function () {\n        return confirm(window.serverIsNotResponding);\n    });    /////////////////////////////////////////////////////////////////////////\n// Prototype Augmentation; End\n/////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// AjaxRequester: End\n///////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Global Space: Start\n///////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Response Handling\n///////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * Delegate to handler for ajax response\n * @param {AjaxRequester} the active requester instance\n * @param {Array} parameters bundled with the request\n * @private\n */\n/////////////////////////////////////////////////////////////////////////\n// Prototype Augmentation; End\n/////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// AjaxRequester: End\n///////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Global Space: Start\n///////////////////////////////////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Response Handling\n///////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * Delegate to handler for ajax response\n * @param {AjaxRequester} the active requester instance\n * @param {Array} parameters bundled with the request\n * @private\n */\nfunction handleResponse(requester) {\n    checkForErrors(requester) || requester.responseHandler(requester);\n    ajaxRequestEnded(requester);\n    if (JRS && JRS.vars) {\n        JRS.vars.ajax_in_progress = false;\n    }\n    if (document.getElementById('mainTableContainerOverlay'))\n        document.getElementById('mainTableContainerOverlay').className = 'hidden';\n}    ///////////////////////////////////////////////////////////////////////////////////////////////////\n// Response Handlers\n///////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * Default handler for responses triggered by targeted ajax requests\n * @private\n * @param {AjaxRequester} requester the active requester instance\n * @param {Array} params parameters bundled with the request\n */\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// Response Handlers\n///////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * Default handler for responses triggered by targeted ajax requests\n * @private\n * @param {AjaxRequester} requester the active requester instance\n * @param {Array} params parameters bundled with the request\n */\nfunction targettedResponseHandler(requester) {\n    var xmlhttp = requester.xmlhttp;\n    var fillId = requester.params[0];\n    var fromId = requester.params[1];\n    var callback = requester.params[2];\n    var toLocation = jQuery('#' + fillId)[0];\n    if (fromId) {\n        jQuery(toLocation).html('');\n        updateUsingResponseSubset(xmlhttp, fromId, toLocation);\n    } else {\n        var res = xmlhttp.responseText.trim();    //dirty solution for old dashboards because we haven't common format pattern for ajax response\n        //dirty solution for old dashboards because we haven't common format pattern for ajax response\n        if (res.indexOf('<div') === 0) {\n            var opentTag = res.substring(0, res.indexOf('>') + 1);\n            var body = res.substring(res.indexOf('>') + 1, res.lastIndexOf('</'));\n            var closeTag = res.substring(res.lastIndexOf('</'));    //we want all the retrieved content - throw it all in\n            //we want all the retrieved content - throw it all in\n            var ajaxBuffer = jQuery(opentTag + closeTag);\n\n            // Escape extra level per JSON being inserted into & read from the page\n            body = body.replace(/&quot;/g, \"&amp;quot;\");\n            ajaxBuffer.text(xssUtil.hardEscape(body));\n            jQuery(toLocation).html(ajaxBuffer);\n        } else {\n            jQuery(toLocation).html(res);\n        }\n    }\n    invokeCallbacks(callback, toLocation);\n}    /**\n * Handler adds new content to existing content in specified container\n * @private\n * @param {AjaxRequester} requester the active requester instance\n * @param {Array} params parameters bundled with the request\n */\n/**\n * Handler adds new content to existing content in specified container\n * @private\n * @param {AjaxRequester} requester the active requester instance\n * @param {Array} params parameters bundled with the request\n */\nfunction cumulativeResponseHandler(requester) {\n    var xmlhttp = requester.xmlhttp;\n    var fillId = requester.params[0];\n    var fromId = requester.params[1];\n    var callback = requester.params[2];\n    var toLocation = jQuery('#' + fillId)[0];\n    if (fromId) {\n        updateUsingResponseSubset(xmlhttp, fromId, toLocation);\n    } else {\n        //we want all the retrieved content - throw it all in\n        toLocation.insert(xmlhttp.responseText, { position: 'after' });    //note this will eval scripts too\n    }\n    invokeCallbacks(callback);\n}    /**\n * Use this handler if the response text represents table rows to add to an existing rows in the specified container\n * (more efficient than appending innerHtml)\n * @private\n * @param {AjaxRequester} requester the active requester instance\n * @param {Array} params parameters bundled with the request\n */\n/**\n * Use this handler if the response text represents table rows to add to an existing rows in the specified container\n * (more efficient than appending innerHtml)\n * @private\n * @param {AjaxRequester} requester the active requester instance\n * @param {Array} params parameters bundled with the request\n */\nfunction rowCopyResponseHandler(requester) {\n    var xmlhttp = requester.xmlhttp;\n    var tableId = requester.params[0];    //var newRowId = params[1]; //not used yet\n    //var newRowId = params[1]; //not used yet\n    var callback = requester.params[2];\n    var theTable = jQuery('#' + tableId)[0];\n    if (theTable.tagName !== 'TABLE') {\n        alert('Ajax Exception: rowCopyResponseHandler will not work for container ' + theTable.tagName);\n        return;\n    }    //put response html into a temp div to form the table\n    //var tempDiv = document.createElement('DIV');\n    //put response html into a temp div to form the table\n    //var tempDiv = document.createElement('DIV');\n    var tempDiv = Builder.node('DIV');\n    jQuery(tempDiv).html(xmlhttp.responseText);    //now copy to existing table body\n    //now copy to existing table body\n    copyTable(tempDiv.getElementsByTagName('table')[0], theTable, false, false);\n    invokeCallbacks(callback);\n}    /**\n * Special handler for when we want to overwrite entire page with response\n * @param {AjaxRequester} the active requester instance\n * @param {Array} parameters bundled with the request\n * @private\n */\n// TODO Consider for removal\n/**\n * Special handler for when we want to overwrite entire page with response\n * @param {AjaxRequester} the active requester instance\n * @param {Array} parameters bundled with the request\n * @private\n */\n// TODO Consider for removal\nvar clobberingResponseHandler = function (requester) {\n    var callback = requester.params[2];\n    jQuery(document.body).html(requester.xmlhttp.responseText);\n    document.fire('dom:loaded');\n    invokeCallbacks(callback);\n};    /**\n * Handler evals JSOn expression. Does not update markup in anyway\n * For any updates to occur, responseText expression must include an assignment\n * e.g. \"var myProfile = {city: London, age: 39, hobbies: ['waterskiing','chess']}\"\n * @param {AjaxRequester} the active requester instance\n * @param {Array} parameters bundled with the request\n * @private\n */\n/**\n * Handler evals JSOn expression. Does not update markup in anyway\n * For any updates to occur, responseText expression must include an assignment\n * e.g. \"var myProfile = {city: London, age: 39, hobbies: ['waterskiing','chess']}\"\n * @param {AjaxRequester} the active requester instance\n * @param {Array} parameters bundled with the request\n * @private\n */\nvar evalJSONResponseHandler = function (requester) {\n    var jSONResponse = null;\n    try {\n        jSONResponse = requester.xmlhttp.responseText.evalJSON();\n    } catch (e) {\n        /*eslint-disable-next-line no-console*/\n        window.console && console.log(e);\n    }\n    var callback = requester.params[2];\n    invokeCallbacks(callback, jSONResponse);\n};\nfunction updateUsingResponseSubset(xmlhttp, fromLocation, toLoc) {\n    /**\n\t * This prevents the script tags inside responseText to be executed;\n\t * If we wanted them to be executed, we would have wrapped the responseText with a div like this:\n\t * \t\tvar response = jQuery('<div/>').html(xmlhttp.responseText);\n\t */\n    var response = jQuery(xmlhttp.responseText);\n    var whatWeWant = response.filter('#' + fromLocation);\n    if (toLoc.tagName == 'TABLE' && jQuery('#' + fromLocation)[0].tagName == 'TABLE') {\n        copyTableJquery(whatWeWant, toLoc, true);\n    } else {\n        jQuery(toLoc).append(whatWeWant.html());\n    }\n    function iterate() {\n        if (idx >= sz) {\n            return;\n        }\n        var scriptObj = jQuery(scriptTags.get(idx));\n        if (scriptObj.attr('src')) {\n            idx++;\n            loadScript(scriptObj.attr('data-custname'), scriptObj.attr('src'), iterate);\n        } else {\n            idx++;\n            executeScript(scriptObj.html(), iterate);\n        }\n    }\n    function loadScript(scriptName, scriptUrl, callbackFn) {\n        var gotCallback = callbackFn || false, scriptElement = document.createElement('script');    // prevent the script tag from being created more than once\n        // prevent the script tag from being created more than once\n        if (!window.jr_scripts) {\n            window.jr_scripts = {};\n        }\n        if (!window.jr_scripts[scriptName] && scriptName !== 'jr_jq_min') {\n            // skips jQuery core script\n            scriptElement.setAttribute('type', 'text/javascript');\n            if (scriptElement.readyState) {\n                // for IE\n                scriptElement.onreadystatechange = function () {\n                    if (scriptElement.readyState === 'loaded' || scriptElement.readyState === 'complete') {\n                        scriptElement.onreadystatechange = null;\n                        if (gotCallback) {\n                            callbackFn();\n                        }\n                    }\n                };\n            } else {\n                // for Others - this is not supposed to work on Safari 2\n                scriptElement.onload = function () {\n                    if (gotCallback) {\n                        callbackFn();\n                    }\n                };\n            }\n            scriptElement.src = scriptUrl;\n            document.getElementsByTagName('head')[0].appendChild(scriptElement);\n            window.jr_scripts[scriptName] = scriptUrl;\n        } else if (gotCallback) {\n            callbackFn();\n        }\n    }\n    function executeScript(scriptString, callbackFn) {\n        var gotCallback = callbackFn || false;\n        if (scriptString) {\n            var lines = scriptString.match(/^.*((\\r\\n|\\n|\\r)|$)/gm);\n            /*eslint-disable-next-line no-eval*/\n            window.eval(lines.join('\\n'));\n            if (gotCallback) {\n                callbackFn();\n            }\n        }\n    }    /*\n     * fusioncharts & jasperreports interactive: load JavaScript scripts synchronously\n     */\n    /*\n     * fusioncharts & jasperreports interactive: load JavaScript scripts synchronously\n     */\n    if (typeof jQuery !== 'undefined' && true) {\n        var scriptTags = response.filter('script.jasperreports'), sz = scriptTags.size(), idx = 0;\n        iterate();\n    }\n}\nfunction invokeCallbacks(callback, customArg) {\n    if (callback) {\n        /*eslint-disable-next-line no-eval*/\n        typeof callback === 'string' ? eval(callback) : callback(customArg);\n    }\n}    /////////////////////////////////////////////////////////////////////////////////////////\n// Public API starts Here....\n// Please do not amend exisiting signatures but feel free to extend the API as required\n/////////////////////////////////////////////////////////////////////////////////////////\n/**\n * Send an ajax request with this URL and update the entire page with the response\n * @param {String} url of the request\n */\n// TODO Consider for removal\n/////////////////////////////////////////////////////////////////////////////////////////\n// Public API starts Here....\n// Please do not amend exisiting signatures but feel free to extend the API as required\n/////////////////////////////////////////////////////////////////////////////////////////\n/**\n * Send an ajax request with this URL and update the entire page with the response\n * @param {String} url of the request\n */\n// TODO Consider for removal\nfunction ajaxClobberredUpdate(url, options) {\n    options.responseHandler = clobberingResponseHandler;\n    ajaxUpdate(url, options);\n}    /**\n * Send an ajax request with this URL and update the targetContainer  with the sourceContainer container of the response DOM\n * Optionally execute the post fill action as a callback following response processing\n * @param {String} url the url of the request\n * @param {String} targetContainer id indicating where to dump html response\n * @param {String} sourceContainer id indicating which part of the html response to use\n * @param {Array} callback JS functions to evaluate after ajax update\n * @param {function} errorHandler a function to evaluate to trap errors\n * @param {String} postData user data for posting - where applicable\n * @param {String} update mode (default is targetted replace)\n */\n/**\n * Send an ajax request with this URL and update the targetContainer  with the sourceContainer container of the response DOM\n * Optionally execute the post fill action as a callback following response processing\n * @param {String} url the url of the request\n * @param {String} targetContainer id indicating where to dump html response\n * @param {String} sourceContainer id indicating which part of the html response to use\n * @param {Array} callback JS functions to evaluate after ajax update\n * @param {function} errorHandler a function to evaluate to trap errors\n * @param {String} postData user data for posting - where applicable\n * @param {String} update mode (default is targetted replace)\n */\nfunction ajaxTargettedUpdate(url, options) {\n    var responseHandler;\n    if (options.mode == AjaxRequester.prototype.CUMULATIVE_UPDATE) {\n        responseHandler = cumulativeResponseHandler;\n    } else if (options.mode == AjaxRequester.prototype.ROW_COPY_UPDATE) {\n        responseHandler = rowCopyResponseHandler;\n    } else if (options.mode == AjaxRequester.prototype.EVAL_JSON) {\n        responseHandler = evalJSONResponseHandler;\n    } else {\n        responseHandler = targettedResponseHandler;\n    }\n    options.responseHandler = function (requester, params) {\n        if (options.preFillAction) {\n            if (typeof options.preFillAction == 'string') {\n                /*eslint-disable-next-line no-eval*/\n                eval(options.preFillAction);\n            } else {\n                options.preFillAction(responseHandler(requester, params));\n            }\n        } else {\n            responseHandler(requester, options.params);\n        }\n    };\n    ajaxUpdate(url, options);\n}    /**\n * Send an ajax request with this URL but don't return any content to the sender\n * Optionally execute the post fill action as a callback following response processing\n * @param {String} url the url of the request\n * @param {String} targetContainer id indicating where to dump html response\n * @param {String} sourceContainer id indicating which part of the html response to use\n * @param {Array} callback JS functions to evaluate after ajax update\n * @param {function} errorHandler a function to evaluate to trap errors\n * @param {String} postData user data for posting - where applicable\n */\n/**\n * Send an ajax request with this URL but don't return any content to the sender\n * Optionally execute the post fill action as a callback following response processing\n * @param {String} url the url of the request\n * @param {String} targetContainer id indicating where to dump html response\n * @param {String} sourceContainer id indicating which part of the html response to use\n * @param {Array} callback JS functions to evaluate after ajax update\n * @param {function} errorHandler a function to evaluate to trap errors\n * @param {String} postData user data for posting - where applicable\n */\nfunction ajaxNonReturningUpdate(url, options) {\n    options.responseHandler = null;\n    ajaxUpdate(url, options);\n}    /**\n * Submit the form and replace entire page\n * @param {String} form name of the form\n * @param {String} url the url of the request\n * @param {String} extraPostData form data for posting\n * @param {String} targetContainer id indicating where to dump html response\n * @param {String} sourceContainer id indicating which part of the html response to use\n * @param {Array} callback JS functions to evaluate after ajax update\n * @param {function} errorHandler a function to evaluate to trap errors\n */\n/**\n * Submit the form and replace entire page\n * @param {String} form name of the form\n * @param {String} url the url of the request\n * @param {String} extraPostData form data for posting\n * @param {String} targetContainer id indicating where to dump html response\n * @param {String} sourceContainer id indicating which part of the html response to use\n * @param {Array} callback JS functions to evaluate after ajax update\n * @param {function} errorHandler a function to evaluate to trap errors\n */\nfunction ajaxClobberedFormSubmit(form, url, options) {\n    var postData = getPostData(form, window.extraPostData);\n    options.postData = appendPostData(postData, window.extraPostData);\n    options.responseHandler = clobberingResponseHandler;\n    ajaxUpdate(url, options);\n}    /**\n * Submit the form and update the targetContainer  with the sourceContainer container of the response DOM\n * @param {String} form name of the form\n * @param {String} url the url of the request\n * @param {String} extraPostData form data for posting\n * @param {String} targetContainer id indicating where to dump html response\n * @param {String} sourceContainer id indicating which part of the html response to use\n * @param {Array} callback JS functions to evaluate after ajax update\n * @param {function} errorHandler a function to evaluate to trap errors\n */\n/**\n * Submit the form and update the targetContainer  with the sourceContainer container of the response DOM\n * @param {String} form name of the form\n * @param {String} url the url of the request\n * @param {String} extraPostData form data for posting\n * @param {String} targetContainer id indicating where to dump html response\n * @param {String} sourceContainer id indicating which part of the html response to use\n * @param {Array} callback JS functions to evaluate after ajax update\n * @param {function} errorHandler a function to evaluate to trap errors\n */\nfunction ajaxTargettedFormSubmit(form, url, options) {\n    var postData = getPostData(form, options.extraPostData);\n    options.postData = appendPostData(postData, options.extraPostData);\n    options.responseHandler = targettedResponseHandler;\n    ajaxUpdate(url, options);\n}\nfunction ajaxErrorHandler() {\n    showMessageDialog(window.ajaxError, window.ajaxErrorHeader);\n}    ////////////////////////////////////////////////////////////////////////////////\n// ...Public API ends Here....\n////////////////////////////////////////////////////////////////////////////////\n/**\n * @private\n */\n//dummy response handler for non returning case\n////////////////////////////////////////////////////////////////////////////////\n// ...Public API ends Here....\n////////////////////////////////////////////////////////////////////////////////\n/**\n * @private\n */\n//dummy response handler for non returning case\nfunction doNothing() {\n}    /**\n * Wrapper for AjaxRequester\n * @private\n * @param {String} url - the url of the request\n * @param {Object} options - an object literal optioanlly defining:\n * @option {function} responseHandler - the designated response handler\n * @option {String} fillLocation - id indicating where in the DOM to dump ajax response\n * @option {String} fromLocation - id indicating which part of the ajax response to use\n * @option {Array} callback - JS functions to evaluate after ajax update\n * @option {function} errorHandler - the designated error handler\n * @option {String} postData - user data for posting - where applicable\n */\n/**\n * Wrapper for AjaxRequester\n * @private\n * @param {String} url - the url of the request\n * @param {Object} options - an object literal optioanlly defining:\n * @option {function} responseHandler - the designated response handler\n * @option {String} fillLocation - id indicating where in the DOM to dump ajax response\n * @option {String} fromLocation - id indicating which part of the ajax response to use\n * @option {Array} callback - JS functions to evaluate after ajax update\n * @option {function} errorHandler - the designated error handler\n * @option {String} postData - user data for posting - where applicable\n */\nfunction ajaxUpdate(url, options) {\n    var ok = true;\n    var requester = new AjaxRequester(url, [\n        options.fillLocation,\n        options.fromLocation,\n        options.callback,\n        options.isAutomaticRefresh\n    ], options.postData, options.synchronous);\n    if (isIPad() && JRS.vars.current_flow == 'adhoc') {\n        if (!JRS.vars.ajax_in_progress) {\n            JRS.vars.ajax_in_progress = true;\n        }\n    }\n    if (ok) {\n        requester.busyCursor = !options.silent;\n        requester.showLoading = !options.silent && !options.hideLoader;\n        requester.responseHandler = options.responseHandler || doNothing;\n        if (requester.responseHandler != doNothing) {\n            ajaxRequestStarted(requester);\n        }\n        if (options.errorHandler) {\n            requester.errorHandler = options.errorHandler;\n        }\n        if (requester.xmlhttp) {\n            if (options.postData) {\n                requester.doPost();\n            } else {\n                requester.doGet();\n            }\n        }\n    }\n}    /**\n * @private\n */\n/**\n * @private\n */\nfunction checkForErrors(requester) {\n    var requesterErrorHandler = requester.errorHandler;\n    return requesterErrorHandler(requester.xmlhttp);\n}    /**\n * @private\n */\n/**\n * @private\n */\nfunction getPostData(form, extraPostData) {\n    if (typeof form == 'string') {\n        form = document.forms[form];\n    }\n    var data = '';\n    for (var i = 0; i < form.elements.length; ++i) {\n        var element = form.elements[i];\n        if (element.name && !(extraPostData && extraPostData[element.name])) {\n            data = appendFormInput(data, element);\n        }\n    }\n    return data;\n}    /**\n * @private\n */\n/**\n * @private\n */\nfunction appendPostData(postData, extraPostData) {\n    for (var name in extraPostData) {\n        postData = appendFormValue(postData, name, extraPostData[name]);\n    }\n    return postData;\n}    /**\n * @private\n */\n/**\n * @private\n */\nfunction appendFormInput(data, element) {\n    if (element.name) {\n        var value;\n        var append = false;\n        switch (element.type) {\n        case 'checkbox':\n        case 'radio':\n            append = element.checked;\n            value = element.value;\n            break;\n        case 'hidden':\n        case 'password':\n        case 'text':\n        case 'Textarea':\n            append = true;\n            value = element.value;\n            break;\n        case 'select-one':\n        case 'select-multiple':\n            value = [];\n            for (var i = 0; i < element.options.length; ++i) {\n                var option = element.options[i];\n                if (option.selected) {\n                    append = true;\n                    value.push(option.value);\n                }\n            }\n            break;\n        }\n        if (append) {\n            if (value.shift) {\n                while (value.length > 0) {\n                    data = appendFormValue(data, element.name, value.shift());\n                }\n            } else {\n                data = appendFormValue(data, element.name, value);\n            }\n        }\n    }\n    return data;\n}    /**\n * @private\n */\n/**\n * @private\n */\nfunction appendFormValue(data, name, value) {\n    if (data.length > 0) {\n        data += '&';\n    }\n    data += name + '=' + encodeURIComponent(value);\n    return data;\n}    /**\n * @private\n */\n/**\n * @private\n */\nvar ERROR_POPUP_DIV = 'jsErrorPopup';\nvar ERROR_POPUP_CONTENTS = 'errorPopupContents';\nvar ERROR_POPUP_BACK_BUTTON = 'errorBack';\nvar ERROR_POPUP_CLOSE_BUTTON = 'errorPopupCloseButton';    /**\n * @private\n */\n/**\n * @private\n */ /**\n * @private\n */\n/**\n * @private\n */\nfunction hideErrorPopup() {\n    popOverlayObject();\n    var errorPopup = document.getElementById(ERROR_POPUP_DIV);\n    errorPopup.style.display = 'none';\n}    ////////////////////////////////////////////////////////////////////////////////\n// Request counter\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n// Request counter\n////////////////////////////////////////////////////////////////////////////////\najax.ajaxRequestCount = 0;    /**\n * @private\n */\n/**\n * @private\n */\nfunction ajaxRequestStarted(requester) {\n    ++ajax.ajaxRequestCount;\n    requester.busyCursor && (document.body.style.cursor = 'wait');\n    !isIPad() && requester.showLoading && requester.startResponseTimer();\n}    /**\n * @private\n */\n/**\n * @private\n */\nfunction ajaxRequestEnded(requester) {\n    requester.cancelResponseTimer();\n    if (ajax.ajaxRequestCount <= 1) {\n        document.body.style.cursor = 'auto';\n        ajax.ajaxRequestCount = 0;\n        dialogs.popup.hide(jQuery('#' + ajax.LOADING_ID)[0]);\n    } else {\n        ajax.ajaxRequestCount--;\n    }\n}\nfunction isValidJsonResponse(ajaxAgent) {\n    var responseType = ajaxAgent.getResponseHeader('Content-Type');\n    return ajaxAgent.status == 200 && responseType != null && responseType.indexOf('application/json') >= 0;\n}    ////////////////////////////////////////////////////////////////////////////////\n// XMLHTTP\n////////////////////////////////////////////////////////////////////////////////\n//\n// standard function to obtain an xmlhttp instance regardless of platform\n//\n////////////////////////////////////////////////////////////////////////////////\n// XMLHTTP\n////////////////////////////////////////////////////////////////////////////////\n//\n// standard function to obtain an xmlhttp instance regardless of platform\n//\nfunction getXMLHTTP() {\n    var alerted;\n    var xmlhttp;    /*@cc_on @*/\n    /*@if (@_jscript_version >= 5)\n     // JScript gives us Conditional compilation, we can cope with old IE versions.\n     try {\n     xmlhttp=new ActiveXObject(\"Msxml2.XMLHTTP\")\n     } catch (e) {\n     try {\n     xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\")\n     } catch (E) {\n     alert(\"You must have Microsofts XML parsers available\")\n     }\n     }\n     @else\n     alert(\"You must have JScript version 5 or above.\")\n     xmlhttp=false\n     alerted=true\n     @end @*/\n    /*@cc_on @*/\n    /*@if (@_jscript_version >= 5)\n     // JScript gives us Conditional compilation, we can cope with old IE versions.\n     try {\n     xmlhttp=new ActiveXObject(\"Msxml2.XMLHTTP\")\n     } catch (e) {\n     try {\n     xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\")\n     } catch (E) {\n     alert(\"You must have Microsofts XML parsers available\")\n     }\n     }\n     @else\n     alert(\"You must have JScript version 5 or above.\")\n     xmlhttp=false\n     alerted=true\n     @end @*/\n    if (!xmlhttp && !alerted) {\n        // Non ECMAScript Ed. 3 will error here (IE<5 ok), nothing I can\n        // realistically do about it, blame the w3c or ECMA for not\n        // having a working versioning capability in  <SCRIPT> or\n        // ECMAScript.\n        try {\n            xmlhttp = new XMLHttpRequest();\n        } catch (e) {\n            alert('You need a browser which supports an XMLHttpRequest Object.\\nMozilla build 0.9.5 has this Object and IE5 and above, others may do, I don\\'t know, any info jim@jibbering.com');\n        }\n    }\n    return xmlhttp;\n}\n\n//expose to global scope\nwindow.ajaxNonReturningUpdate = ajaxNonReturningUpdate;\n\nexport {\n    ajaxErrorHandler,\n    ajaxClobberredUpdate,\n    isValidJsonResponse,\n    getPostData,\n    checkForErrors,\n    ajaxRequestStarted,\n    ajaxTargettedFormSubmit,\n    ajaxUpdate,\n    evalJSONResponseHandler,\n    rowCopyResponseHandler,\n    cumulativeResponseHandler,\n    updateUsingResponseSubset,\n    targettedResponseHandler,\n    ajaxRequestEnded,\n    handleResponse,\n    invokeCallbacks,\n    getXMLHTTP,\n    ajax,\n    ajaxTargettedUpdate,\n    ajaxNonReturningUpdate,\n    appendPostData,\n    AjaxRequester\n};","/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved.\n * http://www.jaspersoft.com.\n *\n * Unless you have purchased a commercial license agreement from Jaspersoft,\n * the following license terms apply:\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport dialogs from \"../components/components.dialogs\";\nimport {JRS} from \"../namespace/namespace\";\nimport jQuery from 'jquery';\n\nfunction showErrorPopup(errorMessage, options) {\n    if ((errorMessage && errorMessage.indexOf('sessionAttributeMissingException')) > -1) {\n        dialogs.clusterErrorPopup.show(errorMessage);\n    } else {\n        dialogs.errorPopup.show(errorMessage, false, options);\n    }\n}\nfunction baseErrorHandler(ajaxAgent) {\n    //Handling HTTP 500 - Internal server error\n    if (ajaxAgent.status == 500) {\n        showErrorPopup(ajaxAgent.responseText);\n        return true;\n    }\n    var sessionTimeout = ajaxAgent.getResponseHeader('LoginRequested');\n    if (sessionTimeout) {\n        var newloc = '.';\n        document.location = newloc;\n        return true;\n    }\n    var isErrorPage = ajaxAgent.getResponseHeader('JasperServerError');\n    if (isErrorPage) {\n        var suppressError = ajaxAgent.getResponseHeader('SuppressError');\n        if (!suppressError) {\n            // For dashboard frame we should render error message as frame content.\n            var dashboardViewFrame = jQuery('.dashboardViewFrame');\n            if (dashboardViewFrame.length == 1) {\n                jQuery(document.body).html(ajaxAgent.responseText);\n                var iFrame = jQuery('#' + JRS.fid, window.parent.document);\n                iFrame.removeClass('hidden').show();\n            } else {\n                // In other cases we render error message as popup.\n                showErrorPopup(ajaxAgent.responseText);\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction errorHandler() {}\nfunction showMessageDialog() {}\n\nexport {\n    showErrorPopup,\n    baseErrorHandler,\n    errorHandler,\n    showMessageDialog\n}"],"sourceRoot":""}