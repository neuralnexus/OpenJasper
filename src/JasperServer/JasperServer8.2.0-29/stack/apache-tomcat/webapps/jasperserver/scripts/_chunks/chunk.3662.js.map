{"version":3,"sources":["webpack://jrs-ui/../bi-report/src/bi/report/jive/model/ColumnGroupModel.js","webpack://jrs-ui/../bi-report/src/bi/report/jive/model/TableComponentModel.js"],"names":["Backbone","defaults","id","groupType","groupName","dataType","forColumns","conditionalFormattingData","groupData","constructor","this","format","FormatModel","conditions","ConditionCollection","arguments","parse","response","jiveDataConverter","set","silent","conditionPattern","reset","actions","get","parent","name","size","bold","italic","underline","color","toJiveFormat","charAt","toUpperCase","slice","genericProperties","config","undefined","conditionType","map","conditionModel","updateFromReportComponentObject","obj","font","_","pattern","backgroundColor","ColumnGroupCollection","model","ColumnGroupModel","BaseComponentModel","calendarPatterns","filterPatterns","fontSizes","fonts","operators","patterns","module","type","jiveTypes","uimodule","hasFloatingHeader","columnGroups","initialize","o","allColumnsData","$","columns","columnMap","self","allColumnGroupsData","each","group","registerPart","column","trigger","getId","handleServerError","result","handleClientError"],"mappings":"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","file":"_chunks/chunk.3662.js","sourcesContent":["/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved. Confidentiality & Proprietary.\n * Licensed pursuant to commercial TIBCO End User License Agreement.\n */\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport FormatModel from './FormatModel';\nimport jiveDataConverter from '../util/jiveDataConverter';\nimport ConditionCollection from '../collection/ConditionCollection';\n\nexport default Backbone.Model.extend({\n    defaults: function () {\n        return {\n            id: null,\n            groupType: '',\n            groupName: '',\n            dataType: '',\n            forColumns: [],\n            conditionalFormattingData: null,\n            groupData: {}\n        };\n    },\n    constructor: function () {\n        this.format = new FormatModel();\n        this.conditions = new ConditionCollection();\n        Backbone.Model.prototype.constructor.apply(this, arguments);\n    },\n    parse: function (response) {\n        if (response.groupData) {\n            this.format.dataType = jiveDataConverter.dataTypeToSchemaFormat[response.dataType];\n            this.format.set(this.format.parse(response.groupData), { silent: true });\n        }\n        if (response.conditionalFormattingData) {\n            this.conditions.dataType = jiveDataConverter.dataTypeToSchemaFormat[response.dataType];\n            this.conditions.conditionPattern = response.conditionalFormattingData.conditionPattern;\n            this.conditions.reset(response.conditionalFormattingData.conditions, {\n                silent: true,\n                parse: true\n            });\n        }\n        return response;\n    },\n    actions: {\n        'change:format': function () {\n            return {\n                'actionName': 'editTextElement',\n                'editTextElementData': {\n                    'applyTo': this.get('groupType'),\n                    'tableUuid': this.parent.get('id'),\n                    'columnIndex': this.get('forColumns')[0],\n                    'groupName': this.get('groupName'),\n                    'fontName': this.format.get('font').name,\n                    'fontSize': this.format.get('font').size + '',\n                    'fontBold': this.format.get('font').bold,\n                    'fontItalic': this.format.get('font').italic,\n                    'fontUnderline': this.format.get('font').underline,\n                    'fontColor': this.format.get('font').color,\n                    'formatPattern': this.format.toJiveFormat(),\n                    'fontHAlign': this.format.get('align').charAt(0).toUpperCase() + this.format.get('align').slice(1),\n                    'fontBackColor': this.format.get('backgroundColor') === 'transparent' ? '000000' : this.format.get('backgroundColor'),\n                    'mode': this.format.get('backgroundColor') === 'transparent' ? 'Transparent' : 'Opaque'\n                }\n            };\n        },\n        'change:conditions': function () {\n            var genericProperties = this.parent && this.parent.config ? this.parent.config.genericProperties : undefined;\n            return {\n                'actionName': 'conditionalFormatting',\n                'conditionalFormattingData': {\n                    'applyTo': this.get('groupType'),\n                    'tableUuid': this.parent.get('id'),\n                    'columnIndex': this.get('forColumns')[0],\n                    'groupName': this.get('groupName'),\n                    'conditionPattern': this.get('conditionalFormattingData').conditionPattern,\n                    'conditionType': this.get('conditionalFormattingData').conditionType,\n                    'conditions': this.conditions.map(function (conditionModel) {\n                        return conditionModel.toJiveFormat(genericProperties);\n                    })\n                }\n            };\n        }\n    },\n    updateFromReportComponentObject: function (obj) {\n        var setterObj = {};\n        if (obj.format) {\n            obj.format.font = _.extend({}, this.format.get('font'), obj.format.font || {});\n            if (_.isObject(this.format.get('pattern'))) {\n                if (!('Numeric' === this.get('dataType') && jiveDataConverter.DURATION_PATTERN === obj.format.pattern)) {\n                    obj.format.pattern = _.extend({}, this.format.get('pattern'), obj.format.pattern || {});\n                }\n            }\n            if (obj.format.backgroundColor && obj.format.backgroundColor !== 'transparent') {\n                obj.format.backgroundColor = obj.format.backgroundColor.toUpperCase();\n            }\n            if (obj.format.font && obj.format.font.color) {\n                obj.format.font.color = obj.format.font.color.toUpperCase();\n            }\n            this.format.set(obj.format);\n        }\n        if (obj.conditions) {\n            this.conditions.reset(obj.conditions);\n        }\n        this.set(setterObj);\n    }\n});","/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved. Confidentiality & Proprietary.\n * Licensed pursuant to commercial TIBCO End User License Agreement.\n */\n\nimport BaseComponentModel from './BaseComponentModel';\nimport jiveTypes from '../enum/jiveTypes';\nimport $ from 'jquery';\nimport Backbone from 'backbone';\nimport ColumnGroupModel from './ColumnGroupModel';\n\nvar genericProperties = null;\nvar ColumnGroupCollection = Backbone.Collection.extend({ model: ColumnGroupModel });\nexport default BaseComponentModel.extend({\n    defaults: function () {\n        return {\n            calendarPatterns: {},\n            filterPatterns: {},\n            fontSizes: [],\n            fonts: {},\n            operators: {},\n            patterns: {},\n            id: null,\n            genericProperties: {},\n            module: 'jive.table',\n            type: jiveTypes.TABLE,\n            uimodule: 'jive.interactive.column',\n            hasFloatingHeader: null\n        };\n    },\n    constructor: function () {\n        this.columnGroups = new ColumnGroupCollection();\n        BaseComponentModel.prototype.constructor.apply(this, arguments);\n    },\n    initialize: function (o) {\n        this.config = {\n            id: null,\n            /**\n                 * {\"1\":{\"index\":\"1\",\"label\":\"Name\",\"uuid\":\"ace5fd47-03c8-4d26-b2c0-354ca60560e0\",\"visible\":false,\"interactive\":true},..}\n                 */\n            allColumnsData: null\n        };\n        $.extend(this.config, o);\n        if (o.genericProperties) {\n            genericProperties = o.genericProperties;\n        } else {\n            this.config.genericProperties = genericProperties;\n        }\n        this.columns = [];\n        this.columnMap = {};\n    },\n    parse: function (response) {\n        var self = this;\n        if (response.allColumnGroupsData) {\n            this.columnGroups.reset(response.allColumnGroupsData, {\n                silent: true,\n                parse: true\n            });\n            this.columnGroups.each(function (group) {\n                group.parent = self;\n            });\n        }\n        return response;\n    },\n    registerPart: function (column) {\n        column.parent = this;\n        column.trigger('parentTableComponentAttached');\n        this.columns[column.get('columnIndex')] = column;\n        this.columnMap[column.get('id')] = column;\n    },\n    getId: function () {\n        return this.config.id;\n    },\n    handleServerError: function(result) {\n        this.trigger(\"serverError\", result);\n    },\n    handleClientError: function(result) {\n        this.trigger(\"serverError\", result);\n    }\n});"],"sourceRoot":""}