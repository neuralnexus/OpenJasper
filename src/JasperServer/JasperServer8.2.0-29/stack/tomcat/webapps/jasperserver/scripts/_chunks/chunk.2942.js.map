{"version":3,"sources":["webpack://jrs-ui/../js-sdk/src/common/extension/jQueryjCryptionExtensions.js","webpack://jrs-ui/../js-sdk/src/common/util/encrypter.js","webpack://jrs-ui/./src/encrypt/encrypt.common.js","webpack://jrs-ui/./runtime_dependencies/jCryption/jquery.jcryption.js"],"names":["$","string","keyPair","callback","i","length","charCodeAt","encrypt","l","chunkSize","encryptObject","j","block","charCounter","encrypted","setTimeout","encryptChar","BigInt","k","digits","crypt","barrett","powMod","e","text","radix","biToHex","biToString","encryptedString","substring","encryption","JSEncrypter","encryptData","dataObj","callbackFunc","receivedKey","pubKey","keyArr","push","_encryptDataRecursive","index","encDataObj","reversedDataToEncrypt","encodeURIComponent","split","reverse","join","receivedEncrypted","$text1","$text2","submitEncrypt","event","val","window","isEncryptionOn","j_password","encData","removeAttr","preventDefault","click","keypress","keyCode","which","_","jQuery","jCryption","el","options","base","this","$el","data","init","extend","defaultOptions","$encryptedElement","type","name","postVariable","submitElement","$submitElement","find","bind","submitEvent","attr","beforeEncryption","getKeys","getKeysURL","keys","serialize","formFieldSelector","end","append","submit","url","jCryptionKeyPair","encryptionExponent","modulus","maxdigits","value","maxDigits","ZERO_ARRAY","Array","iza","bigZero","bigOne","setMaxDigits","parseInt","biFromHex","m","biHighIndex","BarrettMu","getJSON","n","isFunction","call","charSum","tag","hex","taggedString","charAt","fn","each","bitsPerDigit","biRadix","maxDigitVal","highBitMasks","hexatrigesimalToChar","hexToChar","lowBitMasks","flag","slice","isNeg","biCopy","bi","result","reverseStr","s","x","b","qr","biDivideModulo","biCompare","digit","digitToHex","charToHex","c","ZERO","littleA","hexToDigit","sl","Math","min","substr","max","biAdd","y","biSubtract","Number","biNumBits","d","biMultiply","uv","t","biMultiplyDigit","arrayCopy","src","srcStart","dest","destStart","biShiftLeft","digitCount","floor","bits","rightBits","i1","biShiftRight","leftBits","biMultiplyByRadixPower","biDivideByRadixPower","biModuloByRadixPower","q","r","nb","tb","origYIsNeg","ceil","lambda","ri","ri1","ri2","yt","yt1","c1","c2","b2k","mu","bkplus1","modulo","BarrettMu_modulo","multiplyMod","BarrettMu_multiplyMod","BarrettMu_powMod","q1","q3","rgtem","xy"],"mappings":"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","file":"_chunks/chunk.2942.js","sourcesContent":["/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved.\n * http://www.jaspersoft.com.\n *\n * Unless you have purchased a commercial license agreement from Jaspersoft,\n * the following license terms apply:\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/*global BigInt, biToHex, biToString */\n\nimport $ from 'jquery';\nimport {BigInt, biToHex, biToString} from 'jCryption';\n\n$.jCryption.encryptKeyWithoutRedundancy = function (string, keyPair, callback) {\n    if (string === '') {\n        if ($.isFunction(callback)) {\n            callback(string);\n            return;\n        } else {\n            return string;\n        }\n    }\n    var charSum = 0;\n    for (var i = 0; i < string.length; i++) {\n        charSum += string.charCodeAt(i);\n    }\n    var encrypt = [];\n    var l = 0;\n    while (l < string.length) {\n        encrypt[l] = string.charCodeAt(l);\n        l++;\n    }\n    while (encrypt.length % keyPair.chunkSize !== 0) {\n        encrypt[l++] = 0;\n    }\n\n    function encryption(encryptObject) {\n        var charCounter = 0;\n        var j, block;\n        var encrypted = '';\n\n        function encryptChar() {\n            block = new BigInt();\n            j = 0;\n            for (var k = charCounter; k < charCounter + keyPair.chunkSize; ++j) {\n                block.digits[j] = encryptObject[k++];\n                block.digits[j] += encryptObject[k++] << 8;\n            }\n            var crypt = keyPair.barrett.powMod(block, keyPair.e);\n            var text = keyPair.radix == 16 ? biToHex(crypt) : biToString(crypt, keyPair.radix);\n            encrypted += text + ' ';\n            charCounter += keyPair.chunkSize;\n            if (charCounter < encryptObject.length) {\n                setTimeout(encryptChar, 1);\n            } else {\n                var encryptedString = encrypted.substring(0, encrypted.length - 1);\n                if ($.isFunction(callback)) {\n                    callback(encryptedString);\n                } else {\n                    return encryptedString;\n                }\n            }\n        }\n\n        setTimeout(encryptChar, 1);\n    }\n\n    encryption(encrypt);\n};\nexport default $;","/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved.\n * http://www.jaspersoft.com.\n *\n * Unless you have purchased a commercial license agreement from Jaspersoft,\n * the following license terms apply:\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport $ from '../extension/jQueryjCryptionExtensions';\nvar Base64Coder = {};\nBase64Coder.code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nBase64Coder.encode16BitString = function (str) {\n    var hd1, hd2, bits, h1, h2, h3, h4, h5, d6, e = [], pad = '', c, plain, coded;\n    var b64 = Base64Coder.code;\n    plain = str;\n    c = plain.length % 2;\n    if (c > 0) {\n        while (c++ < 2) {\n            pad += '===';\n            plain += '\\0';\n        }\n    }\n    for (c = 0; c < plain.length; c += 2) {\n        hd1 = plain.charCodeAt(c);\n        hd2 = plain.charCodeAt(c + 1);\n        bits = hd1 << 16 | hd2;\n        h1 = bits >> 26 & 63;\n        h2 = bits >> 20 & 63;\n        h3 = bits >> 14 & 63;\n        h4 = bits >> 8 & 63;\n        h5 = bits >> 2 & 63;\n        d6 = bits & 3;\n        e[c / 2] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4) + b64.charAt(h5) + b64.charAt(d6);\n    }\n    coded = e.join('');\n    coded = coded.slice(0, coded.length - pad.length) + pad;\n    return coded;\n};\nBase64Coder.decode16BitString = function (str) {\n    var o1, o2, o3, o4, h1, h2, h3, h4, h5, d6, bits, d = [], plain, coded;\n    var b64 = Base64Coder.code;\n    coded = str;\n    for (var c = 0; c < coded.length; c += 6) {\n        h1 = b64.indexOf(coded.charAt(c));\n        h2 = b64.indexOf(coded.charAt(c + 1));\n        h3 = b64.indexOf(coded.charAt(c + 2));\n        h4 = b64.indexOf(coded.charAt(c + 3));\n        h5 = b64.indexOf(coded.charAt(c + 4));\n        d6 = b64.indexOf(coded.charAt(c + 5));\n        bits = h1 << 26 | h2 << 20 | h3 << 14 | h4 << 8 | h5 << 2 | d6 & 3;\n        o1 = bits >>> 24 & 255;\n        o2 = bits >>> 16 & 255;\n        o3 = bits >>> 8 & 255;\n        o4 = bits & 255;\n        d[c / 6] = String.fromCharCode(o1 << 8 | o2, o3 << 8 | o4);\n        if (h4 == 64)\n            d[c / 6] = d[c / 6] = String.fromCharCode(o1 << 8 | o2);\n    }\n    plain = d.join('');\n    return plain;\n};\nvar JSEncrypter = {\n    encryptData: function (dataObj, callbackFunc) {\n        if (!dataObj) {\n            callbackFunc();\n            return;\n        }\n        $.jCryption.getKeys('GetEncryptionKey', function (receivedKey) {\n            var pubKey = receivedKey;\n            var keyArr = [];\n            for (var i in dataObj)\n                keyArr.push(i);\n            var encData = {};\n            JSEncrypter._encryptDataRecursive(dataObj, keyArr, 0, pubKey, encData, callbackFunc);\n        });\n    },\n    _encryptDataRecursive: function (dataObj, keyArr, index, pubKey, encDataObj, callbackFunc) {\n        if (!keyArr || keyArr.length == index)\n            return;\n        var dataToEncrypt = encodeURIComponent(dataObj[keyArr[index]]);\n        var reversedDataToEncrypt = dataToEncrypt.split('').reverse().join('');\n        $.jCryption.encryptKeyWithoutRedundancy(reversedDataToEncrypt, pubKey, function (receivedEncrypted) {\n            encDataObj[keyArr[index]] = receivedEncrypted;\n            if (keyArr.length == index + 1)\n                callbackFunc(encDataObj);\n            else\n                JSEncrypter._encryptDataRecursive(dataObj, keyArr, index + 1, pubKey, encDataObj, callbackFunc);\n        });\n    }\n};\nexport default JSEncrypter;","/*\n * Copyright (C) 2005 - 2019 TIBCO Software Inc. All rights reserved.\n * http://www.jaspersoft.com.\n *\n * Unless you have purchased a commercial license agreement from Jaspersoft,\n * the following license terms apply:\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport JSEncrypter from 'js-sdk/src/common/util/encrypter';\n\nvar self = this, $text1 = $('#text1'), $text2 = $('#text2');\nvar submitEncrypt = function (event) {\n    if (!$.trim($text1.val())) {\n        return;\n    }\n    if (window.isEncryptionOn) {\n        JSEncrypter.encryptData({ j_password: $text1.val() }, function (encData) {\n            for (var k in encData) {\n                $text2.removeAttr('disabled').val(encData[k]);\n            }\n        });\n    }\n    event.preventDefault();\n};\nvar doClear = function (event) {\n    $text1.val('');\n    $text2.val('');\n    event.preventDefault();\n};    // event handling\n// event handling\n$('#clearButton').click(doClear);\n$('#submitButton').click(submitEncrypt);\n$text1.keypress(function (event) {\n    if ((event.keyCode || event.which) != 13) {\n        return;\n    }\n    _.defer(submitEncrypt, event);\n});\n","/*\n* jCryption JavaScript data encryption v1.2\n* http://www.jcryption.org/\n*\n* Copyright (c) 2010 Daniel Griesser\n* Dual licensed under the MIT and GPL licenses.\n* http://www.opensource.org/licenses/mit-license.php\n* http://www.opensource.org/licenses/gpl-2.0.php\n*\n* If you need any further information about this plugin please\n* visit my homepage or contact me under daniel.griesser@jcryption.org\n*/\n(function($) {\n\t$.jCryption = function(el, options) {\n\t\tvar base = this;\n\n\t\tbase.$el = $(el);\n\t\tbase.el = el;\n\n\t\tbase.$el.data(\"jCryption\", base);\n\t\tbase.init = function() {\n\n\t\t\tbase.options = $.extend({},$.jCryption.defaultOptions, options);\n\n\t\t\t$encryptedElement = $(\"<input />\",{\n\t\t\t\ttype:'hidden',\n\t\t\t\tname:base.options.postVariable\n\t\t\t});\n\n\t\t\tif (base.options.submitElement !== false) {\n\t\t\t\tvar $submitElement = base.options.submitElement;\n\t\t\t} else {\n\t\t\t\tvar $submitElement = base.$el.find(\":input:submit\");\n\t\t\t}\n\n\t\t\t$submitElement.bind(base.options.submitEvent,function() {\n\t\t\t\t$(this).attr(\"disabled\",true);\n\t\t\t\tif(base.options.beforeEncryption()) {\n\t\t\t\t\t$.jCryption.getKeys(base.options.getKeysURL, function(keys) {\n\t\t\t\t\t\t$.jCryption.encrypt(base.$el.serialize(), keys,function(encrypted) {\n\t\t\t\t\t\t\t$encryptedElement.val(encrypted);\n\t\t\t\t\t\t\t$(base.$el).find(base.options.formFieldSelector).attr(\"disabled\",true).end().append($encryptedElement).submit();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t};\n\n\t\tbase.init();\n\t};\n\n\t$.jCryption.getKeys = function(url,callback) {\n\t\tvar jCryptionKeyPair = function(encryptionExponent, modulus, maxdigits) {\n\t\t\tsetMaxDigits(parseInt(maxdigits,10));\n\t\t\tthis.e = biFromHex(encryptionExponent);\n\t\t\tthis.m = biFromHex(modulus);\n\t\t\tthis.chunkSize = 2 * biHighIndex(this.m);\n\t\t\tthis.radix = 16;\n\t\t\tthis.barrett = new BarrettMu(this.m);\n\t\t};\n\n\t\t$.getJSON(url,function(data){\n\t\t\tvar keys = new jCryptionKeyPair(data.e,data.n,data.maxdigits);\n\t\t\tif($.isFunction(callback)) {\n\t\t\t\tcallback.call(this, keys);\n\t\t\t}\n\t\t});\n\t};\n\n\t$.jCryption.encrypt = function(string,keyPair,callback) {\n\t\tvar charSum = 0;\n\t\tfor(var i = 0; i < string.length; i++){\n\t\t\tcharSum += string.charCodeAt(i);\n\t\t}\n\t\tvar tag = '0123456789abcdef';\n\t\tvar hex = '';\n\t\thex += tag.charAt((charSum & 0xF0) >> 4) + tag.charAt(charSum & 0x0F);\n\n\t\tvar taggedString = hex + string;\n\n\t\tvar encrypt = [];\n\t\tvar j = 0;\n\n\t\twhile (j < taggedString.length) {\n\t\t\tencrypt[j] = taggedString.charCodeAt(j);\n\t\t\tj++;\n\t\t}\n\n\t\twhile (encrypt.length % keyPair.chunkSize !== 0) {\n\t\t\tencrypt[j++] = 0;\n\t\t}\n\n\t\tfunction encryption(encryptObject) {\n\t\t\tvar charCounter = 0;\n\t\t\tvar j, block;\n\t\t\tvar encrypted = \"\";\n\t\t\tfunction encryptChar() {\n\t\t\t\tblock = new BigInt();\n\t\t\t\tj = 0;\n\t\t\t\tfor (var k = charCounter; k < charCounter+keyPair.chunkSize; ++j) {\n\t\t\t\t\tblock.digits[j] = encryptObject[k++];\n\t\t\t\t\tblock.digits[j] += encryptObject[k++] << 8;\n\t\t\t\t}\n\t\t\t\tvar crypt = keyPair.barrett.powMod(block, keyPair.e);\n\t\t\t\tvar text = keyPair.radix == 16 ? biToHex(crypt) : biToString(crypt, keyPair.radix);\n\t\t\t\tencrypted += text + \" \";\n\t\t\t\tcharCounter += keyPair.chunkSize;\n\t\t\t\tif (charCounter < encryptObject.length) {\n\t\t\t\t\tsetTimeout(encryptChar, 1)\n\t\t\t\t} else {\n\t\t\t\t\tvar encryptedString = encrypted.substring(0, encrypted.length - 1);\n\t\t\t\t\tif($.isFunction(callback)) {\n\t\t\t\t\t\tcallback(encryptedString);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn encryptedString;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(encryptChar, 1);\n\t\t}\n\n\t\tencryption(encrypt);\n\t};\n\n\t$.jCryption.defaultOptions = {\n\t\tsubmitElement:false,\n\t\tsubmitEvent:\"click\",\n\t\tgetKeysURL:\"main.php?generateKeypair=true\",\n\t\tbeforeEncryption:function(){return true},\n\t\tpostVariable:\"jCryption\",\n\t\tformFieldSelector:\":input\"\n\t};\n\n\t$.fn.jCryption = function(options) {\n\t\treturn this.each(function(){\n\t\t\t(new $.jCryption(this, options));\n\t\t});\n\t};\n\n})(jQuery);\n\n/*\n* BigInt, a suite of routines for performing multiple-precision arithmetic in\n* JavaScript.\n* BarrettMu, a class for performing Barrett modular reduction computations in\n* JavaScript.\n*\n*\n* Copyright 1998-2005 David Shapiro.\n* dave@ohdave.com\n*\n* changed and improved by Daniel Griesser\n* http://www.jcryption.org/\n* Daniel Griesser <daniel.griesser@jcryption.org>\n*/\nvar biRadixBase = 2;\nvar biRadixBits = 16;\nvar bitsPerDigit = biRadixBits;\nvar biRadix = 1 << 16;\nvar biHalfRadix = biRadix >>> 1;\nvar biRadixSquared = biRadix * biRadix;\nvar maxDigitVal = biRadix - 1;\nvar maxInteger = 9999999999999998;\nvar maxDigits;\nvar ZERO_ARRAY;\nvar bigZero, bigOne;\nvar dpl10 = 15;\nvar highBitMasks = new Array(0x0000, 0x8000, 0xC000, 0xE000, 0xF000, 0xF800,\n0xFC00, 0xFE00, 0xFF00, 0xFF80, 0xFFC0, 0xFFE0,\n0xFFF0, 0xFFF8, 0xFFFC, 0xFFFE, 0xFFFF);\n\nvar hexatrigesimalToChar = new Array(\n'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n'u', 'v', 'w', 'x', 'y', 'z'\n);\n\nvar hexToChar = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n'a', 'b', 'c', 'd', 'e', 'f');\n\nvar lowBitMasks = new Array(0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF);\n\nfunction setMaxDigits(value) {\n\tmaxDigits = value;\n\tZERO_ARRAY = new Array(maxDigits);\n\tfor (var iza = 0; iza < ZERO_ARRAY.length; iza++) ZERO_ARRAY[iza] = 0;\n\tbigZero = new BigInt();\n\tbigOne = new BigInt();\n\tbigOne.digits[0] = 1;\n}\n\nfunction BigInt(flag) {\n\tif (typeof flag == \"boolean\" && flag == true) {\n\t\tthis.digits = null;\n\t}\n\telse {\n\t\tthis.digits = ZERO_ARRAY.slice(0);\n\t}\n\tthis.isNeg = false;\n}\n\nfunction biFromDecimal(s) {\n\tvar isNeg = s.charAt(0) == '-';\n\tvar i = isNeg ? 1 : 0;\n\tvar result;\n\twhile (i < s.length && s.charAt(i) == '0') ++i;\n\tif (i == s.length) {\n\t\tresult = new BigInt();\n\t}\n\telse {\n\t\tvar digitCount = s.length - i;\n\t\tvar fgl = digitCount % dpl10;\n\t\tif (fgl == 0) fgl = dpl10;\n\t\tresult = biFromNumber(Number(s.substr(i, fgl)));\n\t\ti += fgl;\n\t\twhile (i < s.length) {\n\t\t\tresult = biAdd(biMultiply(result, biFromNumber(1000000000000000)),\n\t\t\tbiFromNumber(Number(s.substr(i, dpl10))));\n\t\t\ti += dpl10;\n\t\t}\n\t\tresult.isNeg = isNeg;\n\t}\n\treturn result;\n}\n\nfunction biCopy(bi) {\n\tvar result = new BigInt(true);\n\tresult.digits = bi.digits.slice(0);\n\tresult.isNeg = bi.isNeg;\n\treturn result;\n}\n\nfunction biFromNumber(i) {\n\tvar result = new BigInt();\n\tresult.isNeg = i < 0;\n\ti = Math.abs(i);\n\tvar j = 0;\n\twhile (i > 0) {\n\t\tresult.digits[j++] = i & maxDigitVal;\n\t\ti >>= biRadixBits;\n\t}\n\treturn result;\n}\n\nfunction reverseStr(s) {\n\tvar result = \"\";\n\tfor (var i = s.length - 1; i > -1; --i) {\n\t\tresult += s.charAt(i);\n\t}\n\treturn result;\n}\n\nfunction biToString(x, radix) {\n\tvar b = new BigInt();\n\tb.digits[0] = radix;\n\tvar qr = biDivideModulo(x, b);\n\tvar result = hexatrigesimalToChar[qr[1].digits[0]];\n\twhile (biCompare(qr[0], bigZero) == 1) {\n\t\tqr = biDivideModulo(qr[0], b);\n\t\tdigit = qr[1].digits[0];\n\t\tresult += hexatrigesimalToChar[qr[1].digits[0]];\n\t}\n\treturn (x.isNeg ? \"-\" : \"\") + reverseStr(result);\n}\n\nfunction biToDecimal(x) {\n\tvar b = new BigInt();\n\tb.digits[0] = 10;\n\tvar qr = biDivideModulo(x, b);\n\tvar result = String(qr[1].digits[0]);\n\twhile (biCompare(qr[0], bigZero) == 1) {\n\t\tqr = biDivideModulo(qr[0], b);\n\t\tresult += String(qr[1].digits[0]);\n\t}\n\treturn (x.isNeg ? \"-\" : \"\") + reverseStr(result);\n}\n\nfunction digitToHex(n) {\n\tvar mask = 0xf;\n\tvar result = \"\";\n\tfor (i = 0; i < 4; ++i) {\n\t\tresult += hexToChar[n & mask];\n\t\tn >>>= 4;\n\t}\n\treturn reverseStr(result);\n}\n\nfunction biToHex(x) {\n\tvar result = \"\";\n\tvar n = biHighIndex(x);\n\tfor (var i = biHighIndex(x); i > -1; --i) {\n\t\tresult += digitToHex(x.digits[i]);\n\t}\n\treturn result;\n}\n\nfunction charToHex(c) {\n\tvar ZERO = 48;\n\tvar NINE = ZERO + 9;\n\tvar littleA = 97;\n\tvar littleZ = littleA + 25;\n\tvar bigA = 65;\n\tvar bigZ = 65 + 25;\n\tvar result;\n\n\tif (c >= ZERO && c <= NINE) {\n\t\tresult = c - ZERO;\n\t} else if (c >= bigA && c <= bigZ) {\n\t\tresult = 10 + c - bigA;\n\t} else if (c >= littleA && c <= littleZ) {\n\t\tresult = 10 + c - littleA;\n\t} else {\n\t\tresult = 0;\n\t}\n\treturn result;\n}\n\nfunction hexToDigit(s) {\n\tvar result = 0;\n\tvar sl = Math.min(s.length, 4);\n\tfor (var i = 0; i < sl; ++i) {\n\t\tresult <<= 4;\n\t\tresult |= charToHex(s.charCodeAt(i))\n\t}\n\treturn result;\n}\n\nfunction biFromHex(s) {\n\tvar result = new BigInt();\n\tvar sl = s.length;\n\tfor (var i = sl, j = 0; i > 0; i -= 4, ++j) {\n\t\tresult.digits[j] = hexToDigit(s.substr(Math.max(i - 4, 0), Math.min(i, 4)));\n\t}\n\treturn result;\n}\n\nfunction biFromString(s, radix) {\n\tvar isNeg = s.charAt(0) == '-';\n\tvar istop = isNeg ? 1 : 0;\n\tvar result = new BigInt();\n\tvar place = new BigInt();\n\tplace.digits[0] = 1; // radix^0\n\tfor (var i = s.length - 1; i >= istop; i--) {\n\t\tvar c = s.charCodeAt(i);\n\t\tvar digit = charToHex(c);\n\t\tvar biDigit = biMultiplyDigit(place, digit);\n\t\tresult = biAdd(result, biDigit);\n\t\tplace = biMultiplyDigit(place, radix);\n\t}\n\tresult.isNeg = isNeg;\n\treturn result;\n}\n\nfunction biDump(b) {\n\treturn (b.isNeg ? \"-\" : \"\") + b.digits.join(\" \");\n}\n\nfunction biAdd(x, y) {\n\tvar result;\n\n\tif (x.isNeg != y.isNeg) {\n\t\ty.isNeg = !y.isNeg;\n\t\tresult = biSubtract(x, y);\n\t\ty.isNeg = !y.isNeg;\n\t}\n\telse {\n\t\tresult = new BigInt();\n\t\tvar c = 0;\n\t\tvar n;\n\t\tfor (var i = 0; i < x.digits.length; ++i) {\n\t\t\tn = x.digits[i] + y.digits[i] + c;\n\t\t\tresult.digits[i] = n & 0xffff;\n\t\t\tc = Number(n >= biRadix);\n\t\t}\n\t\tresult.isNeg = x.isNeg;\n\t}\n\treturn result;\n}\n\nfunction biSubtract(x, y) {\n\tvar result;\n\tif (x.isNeg != y.isNeg) {\n\t\ty.isNeg = !y.isNeg;\n\t\tresult = biAdd(x, y);\n\t\ty.isNeg = !y.isNeg;\n\t} else {\n\t\tresult = new BigInt();\n\t\tvar n, c;\n\t\tc = 0;\n\t\tfor (var i = 0; i < x.digits.length; ++i) {\n\t\t\tn = x.digits[i] - y.digits[i] + c;\n\t\t\tresult.digits[i] = n & 0xffff;\n\t\t\tif (result.digits[i] < 0) result.digits[i] += biRadix;\n\t\t\tc = 0 - Number(n < 0);\n\t\t}\n\t\tif (c == -1) {\n\t\t\tc = 0;\n\t\t\tfor (var i = 0; i < x.digits.length; ++i) {\n\t\t\t\tn = 0 - result.digits[i] + c;\n\t\t\t\tresult.digits[i] = n & 0xffff;\n\t\t\t\tif (result.digits[i] < 0) result.digits[i] += biRadix;\n\t\t\t\tc = 0 - Number(n < 0);\n\t\t\t}\n\t\t\tresult.isNeg = !x.isNeg;\n\t\t} else {\n\t\t\tresult.isNeg = x.isNeg;\n\t\t}\n\t}\n\treturn result;\n}\n\nfunction biHighIndex(x) {\n\tvar result = x.digits.length - 1;\n\twhile (result > 0 && x.digits[result] == 0) --result;\n\treturn result;\n}\n\nfunction biNumBits(x) {\n\tvar n = biHighIndex(x);\n\tvar d = x.digits[n];\n\tvar m = (n + 1) * bitsPerDigit;\n\tvar result;\n\tfor (result = m; result > m - bitsPerDigit; --result) {\n\t\tif ((d & 0x8000) != 0) break;\n\t\td <<= 1;\n\t}\n\treturn result;\n}\n\nfunction biMultiply(x, y) {\n\tvar result = new BigInt();\n\tvar c;\n\tvar n = biHighIndex(x);\n\tvar t = biHighIndex(y);\n\tvar u, uv, k;\n\n\tfor (var i = 0; i <= t; ++i) {\n\t\tc = 0;\n\t\tk = i;\n\t\tfor (j = 0; j <= n; ++j, ++k) {\n\t\t\tuv = result.digits[k] + x.digits[j] * y.digits[i] + c;\n\t\t\tresult.digits[k] = uv & maxDigitVal;\n\t\t\tc = uv >>> biRadixBits;\n\t\t}\n\t\tresult.digits[i + n + 1] = c;\n\t}\n\tresult.isNeg = x.isNeg != y.isNeg;\n\treturn result;\n}\n\nfunction biMultiplyDigit(x, y) {\n\tvar n, c, uv;\n\tvar result = new BigInt();\n\tn = biHighIndex(x);\n\tc = 0;\n\tfor (var j = 0; j <= n; ++j) {\n\t\tuv = result.digits[j] + x.digits[j] * y + c;\n\t\tresult.digits[j] = uv & maxDigitVal;\n\t\tc = uv >>> biRadixBits;\n\t}\n\tresult.digits[1 + n] = c;\n\treturn result;\n}\n\nfunction arrayCopy(src, srcStart, dest, destStart, n) {\n\tvar m = Math.min(srcStart + n, src.length);\n\tfor (var i = srcStart, j = destStart; i < m; ++i, ++j) {\n\t\tdest[j] = src[i];\n\t}\n}\n\n\n\nfunction biShiftLeft(x, n) {\n\tvar digitCount = Math.floor(n / bitsPerDigit);\n\tvar result = new BigInt();\n\tarrayCopy(x.digits, 0, result.digits, digitCount,result.digits.length - digitCount);\n\tvar bits = n % bitsPerDigit;\n\tvar rightBits = bitsPerDigit - bits;\n\tfor (var i = result.digits.length - 1, i1 = i - 1; i > 0; --i, --i1) {\n\t\tresult.digits[i] = ((result.digits[i] << bits) & maxDigitVal) |\n\t\t((result.digits[i1] & highBitMasks[bits]) >>>\n\t\t(rightBits));\n\t}\n\tresult.digits[0] = ((result.digits[i] << bits) & maxDigitVal);\n\tresult.isNeg = x.isNeg;\n\treturn result;\n}\n\nfunction biShiftRight(x, n) {\n\tvar digitCount = Math.floor(n / bitsPerDigit);\n\tvar result = new BigInt();\n\tarrayCopy(x.digits, digitCount, result.digits, 0,x.digits.length - digitCount);\n\tvar bits = n % bitsPerDigit;\n\tvar leftBits = bitsPerDigit - bits;\n\tfor (var i = 0, i1 = i + 1; i < result.digits.length - 1; ++i, ++i1) {\n\t\tresult.digits[i] = (result.digits[i] >>> bits) |\n\t\t((result.digits[i1] & lowBitMasks[bits]) << leftBits);\n\t}\n\tresult.digits[result.digits.length - 1] >>>= bits;\n\tresult.isNeg = x.isNeg;\n\treturn result;\n}\n\nfunction biMultiplyByRadixPower(x, n) {\n\tvar result = new BigInt();\n\tarrayCopy(x.digits, 0, result.digits, n, result.digits.length - n);\n\treturn result;\n}\n\nfunction biDivideByRadixPower(x, n)\n{\n\tvar result = new BigInt();\n\tarrayCopy(x.digits, n, result.digits, 0, result.digits.length - n);\n\treturn result;\n}\n\nfunction biModuloByRadixPower(x, n)\n{\n\tvar result = new BigInt();\n\tarrayCopy(x.digits, 0, result.digits, 0, n);\n\treturn result;\n}\n\nfunction biCompare(x, y) {\n\tif (x.isNeg != y.isNeg) {\n\t\treturn 1 - 2 * Number(x.isNeg);\n\t}\n\tfor (var i = x.digits.length - 1; i >= 0; --i) {\n\t\tif (x.digits[i] != y.digits[i]) {\n\t\t\tif (x.isNeg) {\n\t\t\t\treturn 1 - 2 * Number(x.digits[i] > y.digits[i]);\n\t\t\t} else {\n\t\t\t\treturn 1 - 2 * Number(x.digits[i] < y.digits[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nfunction biDivideModulo(x, y) {\n\tvar nb = biNumBits(x);\n\tvar tb = biNumBits(y);\n\tvar origYIsNeg = y.isNeg;\n\tvar q, r;\n\tif (nb < tb) {\n\t\tif (x.isNeg) {\n\t\t\tq = biCopy(bigOne);\n\t\t\tq.isNeg = !y.isNeg;\n\t\t\tx.isNeg = false;\n\t\t\ty.isNeg = false;\n\t\t\tr = biSubtract(y, x);\n\t\t\tx.isNeg = true;\n\t\t\ty.isNeg = origYIsNeg;\n\t\t} else {\n\t\t\tq = new BigInt();\n\t\t\tr = biCopy(x);\n\t\t}\n\t\treturn new Array(q, r);\n\t}\n\n\tq = new BigInt();\n\tr = x;\n\n\tvar t = Math.ceil(tb / bitsPerDigit) - 1;\n\tvar lambda = 0;\n\twhile (y.digits[t] < biHalfRadix) {\n\t\ty = biShiftLeft(y, 1);\n\t\t++lambda;\n\t\t++tb;\n\t\tt = Math.ceil(tb / bitsPerDigit) - 1;\n\t}\n\n\tr = biShiftLeft(r, lambda);\n\tnb += lambda;\n\tvar n = Math.ceil(nb / bitsPerDigit) - 1;\n\n\tvar b = biMultiplyByRadixPower(y, n - t);\n\twhile (biCompare(r, b) != -1) {\n\t\t++q.digits[n - t];\n\t\tr = biSubtract(r, b);\n\t}\n\tfor (var i = n; i > t; --i) {\n\t\tvar ri = (i >= r.digits.length) ? 0 : r.digits[i];\n\t\tvar ri1 = (i - 1 >= r.digits.length) ? 0 : r.digits[i - 1];\n\t\tvar ri2 = (i - 2 >= r.digits.length) ? 0 : r.digits[i - 2];\n\t\tvar yt = (t >= y.digits.length) ? 0 : y.digits[t];\n\t\tvar yt1 = (t - 1 >= y.digits.length) ? 0 : y.digits[t - 1];\n\t\tif (ri == yt) {\n\t\t\tq.digits[i - t - 1] = maxDigitVal;\n\t\t} else {\n\t\t\tq.digits[i - t - 1] = Math.floor((ri * biRadix + ri1) / yt);\n\t\t}\n\n\t\tvar c1 = q.digits[i - t - 1] * ((yt * biRadix) + yt1);\n\t\tvar c2 = (ri * biRadixSquared) + ((ri1 * biRadix) + ri2);\n\t\twhile (c1 > c2) {\n\t\t\t--q.digits[i - t - 1];\n\t\t\tc1 = q.digits[i - t - 1] * ((yt * biRadix) | yt1);\n\t\t\tc2 = (ri * biRadix * biRadix) + ((ri1 * biRadix) + ri2);\n\t\t}\n\n\t\tb = biMultiplyByRadixPower(y, i - t - 1);\n\t\tr = biSubtract(r, biMultiplyDigit(b, q.digits[i - t - 1]));\n\t\tif (r.isNeg) {\n\t\t\tr = biAdd(r, b);\n\t\t\t--q.digits[i - t - 1];\n\t\t}\n\t}\n\tr = biShiftRight(r, lambda);\n\n\tq.isNeg = x.isNeg != origYIsNeg;\n\tif (x.isNeg) {\n\t\tif (origYIsNeg) {\n\t\t\tq = biAdd(q, bigOne);\n\t\t} else {\n\t\t\tq = biSubtract(q, bigOne);\n\t\t}\n\t\ty = biShiftRight(y, lambda);\n\t\tr = biSubtract(y, r);\n\t}\n\n\tif (r.digits[0] == 0 && biHighIndex(r) == 0) r.isNeg = false;\n\n\treturn new Array(q, r);\n}\n\nfunction biDivide(x, y) {\n\treturn biDivideModulo(x, y)[0];\n}\n\nfunction biModulo(x, y) {\n\treturn biDivideModulo(x, y)[1];\n}\n\nfunction biMultiplyMod(x, y, m) {\n\treturn biModulo(biMultiply(x, y), m);\n}\n\nfunction biPow(x, y) {\n\tvar result = bigOne;\n\tvar a = x;\n\twhile (true) {\n\t\tif ((y & 1) != 0) result = biMultiply(result, a);\n\t\ty >>= 1;\n\t\tif (y == 0) break;\n\t\ta = biMultiply(a, a);\n\t}\n\treturn result;\n}\n\nfunction biPowMod(x, y, m) {\n\tvar result = bigOne;\n\tvar a = x;\n\tvar k = y;\n\twhile (true) {\n\t\tif ((k.digits[0] & 1) != 0) result = biMultiplyMod(result, a, m);\n\t\tk = biShiftRight(k, 1);\n\t\tif (k.digits[0] == 0 && biHighIndex(k) == 0) break;\n\t\ta = biMultiplyMod(a, a, m);\n\t}\n\treturn result;\n}\n\nfunction BarrettMu(m) {\n\tthis.modulus = biCopy(m);\n\tthis.k = biHighIndex(this.modulus) + 1;\n\tvar b2k = new BigInt();\n\tb2k.digits[2 * this.k] = 1;\n\tthis.mu = biDivide(b2k, this.modulus);\n\tthis.bkplus1 = new BigInt();\n\tthis.bkplus1.digits[this.k + 1] = 1;\n\tthis.modulo = BarrettMu_modulo;\n\tthis.multiplyMod = BarrettMu_multiplyMod;\n\tthis.powMod = BarrettMu_powMod;\n}\n\nfunction BarrettMu_modulo(x) {\n\tvar q1 = biDivideByRadixPower(x, this.k - 1);\n\tvar q2 = biMultiply(q1, this.mu);\n\tvar q3 = biDivideByRadixPower(q2, this.k + 1);\n\tvar r1 = biModuloByRadixPower(x, this.k + 1);\n\tvar r2term = biMultiply(q3, this.modulus);\n\tvar r2 = biModuloByRadixPower(r2term, this.k + 1);\n\tvar r = biSubtract(r1, r2);\n\tif (r.isNeg) {\n\t\tr = biAdd(r, this.bkplus1);\n\t}\n\tvar rgtem = biCompare(r, this.modulus) >= 0;\n\twhile (rgtem) {\n\t\tr = biSubtract(r, this.modulus);\n\t\trgtem = biCompare(r, this.modulus) >= 0;\n\t}\n\treturn r;\n}\n\nfunction BarrettMu_multiplyMod(x, y) {\n\tvar xy = biMultiply(x, y);\n\treturn this.modulo(xy);\n}\n\nfunction BarrettMu_powMod(x, y) {\n\tvar result = new BigInt();\n\tresult.digits[0] = 1;\n\twhile (true) {\n\t\tif ((y.digits[0] & 1) != 0) result = this.multiplyMod(result, x);\n\t\ty = biShiftRight(y, 1);\n\t\tif (y.digits[0] == 0 && biHighIndex(y) == 0) break;\n\t\tx = this.multiplyMod(x, x);\n\t}\n\treturn result;\n}\n"],"sourceRoot":""}