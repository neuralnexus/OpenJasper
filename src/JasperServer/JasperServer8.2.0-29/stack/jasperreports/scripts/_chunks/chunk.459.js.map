{"version":3,"sources":["webpack://jrs-ui/../bi-report/src/bi/report/jive/view/BaseJiveComponentView.js","webpack://jrs-ui/../bi-report/src/bi/report/loader/jsonpLoader.js","webpack://jrs-ui/../bi-report/src/bi/report/jive/view/GooglemapComponentView.js","webpack://jrs-ui/../bi-report/src/bi/report/loader/scriptLoader.js"],"names":["localLogger","logger","Backbone","initialize","options","this","stateModel","report","debug","arguments","getReportId","id","setDataReportId","$el","attr","getReportContainer","$","scale","scaleFactor","model","set","render","renderDeferred","resolve","detachEvents","remove","_applyScaleTransform","$container","origin","transform","browserDetection","filter","css","uid","generateUid","log","loadGoogleMapsPromise","loadMarkerClustererPromise","loadMarkerSpideringPromise","BaseJiveComponentView","$reportEl","infowindow","_init","instData","get","useMarkerClustering","useMarkerSpidering","reqParams","requestParams","substring","googleMapsLoaded","_getGoogleMapsLoadedPromise","markerClustererLoaded","_getMarkerClustererLoadedPromise","markerSpideringLoaded","_getMarkerSpideringLoadedPromise","Promise","all","then","_showMap","latitude","longitude","zoom","mapType","markerList","pathsList","defaultMarkerIcon","legendProperties","resetMapProperties","e","error","reject","google","maps","url","jsonpCallbackParam","callbackFunctionName","window","initialUrl","URL","location","href","searchParams","append","loadScript","scriptProps","async","loadJsonp","markerClusterer","OverlappingMarkerSpiderfier","_configureImage","parentKey","parentProps","parentOptions","width","height","originX","originY","anchorX","anchorY","pp","pk","parseInt","size","Size","Point","anchor","_createInfo","length","gg","po","content","LatLng","InfoWindow","_placeMarkers","markers","map","isForExport","markerArr","j","self","i","markerProps","markerOptions","position","indexOf","hasOwnProperty","marker","Marker","clickEvent","event","addListener","autocloseinfo","close","open","push","_drawPaths","paths","k","poly","prop","props","o","l","isPoly","loc","latln","_getBooleanValue","Polygon","Polyline","_placeSeriesMarkers","markerSeries","globalUseMarkerSpidering","ln","seriesName","markerSeriesNames","_getObjectKeys","markerSeriesConfigBySeriesName","seriesConfig","markerSpidering","markerClustering","legendIcon","googleMarkers","_enableSpidering","markerSeriesConfig","oms","markersWontMove","markersWontHide","basicFormatEvents","keepSpiderfied","addMarker","_enableClustering","globalUseMarkerClustering","markerClustersBySeriesName","globalClusterMarkers","globalClusterSeries","_extendArray","MarkerClusterer","globalCluster","_drawLegend","mapCanvasId","overlappingMarkerSpiderfier","legendLabel","legendPosition","legendOrientation","legendMaxWidth","legendMaxWidthFullscreen","legendMaxHeight","legendMaxHeightFullscreen","legendUseMarkerIcons","legendElement","titleContainer","titleElement","seriesToggleButton","seriesMarkersWrapper","divWrapper","legendMarkerIcon","markerImage","showHideGoogleMarkers","action","actionMap","setMap","document","getElementById","createElement","style","display","alignItems","insertAdjacentText","insertAdjacentElement","textContent","type","backgroundColor","border","fontFamily","fontSize","verticalAlign","cursor","nameOfSeries","addEventListener","removeMarkers","addMarkers","forgetMarker","trackMarker","currentTarget","color","getIcon","src","marginBottom","marginRight","flexDirection","overflow","maxWidth","maxHeight","getDiv","firstChild","clientHeight","innerHeight","controls","ControlPosition","_drawResetMap","resetMapButton","margin","borderRadius","setCenter","lat","lng","setZoom","controlPosition","canvasId","mapOptions","center","mapTypeId","MapTypeId","container","find","Map","v","destArr","sourceArr","object","LOAD_TIMEOUT_MILLIS","Number","process","urlCache","cache","prefix","cacheKey","result","script","charset","timeout","Object","keys","forEach","p","onScriptError","onerror","onload","clearTimeout","scriptTimeout","setTimeout","Error","head","appendChild"],"mappings":"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","file":"_chunks/chunk.459.js","sourcesContent":["/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved. Confidentiality & Proprietary.\n * Licensed pursuant to commercial TIBCO End User License Agreement.\n */\n\nimport Backbone from 'backbone';\nimport $ from 'jquery';\nimport browserDetection from 'js-sdk/src/common/util/browserDetection';\n\nimport logger from \"js-sdk/src/common/logging/logger\";\n\nlet localLogger = logger.register(\"BaseJiveComponentView\");\n\nexport default Backbone.View.extend({\n    initialize: function (options) {\n        this.stateModel = options.stateModel;\n        this.report = options.report;\n        localLogger.debug('Create jive view', this);\n        Backbone.View.prototype.initialize.apply(this, arguments);\n    },\n    //protected\n    getReportId: function () {\n        return this.report && this.report.id;\n    },\n    //protected\n    setDataReportId: function ($el, id) {\n        $el.attr('data-reportId', id);\n    },\n    //protected\n    getReportContainer: function (id) {\n        return $('[data-reportId = \\'' + id + '\\']');\n    },\n    //optional\n    scale: function (scaleFactor) {\n        this.model.set('scaleFactor', scaleFactor);\n    },\n    // should be overridden; each implementation should return a deferred object\n    render: function ($el) {\n        var renderDeferred = new $.Deferred();\n        renderDeferred.resolve();\n        return renderDeferred;\n    },\n    // should be overridden, optional\n    detachEvents: function () {\n    },\n    remove: function () {\n        this.detachEvents();\n        Backbone.View.prototype.remove.apply(this, arguments);\n    },\n    _applyScaleTransform: function ($container, scaleFactor) {\n        var scale = 'scale(' + scaleFactor + ')', origin = '0 0', transform = {\n            '-webkit-transform': scale,\n            '-webkit-transform-origin': origin,\n            '-moz-transform': scale,\n            '-moz-transform-origin': origin,\n            '-ms-transform': scale,\n            '-ms-transform-origin': origin,\n            '-o-transform': scale,\n            '-o-transform-origin': origin,\n            'transform': scale,\n            'transform-origin': origin\n        };    // transform: scale, analog for IE8 and lower.\n        // transform: scale, analog for IE8 and lower.\n        if (browserDetection.isIE8()) {\n            transform.filter = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + scaleFactor + ', M12=0, M21=0, M22=' + scaleFactor + ', SizingMethod=\\'auto expand\\')';\n        }\n        $container.css(transform);\n    }\n});","/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved. Confidentiality & Proprietary.\n * Licensed pursuant to commercial TIBCO End User License Agreement.\n */\n\nimport {loadScript} from './scriptLoader';\n\nlet uid = 0;\n\nconst generateUid = () => {\n    uid = uid + 1;\n    return `__async_req_${uid}__`;\n}\n\nexport const loadJsonp = (url, jsonpCallbackParam = 'callback') => {\n    return new Promise((resolve, reject) => {\n        const callbackFunctionName = generateUid();\n        window[callbackFunctionName] = resolve;\n\n        const initialUrl = new URL(url, window.location.href);\n        initialUrl.searchParams.append(jsonpCallbackParam, callbackFunctionName);\n\n        loadScript(initialUrl.href, {scriptProps: {async: true}}).catch(reject);\n    });\n};","/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved. Confidentiality & Proprietary.\n * Licensed pursuant to commercial TIBCO End User License Agreement.\n */\n\n\n/**\n * @author: Narcis Marcu\n * @version: $Id$\n */\n\n/* global google, markerClusterer, OverlappingMarkerSpiderfier */\n\nimport BaseJiveComponentView from './BaseJiveComponentView';\nimport {loadJsonp} from '../../loader/jsonpLoader';\nimport {loadScript} from \"../../loader/scriptLoader\";\nimport logger from \"js-sdk/src/common/logging/logger\";\n\nlet log = logger.register(\"GooglemapComponentView\");\n\nlet loadGoogleMapsPromise = null;\nlet loadMarkerClustererPromise = null;\nlet loadMarkerSpideringPromise = null;\n\nexport default BaseJiveComponentView.extend({\n    render: function ($el) {\n        this.$reportEl = $el;\n        this.infowindow = null;\n        this._init();\n    },\n    _init: function () {\n        const instData = this.model.get('instanceData'),\n            useMarkerClustering = instData.useMarkerClustering,\n            useMarkerSpidering = instData.useMarkerSpidering;\n\n        let reqParams = instData.requestParams || '';\n        if (reqParams[0] === '&') {\n            reqParams = reqParams.substring(1);\n        }\n\n        // try to load the Google Maps API once, otherwise conflicts will happen\n        const googleMapsLoaded = this._getGoogleMapsLoadedPromise(reqParams);\n\n        // try to load the Marker Clusterer API once\n        const markerClustererLoaded = this._getMarkerClustererLoadedPromise(useMarkerClustering);\n\n        //try to load the OverlappingMarkerSpiderfier API once\n        const markerSpideringLoaded = this._getMarkerSpideringLoadedPromise(useMarkerSpidering);\n\n        Promise.all([googleMapsLoaded, markerClustererLoaded, markerSpideringLoaded])\n            .then(() => {\n                this._showMap(\n                    this.model.get('id'),\n                    instData.latitude,\n                    instData.longitude,\n                    instData.zoom,\n                    instData.mapType,\n                    instData.markerList,\n                    instData.pathsList,\n                    useMarkerClustering,\n                    useMarkerSpidering,\n                    instData.defaultMarkerIcon,\n                    instData.legendProperties,\n                    instData.resetMapProperties\n                );\n            })\n            .catch(e => {\n                log.error(e);\n            });\n    },\n    _getGoogleMapsLoadedPromise: function(reqParams) {\n        return new Promise((resolve, reject) => {\n            if (typeof google === 'undefined' || typeof google.maps === 'undefined') {\n                if (!loadGoogleMapsPromise) {\n                    loadGoogleMapsPromise = loadJsonp(`//maps.google.com/maps/api/js?${reqParams}`, 'callback');\n                }\n                loadGoogleMapsPromise\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n    _getMarkerClustererLoadedPromise: function(useMarkerClustering) {\n        return new Promise((resolve, reject) => {\n            if (useMarkerClustering && typeof markerClusterer === 'undefined') {\n                if (!loadMarkerClustererPromise) {\n                    loadMarkerClustererPromise = loadScript(\n                        'https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js',\n                        {scriptProps: {async: true}});\n                }\n                loadMarkerClustererPromise\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n    _getMarkerSpideringLoadedPromise: function(useMarkerSpidering) {\n        return new Promise((resolve, reject) => {\n            if (useMarkerSpidering && typeof OverlappingMarkerSpiderfier === 'undefined') {\n                if (!loadMarkerSpideringPromise) {\n                    loadMarkerSpideringPromise = loadScript(\n                        'https://cdnjs.cloudflare.com/ajax/libs/OverlappingMarkerSpiderfier/1.0.3/oms.min.js',\n                        {scriptProps: {async: true}});\n                }\n                loadMarkerSpideringPromise\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n    _configureImage: function (parentKey, parentProps, parentOptions) {\n        var width, height, originX, originY, anchorX, anchorY, pp = parentProps, pk = parentKey;\n\n        width = pp[pk + '.width'] ? parseInt(pp[pk + '.width']) : null;\n        height = pp[pk + '.height'] ? parseInt(pp[pk + '.height']) : null;\n\n        originX = pp[pk + '.origin.x'] ? parseInt(pp[pk + '.origin.x']) : 0;\n        originY = pp[pk + '.origin.y'] ? parseInt(pp[pk + '.origin.y']) : 0;\n\n        anchorX = pp[pk + '.anchor.x'] ? parseInt(pp[pk + '.anchor.x']) : 0;\n        anchorY = pp[pk + '.anchor.y'] ? parseInt(pp[pk + '.anchor.y']) : 0;\n\n        parentOptions[pk] = {\n            url: pp[pk + '.url'],\n            size: width && height ? new google.maps.Size(width, height) : null,\n            origin: new google.maps.Point(originX, originY),\n            anchor: new google.maps.Point(anchorX, anchorY)\n        };\n    },\n    _createInfo: function (parentProps) {\n        var pp = parentProps;\n        if (pp['infowindow.content'] && pp['infowindow.content'].length > 0) {\n            var gg = google.maps,\n                po = {\n                    content: pp['infowindow.content']\n                };\n            if (pp['infowindow.pixelOffset']) po['pixelOffset'] = pp['infowindow.pixelOffset'];\n            if (pp['infowindow.latitude'] && pp['infowindow.longitude']) po['position'] = new gg.LatLng(pp['infowindow.latitude'], pp['infowindow.longitude']);\n            if (pp['infowindow.maxWidth']) po['maxWidth'] = pp['infowindow.maxWidth'];\n            return new gg.InfoWindow(po);\n        }\n        return null;\n    },\n    _placeMarkers: function (markers, map, isForExport, useMarkerSpidering) {\n        var markerArr = [];\n        if (markers) {\n            var self = this, j;\n            for (var i = 0; i < markers.length; i++) {\n                var markerProps = markers[i];\n                var markerLatLng = new google.maps.LatLng(markerProps['latitude'], markerProps['longitude']);\n                var markerOptions = {\n                    position: markerLatLng\n                };\n\n                // for spidering, do not link marker to map directly\n                if (!useMarkerSpidering) {\n                    markerOptions.map = map;\n                }\n\n                if (markerProps['icon.url'] && markerProps['icon.url'].length > 0) this._configureImage('icon', markerProps, markerOptions);\n                else if (markerProps['icon'] && markerProps['icon'].length > 0) markerOptions['icon'] = markerProps['icon'];\n                else if (markerProps['color'] && markerProps['color'].length > 0) {\n                    markerOptions['icon'] = 'https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%7C' + markerProps['color'];\n                }\n                if (markerProps['shadow.url'] && markerProps['shadow.url'].length > 0) this._configureImage('shadow', markerProps, markerOptions);\n                else if (markerProps['shadow'] && markerProps['shadow'].length > 0) markerOptions['shadow'] = markerProps['shadow'];\n                for (j in markerProps) {\n                    if (j.indexOf(\".\") < 0 && markerProps.hasOwnProperty(j) && !markerOptions.hasOwnProperty(j)) markerOptions[j] = markerProps[j];\n                }\n                var marker = new google.maps.Marker(markerOptions);\n\n                // when in export mode, do not add unnecessary listener\n                if (!isForExport) {\n                    marker['info'] = this._createInfo(markerProps);\n                    var clickEvent = useMarkerSpidering ? 'spider_click' : 'click';\n                    google.maps.event.addListener(marker, clickEvent, function () {\n                        if (map.autocloseinfo && self.infowindow) self.infowindow.close();\n                        if (this['info']) {\n                            self.infowindow = this['info'];\n                            this['info'].open(map, this);\n                        } else if (this['url'] && this['url'].length > 0) {\n                            window.open(this['url'], this['target']);\n                        }\n                    });\n                }\n                markerArr.push(marker);\n            }\n        }\n\n        return markerArr;\n    },\n    _drawPaths: function (paths, map, isForExport) {\n        if (paths) {\n            for (var k = 0; k < paths.length; k++) {\n                var props = paths[k], o = {}, l = [], isPoly = false;\n                var poly, prop;\n                for (prop in props) {\n                    if (prop === 'locations' && props[prop]) {\n                        var loc = props[prop];\n                        for (var j = 0; j < loc.length; j++) {\n                            var latln = loc[j];\n                            l.push(new google.maps.LatLng(latln['latitude'], latln['longitude']));\n                        }\n                    } else if (prop === 'isPolygon') {\n                        isPoly = this._getBooleanValue(props[prop]);\n                    } else if (prop === 'visible' || prop === 'editable' || prop === 'clickable' || prop === 'draggable' || prop === 'geodesic') {\n                        o[prop] = this._getBooleanValue(props[prop]);\n                    } else {\n                        o[prop] = props[prop];\n                    }\n                }\n                o['map'] = map;\n                if (isPoly) {\n                    o['paths'] = l;\n                    poly = new google.maps.Polygon(o);\n                } else {\n                    o['path'] = l;\n                    poly = new google.maps.Polyline(o);\n                }\n\n                // when in export mode, do not add unnecessary listener\n                if (!isForExport) {\n                    if (o['path.hyperlink']) {\n                        google.maps.event.addListener(poly, 'click', function () {\n                            window.open(this['path.hyperlink'], this['path.hyperlink.target'])\n                        });\n                    }\n                }\n            }\n        }\n    },\n    _placeSeriesMarkers: function(map, markerSeries, isForExport, globalUseMarkerSpidering) {\n        var markerSeriesNames = this._getObjectKeys(markerSeries),\n            markerSeriesConfigBySeriesName = {}, i, ln, seriesName;\n\n        for (i = 0, ln = markerSeriesNames.length; i < ln; i++) {\n            seriesName = markerSeriesNames[i];\n            var seriesConfig = markerSeries[seriesName];\n            var useMarkerSpidering = seriesConfig.markerSpidering != null ? seriesConfig.markerSpidering : globalUseMarkerSpidering;\n\n            var useMarkerClustering = null;\n            if (seriesConfig.markerClustering != null) {\n                if (seriesConfig.markerClustering === true || seriesConfig.markerClustering === \"true\") {\n                    useMarkerClustering = true;\n                }\n                if (seriesConfig.markerClustering === false || seriesConfig.markerClustering === \"false\") {\n                    useMarkerClustering = false;\n                }\n            }\n\n            markerSeriesConfigBySeriesName[seriesName] = {\n                useMarkerSpidering: useMarkerSpidering,\n                useMarkerClustering: useMarkerClustering,\n                legendIcon: seriesConfig.legendIcon,\n                googleMarkers: this._placeMarkers(seriesConfig.markers, map, isForExport, useMarkerSpidering)\n            };\n        }\n\n        return markerSeriesConfigBySeriesName;\n    },\n    _enableSpidering: function(map, markerSeriesConfigBySeriesName) {\n        var markerSeriesNames = this._getObjectKeys(markerSeriesConfigBySeriesName),\n            i, j, seriesName, markerSeriesConfig, oms = null;\n        for (i = 0; i < markerSeriesNames.length; i++) {\n            seriesName = markerSeriesNames[i];\n            markerSeriesConfig = markerSeriesConfigBySeriesName[seriesName];\n            if (markerSeriesConfig.useMarkerSpidering) {\n                if (oms === null) {\n                    oms = new OverlappingMarkerSpiderfier(map, {\n                        markersWontMove: true,\n                        markersWontHide: true,\n                        basicFormatEvents: true,\n                        keepSpiderfied: true\n                    });\n                }\n                for (j = 0; j < markerSeriesConfig.googleMarkers.length; j++) {\n                    oms.addMarker(markerSeriesConfig.googleMarkers[j]);\n                }\n            }\n        }\n\n        return oms;\n    },\n    _enableClustering: function(map, markerSeriesConfigBySeriesName, globalUseMarkerClustering) {\n        var markerSeriesNames = this._getObjectKeys(markerSeriesConfigBySeriesName),\n            markerClustersBySeriesName = {},\n            globalClusterMarkers = [],\n            globalClusterSeries = [],\n            i, ln, seriesName, markerSeriesConfig;\n        for (i = 0, ln = markerSeriesNames.length; i < ln; i++) {\n            seriesName = markerSeriesNames[i];\n            markerSeriesConfig = markerSeriesConfigBySeriesName[seriesName];\n\n            if (markerSeriesConfig.useMarkerClustering === null && globalUseMarkerClustering) {\n                this._extendArray(globalClusterMarkers, markerSeriesConfig.googleMarkers);\n                globalClusterSeries.push(seriesName);\n            } else if (markerSeriesConfig.useMarkerClustering) {\n                markerClustersBySeriesName[seriesName] = new markerClusterer.MarkerClusterer({\n                    map: map,\n                    markers: markerSeriesConfig.googleMarkers\n                });\n            }\n        }\n\n        if (globalClusterMarkers.length) {\n            var globalCluster = new markerClusterer.MarkerClusterer({\n                map: map,\n                markers: globalClusterMarkers\n            });\n            for (i = 0, ln = globalClusterSeries.length; i < ln; i++) {\n                seriesName = globalClusterSeries[i];\n                markerClustersBySeriesName[seriesName] = globalCluster;\n            }\n        }\n\n        return markerClustersBySeriesName;\n    },\n    _drawLegend: function(legendProperties, map, mapCanvasId, markerSeriesConfigBySeriesName,\n        markerClustersBySeriesName, overlappingMarkerSpiderfier, defaultMarkerIcon, isForExport) {\n        if (this._getBooleanValue(legendProperties[\"enabled\"])) {\n            var legendLabel = legendProperties[\"label\"] || \"Legend\",\n                legendPosition = legendProperties[\"position\"] || \"RIGHT_CENTER\",\n                legendOrientation = legendProperties[\"orientation\"] || \"vertical\",\n                legendMaxWidth = legendProperties[\"legendMaxWidth\"] || \"100px\",\n                legendMaxWidthFullscreen = legendProperties[\"legendMaxWidth.fullscreen\"] || \"150px\",\n                legendMaxHeight = legendProperties[\"legendMaxHeight\"] || \"150px\",\n                legendMaxHeightFullscreen = legendProperties[\"legendMaxHeight.fullscreen\"] || \"300px\",\n                legendUseMarkerIcons = legendProperties[\"useMarkerIcons\"] == null\n                    ? true : this._getBooleanValue(legendProperties[\"useMarkerIcons\"]);\n\n\n            var legendElement = document.getElementById(mapCanvasId + \"_legend\");\n            var titleContainer = document.createElement(\"div\");\n            titleContainer.style.display = \"flex\";\n            titleContainer.style.alignItems = \"center\";\n\n            var titleElement = document.createElement(\"h3\");\n            titleElement.insertAdjacentText(\"beforeend\", legendLabel);\n\n            titleContainer.insertAdjacentElement(\"beforeend\", titleElement);\n            legendElement.insertAdjacentElement(\"beforeend\", titleContainer);\n\n            function showHideGoogleMarkers(markerArr, action) {\n                var actionMap = action === \"show\" ? map : null;\n                for (var i = 0; i < markerArr.length; i++) {\n                    markerArr[i].setMap(actionMap);\n                }\n            }\n\n            var seriesToggleButton, i, ln, seriesName;\n            var markerSeriesNames = this._getObjectKeys(markerSeriesConfigBySeriesName);\n\n            var seriesMarkersWrapper = document.createElement(\"div\");\n            seriesMarkersWrapper.style.display = \"flex\";\n\n            for (i = 0, ln = markerSeriesNames.length; i < ln; i++) {\n                seriesName = markerSeriesNames[i];\n                seriesToggleButton = document.createElement(\"button\");\n                seriesToggleButton.textContent = seriesName;\n                seriesToggleButton.type = \"button\";\n                seriesToggleButton.style.backgroundColor = \"#fff\";\n                seriesToggleButton.style.border = \"2px solid #fff\";\n                seriesToggleButton.style.fontFamily = \"Roboto,Arial,sans-serif\";\n                seriesToggleButton.style.fontSize = \"12px\";\n                seriesToggleButton.style.verticalAlign = \"top\";\n                seriesToggleButton.style.cursor = \"pointer\";\n\n                (function (nameOfSeries) {\n                    seriesToggleButton.addEventListener(\"click\", function (event) {\n                        var i, markerSeriesConfig = markerSeriesConfigBySeriesName[nameOfSeries];\n                        if (markerSeriesConfig.action == null || markerSeriesConfig.action === \"show\") {\n                            markerSeriesConfig.action = \"hide\";\n                        } else {\n                            markerSeriesConfig.action = \"show\";\n                        }\n\n                        // show/hide google markers\n                        showHideGoogleMarkers(markerSeriesConfig.googleMarkers, markerSeriesConfig.action);\n\n                        // if there is a cluster for the series, add/remove the markers from cluster\n                        if (markerClustersBySeriesName[nameOfSeries]) {\n                            if (markerSeriesConfig.action === \"hide\") {\n                                markerClustersBySeriesName[nameOfSeries].removeMarkers(markerSeriesConfig.googleMarkers, false);\n                            } else {\n                                markerClustersBySeriesName[nameOfSeries].addMarkers(markerSeriesConfig.googleMarkers, false);\n                            }\n                        }\n\n                        // if spidering is enabled for the series, add/remove the markers from spiderfier\n                        if (overlappingMarkerSpiderfier != null && markerSeriesConfig.useMarkerSpidering) {\n                            if (markerSeriesConfig.action === \"hide\") {\n                                for (i = 0; i < markerSeriesConfig.googleMarkers.length; i++) {\n                                    overlappingMarkerSpiderfier.forgetMarker(markerSeriesConfig.googleMarkers[i]);\n                                }\n                            } else {\n                                for (i = 0; i < markerSeriesConfig.googleMarkers.length; i++) {\n                                    overlappingMarkerSpiderfier.trackMarker(markerSeriesConfig.googleMarkers[i]);\n                                }\n                            }\n                        }\n\n                        if (markerSeriesConfig.action === \"hide\") {\n                            event.currentTarget.style.color = \"#d8d8d8\";\n                        } else {\n                            event.currentTarget.style.color = \"#000\";\n                        }\n                    });\n                }(seriesName));\n\n                var divWrapper = document.createElement(\"div\");\n                divWrapper.style.display = \"flex\";\n                divWrapper.style.alignItems = \"flex-start\";\n\n                if (legendUseMarkerIcons) {\n                    var legendMarkerIcon = markerSeriesConfigBySeriesName[seriesName].legendIcon;\n                    if (!legendMarkerIcon) {\n                        legendMarkerIcon = markerSeriesConfigBySeriesName[seriesName].googleMarkers[0].getIcon();\n                    }\n                    if (!legendMarkerIcon) {\n                        legendMarkerIcon = defaultMarkerIcon;\n                    }\n\n                    if (legendMarkerIcon) {\n                        var markerImage = document.createElement(\"img\");\n                        markerImage.src = legendMarkerIcon;\n                        markerImage.style.width = \"16px\";\n                        markerImage.style.marginBottom = \"5px\";\n\n                        divWrapper.insertAdjacentElement(\"beforeend\", markerImage);\n                    }\n                }\n\n                divWrapper.insertAdjacentElement(\"beforeend\", seriesToggleButton);\n\n                seriesMarkersWrapper.insertAdjacentElement(\"beforeend\", divWrapper);\n            }\n\n            if (legendOrientation === \"horizontal\") {\n                titleContainer.style.marginRight = \"20px\";\n                legendElement.style.flexDirection = \"row\";\n                seriesMarkersWrapper.style.flexDirection = \"row\";\n                seriesMarkersWrapper.style.alignItems = \"center\";\n            } else {\n                titleContainer.style.marginRight = \"0\";\n                legendElement.style.flexDirection = \"column\";\n                seriesMarkersWrapper.style.flexDirection = \"column\";\n                seriesMarkersWrapper.style.alignItems = \"flex-start\";\n            }\n\n            if (legendPosition.indexOf(\"BOTTOM\") !== -1) {\n                legendElement.style.marginBottom = \"24px\";\n            } else {\n                legendElement.style.marginBottom = \"10px\";\n            }\n\n            seriesMarkersWrapper.style.overflow = \"auto\";\n            legendElement.insertAdjacentElement(\"beforeend\", seriesMarkersWrapper);\n\n            // apply max width/height to legend\n            legendElement.style.maxWidth = legendMaxWidth;\n            legendElement.style.maxHeight = legendMaxHeight;\n\n            !isForExport && google.maps.event.addListener(map, \"bounds_changed\", function () {\n                // detect fullscreen\n                if (map.getDiv().firstChild.clientHeight === window.innerHeight) { // fullscreen\n                    legendElement.style.maxWidth = legendMaxWidthFullscreen;\n                    legendElement.style.maxHeight = legendMaxHeightFullscreen;\n                } else { // not fullscreen\n                    legendElement.style.maxWidth = legendMaxWidth;\n                    legendElement.style.maxHeight = legendMaxHeight;\n                }\n            });\n\n            map.controls[google.maps.ControlPosition[legendPosition]].push(legendElement);\n        }\n    },\n    _drawResetMap: function(resetMapProperties, map, latitude, longitude, zoom) {\n        if (this._getBooleanValue(resetMapProperties[\"enabled\"])) {\n            var resetMapButton = document.createElement(\"button\");\n            resetMapButton.textContent = resetMapProperties[\"label\"] || \"Reset map\";\n            resetMapButton.type = \"button\";\n            resetMapButton.style.backgroundColor = \"#fff\";\n            resetMapButton.style.border = \"2px solid #fff\";\n            resetMapButton.style.fontFamily = \"Roboto,Arial,sans-serif\";\n            resetMapButton.style.fontSize = \"12px\";\n            resetMapButton.style.margin = \"10px\";\n            resetMapButton.style.borderRadius = \"2px\";\n            resetMapButton.style.cursor = \"pointer\";\n\n            resetMapButton.addEventListener(\"click\", function () {\n                map.setCenter({lat: latitude, lng: longitude});\n                map.setZoom(zoom);\n            });\n\n            var controlPosition = resetMapProperties[\"position\"] || \"RIGHT_TOP\";\n            map.controls[google.maps.ControlPosition[controlPosition]].push(resetMapButton);\n        }\n    },\n    _showMap: function (canvasId, latitude, longitude, zoom, mapType, markerList, pathsList,\n        useMarkerClustering, useMarkerSpidering, defaultMarkerIcon, legendProperties, resetMapProperties) {\n        var mapOptions = {\n                zoom: zoom,\n                center: new google.maps.LatLng(latitude, longitude),\n                mapTypeId: google.maps.MapTypeId[mapType],\n                autocloseinfo: true\n            },\n            container = this.$reportEl.find(\"#\" + canvasId),\n            map = new google.maps.Map(container[0], mapOptions);\n\n        container.attr(\"js-stdnav\", \"false\");\n\n        var markerSeriesConfigBySeriesName = this._placeSeriesMarkers(map, markerList, false, useMarkerSpidering);\n\n        // enable marker spidering only for the configured series\n        var overlappingMarkerSpiderfier = this._enableSpidering(map, markerSeriesConfigBySeriesName);\n\n        // enable marker clustering globally and/or per series\n        var markerClustersBySeriesName = this._enableClustering(map, markerSeriesConfigBySeriesName, useMarkerClustering);\n\n        // draw marker legend\n        this._drawLegend(legendProperties, map, canvasId, markerSeriesConfigBySeriesName, markerClustersBySeriesName,\n            overlappingMarkerSpiderfier, defaultMarkerIcon, false);\n\n        // draw resetMap control\n        this._drawResetMap(resetMapProperties, map, latitude, longitude, zoom);\n\n        // draw paths\n        this._drawPaths(pathsList, map, false);\n\n    },\n    _getBooleanValue: function (v) {\n        return v === true || v === 'true';\n    },\n    _extendArray: function(destArr, sourceArr) {\n        for (var i of sourceArr) {\n            destArr.push(i);\n        }\n    },\n    _getObjectKeys: function(object) {\n        var props = [];\n        for (var prop in object) {\n            if (object.hasOwnProperty(prop)) {\n                props.push(prop);\n            }\n        }\n        return props;\n    }\n});","/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved.\n * http://www.jaspersoft.com.\n *\n * Unless you have purchased a commercial license agreement from Jaspersoft,\n * the following license terms apply:\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/*global document, process */\n\nconst LOAD_TIMEOUT_MILLIS = Number(process.env.SCRIPT_LOAD_TIMEOUT_SEC || 60) * 1000;\n\nconst urlCache = {};\n\nexport const loadScript = (url, {cache = true, prefix = '', scriptProps = {}} = {}) => {\n    const cacheKey = prefix + url;\n\n    // return promise for the cache\n    if (cache && urlCache[cacheKey]) {\n        return urlCache[cacheKey];\n    }\n\n    const result = new Promise(((resolve, reject) => {\n        const script = document.createElement('script');\n\n        const props = {\n            charset: 'utf-8',\n            timeout: LOAD_TIMEOUT_MILLIS,\n            ...scriptProps\n        }\n\n        Object.keys(props).forEach(p => script[p] = props[p]);\n\n        script.src = url;\n\n        const onScriptComplete = function () {\n            script.onerror = null;\n            script.onload = null;\n            clearTimeout(scriptTimeout);\n            resolve();\n        };\n\n        const onScriptError = function (...args) {\n            script.onerror = null;\n            script.onload = null;\n            clearTimeout(scriptTimeout);\n            reject(...args);\n        };\n\n        const scriptTimeout = setTimeout(function () {\n            onScriptError(new Error(`Load timeout for the script ${url}`));\n        }, props.timeout);\n\n        script.onerror = onScriptError\n        script.onload = onScriptComplete;\n\n        document.head.appendChild(script);\n    }))\n\n    urlCache[cacheKey] = result;\n\n    return result;\n}"],"sourceRoot":""}