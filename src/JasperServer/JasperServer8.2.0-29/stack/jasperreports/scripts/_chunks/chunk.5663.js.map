{"version":3,"sources":["webpack://jrs-ui/./runtime_dependencies/backbone.babysitter/lib/backbone.babysitter.js","webpack://jrs-ui/./runtime_dependencies/backbone.marionette/lib/core/backbone.marionette.js","webpack://jrs-ui/./runtime_dependencies/backbone.wreqr/lib/backbone.wreqr.js"],"names":["define","Backbone","_","previousChildViewContainer","ChildViewContainer","Container","views","this","_views","_indexByModel","_indexByCustom","_updateLength","each","add","extend","prototype","view","customIndex","viewCid","cid","model","findByModel","findByModelCid","modelCid","findByCid","findByCustom","index","findByIndex","values","remove","any","key","call","method","apply","tail","arguments","args","isFunction","length","size","methods","concat","toArray","VERSION","noConflict","factory","root","Marionette","Mn","previousMarionette","previousMn","Deferred","$","Model","isNodeAttached","el","contains","document","documentElement","getOption","target","optionName","options","undefined","proxyGetOption","_getValue","value","context","params","normalizeMethods","hash","reduce","normalizedHash","name","normalizeUIString","uiString","ui","replace","r","slice","normalizeUIKeys","memo","val","normalizeUIValues","isString","actAsCollection","object","listProperty","result","deprecate","message","test","isObject","prev","next","url","_cache","_warn","console","warn","log","_triggerMethod","splitter","getEventName","match","prefix","eventName","toUpperCase","event","noEventArg","rest","trigger","triggerMethod","triggerMethodOn","MonitorDOMRefresh","handleShow","_isShown","triggerDOMRefresh","handleRender","_isRendered","on","show","render","bindFromStrings","entity","evt","methodNames","split","methodName","Error","listenTo","bindToFunction","unbindFromStrings","stopListening","unbindToFunction","iterateEvents","bindings","functionCallback","stringCallback","bindEntityEvents","unbindEntityEvents","proxyBindEntityEvents","proxyUnbindEntityEvents","errorProps","urlRoot","constructor","error","pick","captureStackTrace","toString","Callbacks","_deferred","_callbacks","callback","contextOverride","promise","push","cb","ctx","then","run","resolve","reset","callbacks","Controller","initialize","Events","destroy","off","Object","Region","$el","getEl","_ensureElement","_ensureViewIsIntact","showOptions","isDifferentView","currentView","preventDestroy","forceShow","isChangingView","_shouldDestroyView","_shouldShowView","_parent","empty","once","attachedRegion","displayedViews","triggerBeforeAttach","triggerAttach","_displayedViews","_triggerAttach","attachHtml","union","selector","isDestroyed","parentEl","contents","detach","appendChild","_destroyView","attachView","hasView","buildRegion","regionConfig","DefaultRegionClass","_buildRegionFromSelector","regionClass","_buildRegionFromObject","_buildRegionFromRegionClass","RegionClass","omit","RegionManager","_regions","addRegions","regionDefinitions","defaults","regions","definition","addRegion","region","_store","get","getRegions","clone","removeRegion","_remove","removeRegions","emptyRegions","invoke","_setLength","TemplateCache","templateId","templateCaches","cachedTemplate","load","clear","i","compiledTemplate","template","loadTemplate","compileTemplate","html","rawTemplate","Renderer","data","View","bindAll","_behaviors","Behaviors","onShowCalled","getTemplate","serializeModel","toJSON","mixinTemplateHelpers","templateHelpers","uiBindings","configureTriggers","triggers","events","_buildViewTrigger","delegateEvents","_delegateDOMEvents","collection","behavior","eventsArg","isUndefined","combinedEvents","behaviorEvents","behaviorTriggers","undelegateEvents","unbindUIElements","bindUIElements","_bindUIElements","_uiBindings","_unbindUIElements","triggerDef","hasOptions","preventDefault","stopPropagation","e","setElement","ret","behaviors","_getImmediateChildren","_getNestedViews","children","ItemView","serializeData","items","serializeCollection","_renderTemplate","attachElContent","CollectionView","childViewEventPrefix","initOptions","sort","_initialEvents","_initChildViewStorage","initRenderBuffer","elBuffer","createDocumentFragment","_bufferedChildren","startBuffering","isBuffering","endBuffering","_triggerBeforeShowBufferedChildren","attachBuffer","_triggerShowBufferedChildren","partial","_triggerMethodOnChild","childView","_onCollectionAdd","_onCollectionRemove","_sortViews","child","destroyEmptyView","ChildView","getChildView","indexOf","addChild","removeChildView","checkEmpty","_renderChildren","resortView","find","item","_index","_emptyViewIndex","destroyChildren","isEmpty","showEmptyView","showCollection","EmptyView","getEmptyView","_showingEmptyView","addEmptyView","emptyViewOptions","buildChildView","proxyChildEvents","renderChildView","childViewOptions","_updateIndices","_addChildView","increment","laterView","ChildViewClass","collectionView","buffer","append","_insertBefore","_insertAfter","before","childViews","map","identity","rootEvent","childEvents","splice","CompositeView","isRendered","resetChildViewContainer","compositeView","getChildViewContainer","containerView","$childViewContainer","container","childViewContainer","charAt","substr","LayoutView","_firstRender","_initializeRegions","_reInitializeRegions","regionManager","_buildRegions","getRegion","_initRegionManager","regionOptions","getRegionManager","chain","pluck","compact","Behavior","proxyViewProperties","delegateEventSplitter","parseBehaviors","wrap","keys","BehaviorTriggersBuilder","buildBehaviorTriggers","_behaviorsEvents","viewUI","b","_events","behaviorUI","j","behaviour","eventKey","join","handler","bind","_view","_viewUI","_triggers","behaviorsLookup","getBehaviorClass","behaviorClass","nestedBehaviors","flatten","_buildTriggerHandlersForBehavior","triggersHash","_setHandlerForBehavior","triggerKey","triggerName","AppRouter","Router","appRoutes","controller","_getController","processAppRoutes","_processOnRoute","appRoute","route","_addAppRoute","routeName","routeArgs","onRoute","routePath","invert","routeNames","reverse","Application","_initCallbacks","submodules","_initChannel","execute","commands","request","reqres","addInitializer","initializer","start","_regionManager","module","moduleNames","moduleDefinition","ModuleClass","Module","getClass","unshift","create","optionRegions","channelName","channel","Wreqr","radio","vent","moduleName","app","_setupInitializersAndFinalizers","startWithParent","_initializerCallbacks","addFinalizer","_finalizerCallbacks","_isInitialized","mod","stop","addDefinition","customArgs","_runModuleDefinition","moduleDefinitions","parentModule","_getModule","_addModuleDefinition","def","moduleClass","fn","_getDefine","_getStartWithParent","_addStartWithParent","swp","startWithParentIsConfigured","Channel","CommandStorage","previousWreqr","Handlers","_wreqrHandlers","setHandlers","handlers","setHandler","config","hasHandler","getHandler","removeHandler","removeAllHandlers","_commands","getCommands","commandName","command","instances","addCommand","clearCommands","Commands","storageType","_initializeStorage","_executeCommands","storage","StorageType","RequestResponse","EventAggregator","EA","connectEvents","_connect","connectCommands","connectRequests","type","Radio","_channels","_proxyMethods","_getChannel","system","messageSystems","proxyMethod","messageSystem"],"mappings":"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","file":"_chunks/chunk.5663.js","sourcesContent":["// Backbone.BabySitter\n// -------------------\n// v0.1.11\n//\n// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://github.com/marionettejs/backbone.babysitter\n\n(function(root, factory) {\n\n  if (typeof define === 'function' && define.amd) {\n    define(['backbone', 'underscore'], function(Backbone, _) {\n      return factory(Backbone, _);\n    });\n  } else if (typeof exports !== 'undefined') {\n    var Backbone = require('backbone');\n    var _ = require('underscore');\n    module.exports = factory(Backbone, _);\n  } else {\n    factory(root.Backbone, root._);\n  }\n\n}(this, function(Backbone, _) {\n  'use strict';\n\n  var previousChildViewContainer = Backbone.ChildViewContainer;\n\n  // BabySitter.ChildViewContainer\n  // -----------------------------\n  //\n  // Provide a container to store, retrieve and\n  // shut down child views.\n  \n  Backbone.ChildViewContainer = (function (Backbone, _) {\n  \n    // Container Constructor\n    // ---------------------\n  \n    var Container = function(views){\n      this._views = {};\n      this._indexByModel = {};\n      this._indexByCustom = {};\n      this._updateLength();\n  \n      _.each(views, this.add, this);\n    };\n  \n    // Container Methods\n    // -----------------\n  \n    _.extend(Container.prototype, {\n  \n      // Add a view to this container. Stores the view\n      // by `cid` and makes it searchable by the model\n      // cid (and model itself). Optionally specify\n      // a custom key to store an retrieve the view.\n      add: function(view, customIndex){\n        var viewCid = view.cid;\n  \n        // store the view\n        this._views[viewCid] = view;\n  \n        // index it by model\n        if (view.model){\n          this._indexByModel[view.model.cid] = viewCid;\n        }\n  \n        // index by custom\n        if (customIndex){\n          this._indexByCustom[customIndex] = viewCid;\n        }\n  \n        this._updateLength();\n        return this;\n      },\n  \n      // Find a view by the model that was attached to\n      // it. Uses the model's `cid` to find it.\n      findByModel: function(model){\n        return this.findByModelCid(model.cid);\n      },\n  \n      // Find a view by the `cid` of the model that was attached to\n      // it. Uses the model's `cid` to find the view `cid` and\n      // retrieve the view using it.\n      findByModelCid: function(modelCid){\n        var viewCid = this._indexByModel[modelCid];\n        return this.findByCid(viewCid);\n      },\n  \n      // Find a view by a custom indexer.\n      findByCustom: function(index){\n        var viewCid = this._indexByCustom[index];\n        return this.findByCid(viewCid);\n      },\n  \n      // Find by index. This is not guaranteed to be a\n      // stable index.\n      findByIndex: function(index){\n        return _.values(this._views)[index];\n      },\n  \n      // retrieve a view by its `cid` directly\n      findByCid: function(cid){\n        return this._views[cid];\n      },\n  \n      // Remove a view\n      remove: function(view){\n        var viewCid = view.cid;\n  \n        // delete model index\n        if (view.model){\n          delete this._indexByModel[view.model.cid];\n        }\n  \n        // delete custom index\n        _.any(this._indexByCustom, function(cid, key) {\n          if (cid === viewCid) {\n            delete this._indexByCustom[key];\n            return true;\n          }\n        }, this);\n  \n        // remove the view from the container\n        delete this._views[viewCid];\n  \n        // update the length\n        this._updateLength();\n        return this;\n      },\n  \n      // Call a method on every view in the container,\n      // passing parameters to the call method one at a\n      // time, like `function.call`.\n      call: function(method){\n        this.apply(method, _.tail(arguments));\n      },\n  \n      // Apply a method on every view in the container,\n      // passing parameters to the call method one at a\n      // time, like `function.apply`.\n      apply: function(method, args){\n        _.each(this._views, function(view){\n          if (_.isFunction(view[method])){\n            view[method].apply(view, args || []);\n          }\n        });\n      },\n  \n      // Update the `.length` attribute on this container\n      _updateLength: function(){\n        this.length = _.size(this._views);\n      }\n    });\n  \n    // Borrowing this code from Backbone.Collection:\n    // http://backbonejs.org/docs/backbone.html#section-106\n    //\n    // Mix in methods from Underscore, for iteration, and other\n    // collection related features.\n    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n      'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n      'last', 'without', 'isEmpty', 'pluck', 'reduce'];\n  \n    _.each(methods, function(method) {\n      Container.prototype[method] = function() {\n        var views = _.values(this._views);\n        var args = [views].concat(_.toArray(arguments));\n        return _[method].apply(_, args);\n      };\n    });\n  \n    // return the public API\n    return Container;\n  })(Backbone, _);\n  \n\n  Backbone.ChildViewContainer.VERSION = '0.1.11';\n\n  Backbone.ChildViewContainer.noConflict = function () {\n    Backbone.ChildViewContainer = previousChildViewContainer;\n    return this;\n  };\n\n  return Backbone.ChildViewContainer;\n\n}));\n","// MarionetteJS (Backbone.Marionette)\n// ----------------------------------\n// v2.3.2\n//\n// Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://marionettejs.com\n\n(function(root, factory) {\n\n  if (typeof define === 'function' && define.amd) {\n    define(['backbone', 'underscore', 'backbone.wreqr', 'backbone.babysitter'], function(Backbone, _) {\n      return (root.Marionette = root.Mn = factory(root, Backbone, _));\n    });\n  } else if (typeof exports !== 'undefined') {\n    var Backbone = require('backbone');\n    var _ = require('underscore');\n    var Wreqr = require('backbone.wreqr');\n    var BabySitter = require('backbone.babysitter');\n    module.exports = factory(root, Backbone, _);\n  } else {\n    root.Marionette = root.Mn = factory(root, root.Backbone, root._);\n  }\n\n}(this, function(root, Backbone, _) {\n  'use strict';\n\n  var previousMarionette = root.Marionette;\n  var previousMn = root.Mn;\n\n  var Marionette = Backbone.Marionette = {};\n\n  Marionette.VERSION = '2.3.2';\n\n  Marionette.noConflict = function() {\n    root.Marionette = previousMarionette;\n    root.Mn = previousMn;\n    return this;\n  };\n\n  // Get the Deferred creator for later use\n  Marionette.Deferred = Backbone.$.Deferred;\n\n  /* jshint unused: false *//* global console */\n  \n  // Helpers\n  // -------\n  \n  // Marionette.extend\n  // -----------------\n  \n  // Borrow the Backbone `extend` method so we can use it as needed\n  Marionette.extend = Backbone.Model.extend;\n  \n  // Marionette.isNodeAttached\n  // -------------------------\n  \n  // Determine if `el` is a child of the document\n  Marionette.isNodeAttached = function(el) {\n    return Backbone.$.contains(document.documentElement, el);\n  };\n  \n  \n  // Marionette.getOption\n  // --------------------\n  \n  // Retrieve an object, function or other value from a target\n  // object or its `options`, with `options` taking precedence.\n  Marionette.getOption = function(target, optionName) {\n    if (!target || !optionName) { return; }\n    if (target.options && (target.options[optionName] !== undefined)) {\n      return target.options[optionName];\n    } else {\n      return target[optionName];\n    }\n  };\n  \n  // Proxy `Marionette.getOption`\n  Marionette.proxyGetOption = function(optionName) {\n    return Marionette.getOption(this, optionName);\n  };\n  \n  // Similar to `_.result`, this is a simple helper\n  // If a function is provided we call it with context\n  // otherwise just return the value. If the value is\n  // undefined return a default value\n  Marionette._getValue = function(value, context, params) {\n    if (_.isFunction(value)) {\n      // We need to ensure that params is not undefined\n      // to prevent `apply` from failing in ie8\n      params = params || [];\n  \n      value = value.apply(context, params);\n    }\n    return value;\n  };\n  \n  // Marionette.normalizeMethods\n  // ----------------------\n  \n  // Pass in a mapping of events => functions or function names\n  // and return a mapping of events => functions\n  Marionette.normalizeMethods = function(hash) {\n    return _.reduce(hash, function(normalizedHash, method, name) {\n      if (!_.isFunction(method)) {\n        method = this[method];\n      }\n      if (method) {\n        normalizedHash[name] = method;\n      }\n      return normalizedHash;\n    }, {}, this);\n  };\n  \n  // utility method for parsing @ui. syntax strings\n  // into associated selector\n  Marionette.normalizeUIString = function(uiString, ui) {\n    return uiString.replace(/@ui\\.[a-zA-Z_$0-9]*/g, function(r) {\n      return ui[r.slice(4)];\n    });\n  };\n  \n  // allows for the use of the @ui. syntax within\n  // a given key for triggers and events\n  // swaps the @ui with the associated selector.\n  // Returns a new, non-mutated, parsed events hash.\n  Marionette.normalizeUIKeys = function(hash, ui) {\n    return _.reduce(hash, function(memo, val, key) {\n      var normalizedKey = Marionette.normalizeUIString(key, ui);\n      memo[normalizedKey] = val;\n      return memo;\n    }, {});\n  };\n  \n  // allows for the use of the @ui. syntax within\n  // a given value for regions\n  // swaps the @ui with the associated selector\n  Marionette.normalizeUIValues = function(hash, ui) {\n    _.each(hash, function(val, key) {\n      if (_.isString(val)) {\n        hash[key] = Marionette.normalizeUIString(val, ui);\n      }\n    });\n    return hash;\n  };\n  \n  // Mix in methods from Underscore, for iteration, and other\n  // collection related features.\n  // Borrowing this code from Backbone.Collection:\n  // http://backbonejs.org/docs/backbone.html#section-121\n  Marionette.actAsCollection = function(object, listProperty) {\n    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',\n      'select', 'reject', 'every', 'all', 'some', 'any', 'include',\n      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',\n      'last', 'without', 'isEmpty', 'pluck'];\n  \n    _.each(methods, function(method) {\n      object[method] = function() {\n        var list = _.values(_.result(this, listProperty));\n        var args = [list].concat(_.toArray(arguments));\n        return _[method].apply(_, args);\n      };\n    });\n  };\n  \n  var deprecate = Marionette.deprecate = function(message, test) {\n    if (_.isObject(message)) {\n      message = (\n        message.prev + ' is going to be removed in the future. ' +\n        'Please use ' + message.next + ' instead.' +\n        (message.url ? ' See: ' + message.url : '')\n      );\n    }\n  \n    if ((test === undefined || !test) && !deprecate._cache[message]) {\n      deprecate._warn('Deprecation warning: ' + message);\n      deprecate._cache[message] = true;\n    }\n  };\n  \n  deprecate._warn = typeof console !== 'undefined' && (console.warn || console.log) || function() {};\n  deprecate._cache = {};\n  \n  /* jshint maxstatements: 14, maxcomplexity: 7 */\n  \n  // Trigger Method\n  // --------------\n  \n  \n  Marionette._triggerMethod = (function() {\n    // split the event name on the \":\"\n    var splitter = /(^|:)(\\w)/gi;\n  \n    // take the event section (\"section1:section2:section3\")\n    // and turn it in to uppercase name\n    function getEventName(match, prefix, eventName) {\n      return eventName.toUpperCase();\n    }\n  \n    return function(context, event, args) {\n      var noEventArg = arguments.length < 3;\n      if (noEventArg) {\n        args = event;\n        event = args[0];\n      }\n  \n      // get the method name from the event name\n      var methodName = 'on' + event.replace(splitter, getEventName);\n      var method = context[methodName];\n      var result;\n  \n      // call the onMethodName if it exists\n      if (_.isFunction(method)) {\n        // pass all args, except the event name\n        result = method.apply(context, noEventArg ? _.rest(args) : args);\n      }\n  \n      // trigger the event, if a trigger method exists\n      if (_.isFunction(context.trigger)) {\n        if (noEventArg + args.length > 1) {\n          context.trigger.apply(context, noEventArg ? args : [event].concat(_.rest(args, 0)));\n        } else {\n          context.trigger(event);\n        }\n      }\n  \n      return result;\n    };\n  })();\n  \n  // Trigger an event and/or a corresponding method name. Examples:\n  //\n  // `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n  // call the \"onFoo\" method.\n  //\n  // `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n  // call the \"onFooBar\" method.\n  Marionette.triggerMethod = function(event) {\n    return Marionette._triggerMethod(this, arguments);\n  };\n  \n  // triggerMethodOn invokes triggerMethod on a specific context\n  //\n  // e.g. `Marionette.triggerMethodOn(view, 'show')`\n  // will trigger a \"show\" event or invoke onShow the view.\n  Marionette.triggerMethodOn = function(context) {\n    var fnc = _.isFunction(context.triggerMethod) ?\n                  context.triggerMethod :\n                  Marionette.triggerMethod;\n  \n    return fnc.apply(context, _.rest(arguments));\n  };\n  \n  // DOM Refresh\n  // -----------\n  \n  // Monitor a view's state, and after it has been rendered and shown\n  // in the DOM, trigger a \"dom:refresh\" event every time it is\n  // re-rendered.\n  \n  Marionette.MonitorDOMRefresh = function(view) {\n  \n    // track when the view has been shown in the DOM,\n    // using a Marionette.Region (or by other means of triggering \"show\")\n    function handleShow() {\n      view._isShown = true;\n      triggerDOMRefresh();\n    }\n  \n    // track when the view has been rendered\n    function handleRender() {\n      view._isRendered = true;\n      triggerDOMRefresh();\n    }\n  \n    // Trigger the \"dom:refresh\" event and corresponding \"onDomRefresh\" method\n    function triggerDOMRefresh() {\n      if (view._isShown && view._isRendered && Marionette.isNodeAttached(view.el)) {\n        if (_.isFunction(view.triggerMethod)) {\n          view.triggerMethod('dom:refresh');\n        }\n      }\n    }\n  \n    view.on({\n      show: handleShow,\n      render: handleRender\n    });\n  };\n  \n  /* jshint maxparams: 5 */\n  \n  // Bind Entity Events & Unbind Entity Events\n  // -----------------------------------------\n  //\n  // These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n  // to methods on a target object.\n  //\n  // The first parameter, `target`, must have the Backbone.Events module mixed in.\n  //\n  // The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n  // any object that has Backbone.Events mixed in) to bind the events from.\n  //\n  // The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n  // configuration. Multiple handlers can be separated by a space. A\n  // function can be supplied instead of a string handler name.\n  \n  (function(Marionette) {\n    'use strict';\n  \n    // Bind the event to handlers specified as a string of\n    // handler names on the target object\n    function bindFromStrings(target, entity, evt, methods) {\n      var methodNames = methods.split(/\\s+/);\n  \n      _.each(methodNames, function(methodName) {\n  \n        var method = target[methodName];\n        if (!method) {\n          throw new Marionette.Error('Method \"' + methodName +\n            '\" was configured as an event handler, but does not exist.');\n        }\n  \n        target.listenTo(entity, evt, method);\n      });\n    }\n  \n    // Bind the event to a supplied callback function\n    function bindToFunction(target, entity, evt, method) {\n      target.listenTo(entity, evt, method);\n    }\n  \n    // Bind the event to handlers specified as a string of\n    // handler names on the target object\n    function unbindFromStrings(target, entity, evt, methods) {\n      var methodNames = methods.split(/\\s+/);\n  \n      _.each(methodNames, function(methodName) {\n        var method = target[methodName];\n        target.stopListening(entity, evt, method);\n      });\n    }\n  \n    // Bind the event to a supplied callback function\n    function unbindToFunction(target, entity, evt, method) {\n      target.stopListening(entity, evt, method);\n    }\n  \n  \n    // generic looping function\n    function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {\n      if (!entity || !bindings) { return; }\n  \n      // type-check bindings\n      if (!_.isObject(bindings)) {\n        throw new Marionette.Error({\n          message: 'Bindings must be an object or function.',\n          url: 'marionette.functions.html#marionettebindentityevents'\n        });\n      }\n  \n      // allow the bindings to be a function\n      bindings = Marionette._getValue(bindings, target);\n  \n      // iterate the bindings and bind them\n      _.each(bindings, function(methods, evt) {\n  \n        // allow for a function as the handler,\n        // or a list of event names as a string\n        if (_.isFunction(methods)) {\n          functionCallback(target, entity, evt, methods);\n        } else {\n          stringCallback(target, entity, evt, methods);\n        }\n  \n      });\n    }\n  \n    // Export Public API\n    Marionette.bindEntityEvents = function(target, entity, bindings) {\n      iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);\n    };\n  \n    Marionette.unbindEntityEvents = function(target, entity, bindings) {\n      iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);\n    };\n  \n    // Proxy `bindEntityEvents`\n    Marionette.proxyBindEntityEvents = function(entity, bindings) {\n      return Marionette.bindEntityEvents(this, entity, bindings);\n    };\n  \n    // Proxy `unbindEntityEvents`\n    Marionette.proxyUnbindEntityEvents = function(entity, bindings) {\n      return Marionette.unbindEntityEvents(this, entity, bindings);\n    };\n  })(Marionette);\n  \n\n  // Error\n  // -----\n  \n  var errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n  \n  Marionette.Error = Marionette.extend.call(Error, {\n    urlRoot: 'http://marionettejs.com/docs/v' + Marionette.VERSION + '/',\n  \n    constructor: function(message, options) {\n      if (_.isObject(message)) {\n        options = message;\n        message = options.message;\n      } else if (!options) {\n        options = {};\n      }\n  \n      var error = Error.call(this, message);\n      _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n  \n      this.captureStackTrace();\n  \n      if (options.url) {\n        this.url = this.urlRoot + options.url;\n      }\n    },\n  \n    captureStackTrace: function() {\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, Marionette.Error);\n      }\n    },\n  \n    toString: function() {\n      return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n    }\n  });\n  \n  Marionette.Error.extend = Marionette.extend;\n  \n  // Callbacks\n  // ---------\n  \n  // A simple way of managing a collection of callbacks\n  // and executing them at a later point in time, using jQuery's\n  // `Deferred` object.\n  Marionette.Callbacks = function() {\n    this._deferred = Marionette.Deferred();\n    this._callbacks = [];\n  };\n  \n  _.extend(Marionette.Callbacks.prototype, {\n  \n    // Add a callback to be executed. Callbacks added here are\n    // guaranteed to execute, even if they are added after the\n    // `run` method is called.\n    add: function(callback, contextOverride) {\n      var promise = _.result(this._deferred, 'promise');\n  \n      this._callbacks.push({cb: callback, ctx: contextOverride});\n  \n      promise.then(function(args) {\n        if (contextOverride){ args.context = contextOverride; }\n        callback.call(args.context, args.options);\n      });\n    },\n  \n    // Run all registered callbacks with the context specified.\n    // Additional callbacks can be added after this has been run\n    // and they will still be executed.\n    run: function(options, context) {\n      this._deferred.resolve({\n        options: options,\n        context: context\n      });\n    },\n  \n    // Resets the list of callbacks to be run, allowing the same list\n    // to be run multiple times - whenever the `run` method is called.\n    reset: function() {\n      var callbacks = this._callbacks;\n      this._deferred = Marionette.Deferred();\n      this._callbacks = [];\n  \n      _.each(callbacks, function(cb) {\n        this.add(cb.cb, cb.ctx);\n      }, this);\n    }\n  });\n  \n  // Controller\n  // ----------\n  \n  // A multi-purpose object to use as a controller for\n  // modules and routers, and as a mediator for workflow\n  // and coordination of other objects, views, and more.\n  Marionette.Controller = function(options) {\n    this.options = options || {};\n  \n    if (_.isFunction(this.initialize)) {\n      this.initialize(this.options);\n    }\n  };\n  \n  Marionette.Controller.extend = Marionette.extend;\n  \n  // Controller Methods\n  // --------------\n  \n  // Ensure it can trigger events with Backbone.Events\n  _.extend(Marionette.Controller.prototype, Backbone.Events, {\n    destroy: function() {\n      Marionette._triggerMethod(this, 'before:destroy', arguments);\n      Marionette._triggerMethod(this, 'destroy', arguments);\n  \n      this.stopListening();\n      this.off();\n      return this;\n    },\n  \n    // import the `triggerMethod` to trigger events with corresponding\n    // methods if the method exists\n    triggerMethod: Marionette.triggerMethod,\n  \n    // Proxy `getOption` to enable getting options from this or this.options by name.\n    getOption: Marionette.proxyGetOption\n  \n  });\n  \n  // Object\n  // ------\n  \n  // A Base Class that other Classes should descend from.\n  // Object borrows many conventions and utilities from Backbone.\n  Marionette.Object = function(options) {\n    this.options = _.extend({}, _.result(this, 'options'), options);\n  \n    this.initialize.apply(this, arguments);\n  };\n  \n  Marionette.Object.extend = Marionette.extend;\n  \n  // Object Methods\n  // --------------\n  \n  // Ensure it can trigger events with Backbone.Events\n  _.extend(Marionette.Object.prototype, Backbone.Events, {\n  \n    //this is a noop method intended to be overridden by classes that extend from this base\n    initialize: function() {},\n  \n    destroy: function() {\n      this.triggerMethod('before:destroy');\n      this.triggerMethod('destroy');\n      this.stopListening();\n    },\n  \n    // Import the `triggerMethod` to trigger events with corresponding\n    // methods if the method exists\n    triggerMethod: Marionette.triggerMethod,\n  \n    // Proxy `getOption` to enable getting options from this or this.options by name.\n    getOption: Marionette.proxyGetOption,\n  \n    // Proxy `bindEntityEvents` to enable binding view's events from another entity.\n    bindEntityEvents: Marionette.proxyBindEntityEvents,\n  \n    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.\n    unbindEntityEvents: Marionette.proxyUnbindEntityEvents\n  });\n  \n  /* jshint maxcomplexity: 16, maxstatements: 45, maxlen: 120 */\n  \n  // Region\n  // ------\n  \n  // Manage the visual regions of your composite application. See\n  // http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/\n  \n  Marionette.Region = Marionette.Object.extend({\n    constructor: function (options) {\n  \n      // set options temporarily so that we can get `el`.\n      // options will be overriden by Object.constructor\n      this.options = options || {};\n      this.el = this.getOption('el');\n  \n      // Handle when this.el is passed in as a $ wrapped element.\n      this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n  \n      if (!this.el) {\n        throw new Marionette.Error({\n          name: 'NoElError',\n          message: 'An \"el\" must be specified for a region.'\n        });\n      }\n  \n      this.$el = this.getEl(this.el);\n      Marionette.Object.call(this, options);\n    },\n  \n    // Displays a backbone view instance inside of the region.\n    // Handles calling the `render` method for you. Reads content\n    // directly from the `el` attribute. Also calls an optional\n    // `onShow` and `onDestroy` method on your view, just after showing\n    // or just before destroying the view, respectively.\n    // The `preventDestroy` option can be used to prevent a view from\n    // the old view being destroyed on show.\n    // The `forceShow` option can be used to force a view to be\n    // re-rendered if it's already shown in the region.\n    show: function(view, options){\n      if (!this._ensureElement()) {\n        return;\n      }\n  \n      this._ensureViewIsIntact(view);\n  \n      var showOptions     = options || {};\n      var isDifferentView = view !== this.currentView;\n      var preventDestroy  = !!showOptions.preventDestroy;\n      var forceShow       = !!showOptions.forceShow;\n  \n      // We are only changing the view if there is a current view to change to begin with\n      var isChangingView = !!this.currentView;\n  \n      // Only destroy the current view if we don't want to `preventDestroy` and if\n      // the view given in the first argument is different than `currentView`\n      var _shouldDestroyView = isDifferentView && !preventDestroy;\n  \n      // Only show the view given in the first argument if it is different than\n      // the current view or if we want to re-show the view. Note that if\n      // `_shouldDestroyView` is true, then `_shouldShowView` is also necessarily true.\n      var _shouldShowView = isDifferentView || forceShow;\n  \n      if (isChangingView) {\n        this.triggerMethod('before:swapOut', this.currentView, this, options);\n      }\n  \n      if (this.currentView) {\n        delete this.currentView._parent;\n      }\n  \n      if (_shouldDestroyView) {\n        this.empty();\n  \n      // A `destroy` event is attached to the clean up manually removed views.\n      // We need to detach this event when a new view is going to be shown as it\n      // is no longer relevant.\n      } else if (isChangingView && _shouldShowView) {\n        this.currentView.off('destroy', this.empty, this);\n      }\n  \n      if (_shouldShowView) {\n  \n        // We need to listen for if a view is destroyed\n        // in a way other than through the region.\n        // If this happens we need to remove the reference\n        // to the currentView since once a view has been destroyed\n        // we can not reuse it.\n        view.once('destroy', this.empty, this);\n        view.render();\n  \n        view._parent = this;\n  \n        if (isChangingView) {\n          this.triggerMethod('before:swap', view, this, options);\n        }\n  \n        this.triggerMethod('before:show', view, this, options);\n        Marionette.triggerMethodOn(view, 'before:show', view, this, options);\n  \n        if (isChangingView) {\n          this.triggerMethod('swapOut', this.currentView, this, options);\n        }\n  \n        // An array of views that we're about to display\n        var attachedRegion = Marionette.isNodeAttached(this.el);\n  \n        // The views that we're about to attach to the document\n        // It's important that we prevent _getNestedViews from being executed unnecessarily\n        // as it's a potentially-slow method\n        var displayedViews = [];\n  \n        var triggerBeforeAttach = showOptions.triggerBeforeAttach || this.triggerBeforeAttach;\n        var triggerAttach = showOptions.triggerAttach || this.triggerAttach;\n  \n        if (attachedRegion && triggerBeforeAttach) {\n          displayedViews = this._displayedViews(view);\n          this._triggerAttach(displayedViews, 'before:');\n        }\n  \n        this.attachHtml(view);\n        this.currentView = view;\n  \n        if (attachedRegion && triggerAttach) {\n          displayedViews = this._displayedViews(view);\n          this._triggerAttach(displayedViews);\n        }\n  \n        if (isChangingView) {\n          this.triggerMethod('swap', view, this, options);\n        }\n  \n        this.triggerMethod('show', view, this, options);\n        Marionette.triggerMethodOn(view, 'show', view, this, options);\n  \n        return this;\n      }\n  \n      return this;\n    },\n  \n    triggerBeforeAttach: true,\n    triggerAttach: true,\n  \n    _triggerAttach: function(views, prefix) {\n      var eventName = (prefix || '') + 'attach';\n      _.each(views, function(view) {\n        Marionette.triggerMethodOn(view, eventName, view, this);\n      }, this);\n    },\n  \n    _displayedViews: function(view) {\n      return _.union([view], _.result(view, '_getNestedViews') || []);\n    },\n  \n    _ensureElement: function(){\n      if (!_.isObject(this.el)) {\n        this.$el = this.getEl(this.el);\n        this.el = this.$el[0];\n      }\n  \n      if (!this.$el || this.$el.length === 0) {\n        if (this.getOption('allowMissingEl')) {\n          return false;\n        } else {\n          throw new Marionette.Error('An \"el\" ' + this.$el.selector + ' must exist in DOM');\n        }\n      }\n      return true;\n    },\n  \n    _ensureViewIsIntact: function(view) {\n      if (!view) {\n        throw new Marionette.Error({\n          name: 'ViewNotValid',\n          message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n        });\n      }\n  \n      if (view.isDestroyed) {\n        throw new Marionette.Error({\n          name: 'ViewDestroyedError',\n          message: 'View (cid: \"' + view.cid + '\") has already been destroyed and cannot be used.'\n        });\n      }\n    },\n  \n    // Override this method to change how the region finds the DOM\n    // element that it manages. Return a jQuery selector object scoped\n    // to a provided parent el or the document if none exists.\n    getEl: function(el) {\n      return Backbone.$(el, Marionette._getValue(this.options.parentEl, this));\n    },\n  \n    // Override this method to change how the new view is\n    // appended to the `$el` that the region is managing\n    attachHtml: function(view) {\n      this.$el.contents().detach();\n  \n      this.el.appendChild(view.el);\n    },\n  \n    // Destroy the current view, if there is one. If there is no\n    // current view, it does nothing and returns immediately.\n    empty: function() {\n      var view = this.currentView;\n  \n      // If there is no view in the region\n      // we should not remove anything\n      if (!view) { return; }\n  \n      view.off('destroy', this.empty, this);\n      this.triggerMethod('before:empty', view);\n      this._destroyView();\n      this.triggerMethod('empty', view);\n  \n      // Remove region pointer to the currentView\n      delete this.currentView;\n      return this;\n    },\n  \n    // call 'destroy' or 'remove', depending on which is found\n    // on the view (if showing a raw Backbone view or a Marionette View)\n    _destroyView: function() {\n      var view = this.currentView;\n  \n      if (view.destroy && !view.isDestroyed) {\n        view.destroy();\n      } else if (view.remove) {\n        view.remove();\n  \n        // appending isDestroyed to raw Backbone View allows regions\n        // to throw a ViewDestroyedError for this view\n        view.isDestroyed = true;\n      }\n    },\n  \n    // Attach an existing view to the region. This\n    // will not call `render` or `onShow` for the new view,\n    // and will not replace the current HTML for the `el`\n    // of the region.\n    attachView: function(view) {\n      this.currentView = view;\n      return this;\n    },\n  \n    // Checks whether a view is currently present within\n    // the region. Returns `true` if there is and `false` if\n    // no view is present.\n    hasView: function() {\n      return !!this.currentView;\n    },\n  \n    // Reset the region by destroying any existing view and\n    // clearing out the cached `$el`. The next time a view\n    // is shown via this region, the region will re-query the\n    // DOM for the region's `el`.\n    reset: function() {\n      this.empty();\n  \n      if (this.$el) {\n        this.el = this.$el.selector;\n      }\n  \n      delete this.$el;\n      return this;\n    }\n  \n  },\n  \n  // Static Methods\n  {\n  \n    // Build an instance of a region by passing in a configuration object\n    // and a default region class to use if none is specified in the config.\n    //\n    // The config object should either be a string as a jQuery DOM selector,\n    // a Region class directly, or an object literal that specifies a selector,\n    // a custom regionClass, and any options to be supplied to the region:\n    //\n    // ```js\n    // {\n    //   selector: \"#foo\",\n    //   regionClass: MyCustomRegion,\n    //   allowMissingEl: false\n    // }\n    // ```\n    //\n    buildRegion: function(regionConfig, DefaultRegionClass) {\n      if (_.isString(regionConfig)) {\n        return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);\n      }\n  \n      if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {\n        return this._buildRegionFromObject(regionConfig, DefaultRegionClass);\n      }\n  \n      if (_.isFunction(regionConfig)) {\n        return this._buildRegionFromRegionClass(regionConfig);\n      }\n  \n      throw new Marionette.Error({\n        message: 'Improper region configuration type.',\n        url: 'marionette.region.html#region-configuration-types'\n      });\n    },\n  \n    // Build the region from a string selector like '#foo-region'\n    _buildRegionFromSelector: function(selector, DefaultRegionClass) {\n      return new DefaultRegionClass({ el: selector });\n    },\n  \n    // Build the region from a configuration object\n    // ```js\n    // { selector: '#foo', regionClass: FooRegion, allowMissingEl: false }\n    // ```\n    _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {\n      var RegionClass = regionConfig.regionClass || DefaultRegionClass;\n      var options = _.omit(regionConfig, 'selector', 'regionClass');\n  \n      if (regionConfig.selector && !options.el) {\n        options.el = regionConfig.selector;\n      }\n  \n      return new RegionClass(options);\n    },\n  \n    // Build the region directly from a given `RegionClass`\n    _buildRegionFromRegionClass: function(RegionClass) {\n      return new RegionClass();\n    }\n  });\n  \n  // Region Manager\n  // --------------\n  \n  // Manage one or more related `Marionette.Region` objects.\n  Marionette.RegionManager = Marionette.Controller.extend({\n    constructor: function(options) {\n      this._regions = {};\n  \n      Marionette.Controller.call(this, options);\n  \n      this.addRegions(this.getOption('regions'));\n    },\n  \n    // Add multiple regions using an object literal or a\n    // function that returns an object literal, where\n    // each key becomes the region name, and each value is\n    // the region definition.\n    addRegions: function(regionDefinitions, defaults) {\n      regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);\n  \n      return _.reduce(regionDefinitions, function(regions, definition, name) {\n        if (_.isString(definition)) {\n          definition = {selector: definition};\n        }\n        if (definition.selector) {\n          definition = _.defaults({}, definition, defaults);\n        }\n  \n        regions[name] = this.addRegion(name, definition);\n        return regions;\n      }, {}, this);\n    },\n  \n    // Add an individual region to the region manager,\n    // and return the region instance\n    addRegion: function(name, definition) {\n      var region;\n  \n      if (definition instanceof Marionette.Region) {\n        region = definition;\n      } else {\n        region = Marionette.Region.buildRegion(definition, Marionette.Region);\n      }\n  \n      this.triggerMethod('before:add:region', name, region);\n  \n      region._parent = this;\n      this._store(name, region);\n  \n      this.triggerMethod('add:region', name, region);\n      return region;\n    },\n  \n    // Get a region by name\n    get: function(name) {\n      return this._regions[name];\n    },\n  \n    // Gets all the regions contained within\n    // the `regionManager` instance.\n    getRegions: function(){\n      return _.clone(this._regions);\n    },\n  \n    // Remove a region by name\n    removeRegion: function(name) {\n      var region = this._regions[name];\n      this._remove(name, region);\n  \n      return region;\n    },\n  \n    // Empty all regions in the region manager, and\n    // remove them\n    removeRegions: function() {\n      var regions = this.getRegions();\n      _.each(this._regions, function(region, name) {\n        this._remove(name, region);\n      }, this);\n  \n      return regions;\n    },\n  \n    // Empty all regions in the region manager, but\n    // leave them attached\n    emptyRegions: function() {\n      var regions = this.getRegions();\n      _.invoke(regions, 'empty');\n      return regions;\n    },\n  \n    // Destroy all regions and shut down the region\n    // manager entirely\n    destroy: function() {\n      this.removeRegions();\n      return Marionette.Controller.prototype.destroy.apply(this, arguments);\n    },\n  \n    // internal method to store regions\n    _store: function(name, region) {\n      this._regions[name] = region;\n      this._setLength();\n    },\n  \n    // internal method to remove a region\n    _remove: function(name, region) {\n      this.triggerMethod('before:remove:region', name, region);\n      region.empty();\n      region.stopListening();\n  \n      delete region._parent;\n      delete this._regions[name];\n      this._setLength();\n      this.triggerMethod('remove:region', name, region);\n    },\n  \n    // set the number of regions current held\n    _setLength: function() {\n      this.length = _.size(this._regions);\n    }\n  });\n  \n  Marionette.actAsCollection(Marionette.RegionManager.prototype, '_regions');\n  \n\n  // Template Cache\n  // --------------\n  \n  // Manage templates stored in `<script>` blocks,\n  // caching them for faster access.\n  Marionette.TemplateCache = function(templateId) {\n    this.templateId = templateId;\n  };\n  \n  // TemplateCache object-level methods. Manage the template\n  // caches from these method calls instead of creating\n  // your own TemplateCache instances\n  _.extend(Marionette.TemplateCache, {\n    templateCaches: {},\n  \n    // Get the specified template by id. Either\n    // retrieves the cached version, or loads it\n    // from the DOM.\n    get: function(templateId) {\n      var cachedTemplate = this.templateCaches[templateId];\n  \n      if (!cachedTemplate) {\n        cachedTemplate = new Marionette.TemplateCache(templateId);\n        this.templateCaches[templateId] = cachedTemplate;\n      }\n  \n      return cachedTemplate.load();\n    },\n  \n    // Clear templates from the cache. If no arguments\n    // are specified, clears all templates:\n    // `clear()`\n    //\n    // If arguments are specified, clears each of the\n    // specified templates from the cache:\n    // `clear(\"#t1\", \"#t2\", \"...\")`\n    clear: function() {\n      var i;\n      var args = _.toArray(arguments);\n      var length = args.length;\n  \n      if (length > 0) {\n        for (i = 0; i < length; i++) {\n          delete this.templateCaches[args[i]];\n        }\n      } else {\n        this.templateCaches = {};\n      }\n    }\n  });\n  \n  // TemplateCache instance methods, allowing each\n  // template cache object to manage its own state\n  // and know whether or not it has been loaded\n  _.extend(Marionette.TemplateCache.prototype, {\n  \n    // Internal method to load the template\n    load: function() {\n      // Guard clause to prevent loading this template more than once\n      if (this.compiledTemplate) {\n        return this.compiledTemplate;\n      }\n  \n      // Load the template and compile it\n      var template = this.loadTemplate(this.templateId);\n      this.compiledTemplate = this.compileTemplate(template);\n  \n      return this.compiledTemplate;\n    },\n  \n    // Load a template from the DOM, by default. Override\n    // this method to provide your own template retrieval\n    // For asynchronous loading with AMD/RequireJS, consider\n    // using a template-loader plugin as described here:\n    // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n    loadTemplate: function(templateId) {\n      var template = Backbone.$(templateId).html();\n  \n      if (!template || template.length === 0) {\n        throw new Marionette.Error({\n          name: 'NoTemplateError',\n          message: 'Could not find template: \"' + templateId + '\"'\n        });\n      }\n  \n      return template;\n    },\n  \n    // Pre-compile the template before caching it. Override\n    // this method if you do not need to pre-compile a template\n    // (JST / RequireJS for example) or if you want to change\n    // the template engine used (Handebars, etc).\n    compileTemplate: function(rawTemplate) {\n      return _.template(rawTemplate);\n    }\n  });\n  \n  // Renderer\n  // --------\n  \n  // Render a template with data by passing in the template\n  // selector and the data to render.\n  Marionette.Renderer = {\n  \n    // Render a template with data. The `template` parameter is\n    // passed to the `TemplateCache` object to retrieve the\n    // template function. Override this method to provide your own\n    // custom rendering and template handling for all of Marionette.\n    render: function(template, data) {\n      if (!template) {\n        throw new Marionette.Error({\n          name: 'TemplateNotFoundError',\n          message: 'Cannot render the template since its false, null or undefined.'\n        });\n      }\n  \n      var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);\n  \n      return templateFunc(data);\n    }\n  };\n  \n\n  /* jshint maxlen: 114, nonew: false */\n  // View\n  // ----\n  \n  // The core view class that other Marionette views extend from.\n  Marionette.View = Backbone.View.extend({\n    isDestroyed: false,\n  \n    constructor: function(options) {\n      _.bindAll(this, 'render');\n  \n      options = Marionette._getValue(options, this);\n  \n      // this exposes view options to the view initializer\n      // this is a backfill since backbone removed the assignment\n      // of this.options\n      // at some point however this may be removed\n      this.options = _.extend({}, _.result(this, 'options'), options);\n  \n      this._behaviors = Marionette.Behaviors(this);\n  \n      Backbone.View.apply(this, arguments);\n  \n      Marionette.MonitorDOMRefresh(this);\n      this.on('show', this.onShowCalled);\n    },\n  \n    // Get the template for this view\n    // instance. You can set a `template` attribute in the view\n    // definition or pass a `template: \"whatever\"` parameter in\n    // to the constructor options.\n    getTemplate: function() {\n      return this.getOption('template');\n    },\n  \n    // Serialize a model by returning its attributes. Clones\n    // the attributes to allow modification.\n    serializeModel: function(model){\n      return model.toJSON.apply(model, _.rest(arguments));\n    },\n  \n    // Mix in template helper methods. Looks for a\n    // `templateHelpers` attribute, which can either be an\n    // object literal, or a function that returns an object\n    // literal. All methods and attributes from this object\n    // are copies to the object passed in.\n    mixinTemplateHelpers: function(target) {\n      target = target || {};\n      var templateHelpers = this.getOption('templateHelpers');\n      templateHelpers = Marionette._getValue(templateHelpers, this);\n      return _.extend(target, templateHelpers);\n    },\n  \n    // normalize the keys of passed hash with the views `ui` selectors.\n    // `{\"@ui.foo\": \"bar\"}`\n    normalizeUIKeys: function(hash) {\n      var uiBindings = _.result(this, '_uiBindings');\n      return Marionette.normalizeUIKeys(hash, uiBindings || _.result(this, 'ui'));\n    },\n  \n    // normalize the values of passed hash with the views `ui` selectors.\n    // `{foo: \"@ui.bar\"}`\n    normalizeUIValues: function(hash) {\n      var ui = _.result(this, 'ui');\n      var uiBindings = _.result(this, '_uiBindings');\n      return Marionette.normalizeUIValues(hash, uiBindings || ui);\n    },\n  \n    // Configure `triggers` to forward DOM events to view\n    // events. `triggers: {\"click .foo\": \"do:foo\"}`\n    configureTriggers: function() {\n      if (!this.triggers) { return; }\n  \n      // Allow `triggers` to be configured as a function\n      var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n  \n      // Configure the triggers, prevent default\n      // action and stop propagation of DOM events\n      return _.reduce(triggers, function(events, value, key) {\n        events[key] = this._buildViewTrigger(value);\n        return events;\n      }, {}, this);\n    },\n  \n    // Overriding Backbone.View's delegateEvents to handle\n    // the `triggers`, `modelEvents`, and `collectionEvents` configuration\n    delegateEvents: function(events) {\n      this._delegateDOMEvents(events);\n      this.bindEntityEvents(this.model, this.getOption('modelEvents'));\n      this.bindEntityEvents(this.collection, this.getOption('collectionEvents'));\n  \n      _.each(this._behaviors, function(behavior) {\n        behavior.bindEntityEvents(this.model, behavior.getOption('modelEvents'));\n        behavior.bindEntityEvents(this.collection, behavior.getOption('collectionEvents'));\n      }, this);\n  \n      return this;\n    },\n  \n    // internal method to delegate DOM events and triggers\n    _delegateDOMEvents: function(eventsArg) {\n      var events = Marionette._getValue(eventsArg || this.events, this);\n  \n      // normalize ui keys\n      events = this.normalizeUIKeys(events);\n      if(_.isUndefined(eventsArg)) {this.events = events;}\n  \n      var combinedEvents = {};\n  \n      // look up if this view has behavior events\n      var behaviorEvents = _.result(this, 'behaviorEvents') || {};\n      var triggers = this.configureTriggers();\n      var behaviorTriggers = _.result(this, 'behaviorTriggers') || {};\n  \n      // behavior events will be overriden by view events and or triggers\n      _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers);\n  \n      Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n    },\n  \n    // Overriding Backbone.View's undelegateEvents to handle unbinding\n    // the `triggers`, `modelEvents`, and `collectionEvents` config\n    undelegateEvents: function() {\n      Backbone.View.prototype.undelegateEvents.apply(this, arguments);\n  \n      this.unbindEntityEvents(this.model, this.getOption('modelEvents'));\n      this.unbindEntityEvents(this.collection, this.getOption('collectionEvents'));\n  \n      _.each(this._behaviors, function(behavior) {\n        behavior.unbindEntityEvents(this.model, behavior.getOption('modelEvents'));\n        behavior.unbindEntityEvents(this.collection, behavior.getOption('collectionEvents'));\n      }, this);\n  \n      return this;\n    },\n  \n    // Internal method, handles the `show` event.\n    onShowCalled: function() {},\n  \n    // Internal helper method to verify whether the view hasn't been destroyed\n    _ensureViewIsIntact: function() {\n      if (this.isDestroyed) {\n        throw new Marionette.Error({\n          name: 'ViewDestroyedError',\n          message: 'View (cid: \"' + this.cid + '\") has already been destroyed and cannot be used.'\n        });\n      }\n    },\n  \n    // Default `destroy` implementation, for removing a view from the\n    // DOM and unbinding it. Regions will call this method\n    // for you. You can specify an `onDestroy` method in your view to\n    // add custom code that is called after the view is destroyed.\n    destroy: function() {\n      if (this.isDestroyed) { return; }\n  \n      var args = _.toArray(arguments);\n  \n      this.triggerMethod.apply(this, ['before:destroy'].concat(args));\n  \n      // mark as destroyed before doing the actual destroy, to\n      // prevent infinite loops within \"destroy\" event handlers\n      // that are trying to destroy other views\n      this.isDestroyed = true;\n      this.triggerMethod.apply(this, ['destroy'].concat(args));\n  \n      // unbind UI elements\n      this.unbindUIElements();\n  \n      // remove the view from the DOM\n      this.remove();\n  \n      // Call destroy on each behavior after\n      // destroying the view.\n      // This unbinds event listeners\n      // that behaviors have registered for.\n      _.invoke(this._behaviors, 'destroy', args);\n  \n      return this;\n    },\n  \n    bindUIElements: function() {\n      this._bindUIElements();\n      _.invoke(this._behaviors, this._bindUIElements);\n    },\n  \n    // This method binds the elements specified in the \"ui\" hash inside the view's code with\n    // the associated jQuery selectors.\n    _bindUIElements: function() {\n      if (!this.ui) { return; }\n  \n      // store the ui hash in _uiBindings so they can be reset later\n      // and so re-rendering the view will be able to find the bindings\n      if (!this._uiBindings) {\n        this._uiBindings = this.ui;\n      }\n  \n      // get the bindings result, as a function or otherwise\n      var bindings = _.result(this, '_uiBindings');\n  \n      // empty the ui so we don't have anything to start with\n      this.ui = {};\n  \n      // bind each of the selectors\n      _.each(bindings, function(selector, key) {\n        this.ui[key] = this.$(selector);\n      }, this);\n    },\n  \n    // This method unbinds the elements specified in the \"ui\" hash\n    unbindUIElements: function() {\n      this._unbindUIElements();\n      _.invoke(this._behaviors, this._unbindUIElements);\n    },\n  \n    _unbindUIElements: function() {\n      if (!this.ui || !this._uiBindings) { return; }\n  \n      // delete all of the existing ui bindings\n      _.each(this.ui, function($el, name) {\n        delete this.ui[name];\n      }, this);\n  \n      // reset the ui element to the original bindings configuration\n      this.ui = this._uiBindings;\n      delete this._uiBindings;\n    },\n  \n    // Internal method to create an event handler for a given `triggerDef` like\n    // 'click:foo'\n    _buildViewTrigger: function(triggerDef) {\n      var hasOptions = _.isObject(triggerDef);\n  \n      var options = _.defaults({}, (hasOptions ? triggerDef : {}), {\n        preventDefault: true,\n        stopPropagation: true\n      });\n  \n      var eventName = hasOptions ? options.event : triggerDef;\n  \n      return function(e) {\n        if (e) {\n          if (e.preventDefault && options.preventDefault) {\n            e.preventDefault();\n          }\n  \n          if (e.stopPropagation && options.stopPropagation) {\n            e.stopPropagation();\n          }\n        }\n  \n        var args = {\n          view: this,\n          model: this.model,\n          collection: this.collection\n        };\n  \n        this.triggerMethod(eventName, args);\n      };\n    },\n  \n    setElement: function() {\n      var ret = Backbone.View.prototype.setElement.apply(this, arguments);\n  \n      // proxy behavior $el to the view's $el.\n      // This is needed because a view's $el proxy\n      // is not set until after setElement is called.\n      _.invoke(this._behaviors, 'proxyViewProperties', this);\n  \n      return ret;\n    },\n  \n    // import the `triggerMethod` to trigger events with corresponding\n    // methods if the method exists\n    triggerMethod: function() {\n      var triggerMethod = Marionette._triggerMethod;\n      var ret = triggerMethod(this, arguments);\n      var behaviors = this._behaviors;\n      // Use good ol' for as this is a very hot function\n      for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {\n        triggerMethod(behaviors[i], arguments);\n      }\n  \n      return ret;\n    },\n  \n    // This method returns any views that are immediate\n    // children of this view\n    _getImmediateChildren: function() {\n      return [];\n    },\n  \n    // Returns an array of every nested view within this view\n    _getNestedViews: function() {\n      var children = this._getImmediateChildren();\n  \n      if (!children.length) { return children; }\n  \n      return _.reduce(children, function(memo, view) {\n        if (!view._getNestedViews) { return memo; }\n        return memo.concat(view._getNestedViews());\n      }, children);\n    },\n  \n    // Imports the \"normalizeMethods\" to transform hashes of\n    // events=>function references/names to a hash of events=>function references\n    normalizeMethods: Marionette.normalizeMethods,\n  \n    // Proxy `getOption` to enable getting options from this or this.options by name.\n    getOption: Marionette.proxyGetOption,\n  \n    // Proxy `bindEntityEvents` to enable binding view's events from another entity.\n    bindEntityEvents: Marionette.proxyBindEntityEvents,\n  \n    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.\n    unbindEntityEvents: Marionette.proxyUnbindEntityEvents\n  });\n  \n  // Item View\n  // ---------\n  \n  // A single item view implementation that contains code for rendering\n  // with underscore.js templates, serializing the view's model or collection,\n  // and calling several methods on extended views, such as `onRender`.\n  Marionette.ItemView = Marionette.View.extend({\n  \n    // Setting up the inheritance chain which allows changes to\n    // Marionette.View.prototype.constructor which allows overriding\n    constructor: function() {\n      Marionette.View.apply(this, arguments);\n    },\n  \n    // Serialize the model or collection for the view. If a model is\n    // found, the view's `serializeModel` is called. If a collection is found,\n    // each model in the collection is serialized by calling\n    // the view's `serializeCollection` and put into an `items` array in\n    // the resulting data. If both are found, defaults to the model.\n    // You can override the `serializeData` method in your own view definition,\n    // to provide custom serialization for your view's data.\n    serializeData: function(){\n      if (!this.model && !this.collection) {\n        return {};\n      }\n  \n      var args = [this.model || this.collection];\n      if (arguments.length) {\n        args.push.apply(args, arguments);\n      }\n  \n      if (this.model) {\n        return this.serializeModel.apply(this, args);\n      } else {\n        return {\n          items: this.serializeCollection.apply(this, args)\n        };\n      }\n    },\n  \n    // Serialize a collection by serializing each of its models.\n    serializeCollection: function(collection){\n      return collection.toJSON.apply(collection, _.rest(arguments));\n    },\n  \n    // Render the view, defaulting to underscore.js templates.\n    // You can override this in your view definition to provide\n    // a very specific rendering for your view. In general, though,\n    // you should override the `Marionette.Renderer` object to\n    // change how Marionette renders views.\n    render: function() {\n      this._ensureViewIsIntact();\n  \n      this.triggerMethod('before:render', this);\n  \n      this._renderTemplate();\n      this.bindUIElements();\n  \n      this.triggerMethod('render', this);\n  \n      return this;\n    },\n  \n    // Internal method to render the template with the serialized data\n    // and template helpers via the `Marionette.Renderer` object.\n    // Throws an `UndefinedTemplateError` error if the template is\n    // any falsely value but literal `false`.\n    _renderTemplate: function() {\n      var template = this.getTemplate();\n  \n      // Allow template-less item views\n      if (template === false) {\n        return;\n      }\n  \n      if (!template) {\n        throw new Marionette.Error({\n          name: 'UndefinedTemplateError',\n          message: 'Cannot render the template since it is null or undefined.'\n        });\n      }\n  \n      // Add in entity data and template helpers\n      var data = this.serializeData();\n      data = this.mixinTemplateHelpers(data);\n  \n      // Render and add to el\n      var html = Marionette.Renderer.render(template, data, this);\n      this.attachElContent(html);\n  \n      return this;\n    },\n  \n    // Attaches the content of a given view.\n    // This method can be overridden to optimize rendering,\n    // or to render in a non standard way.\n    //\n    // For example, using `innerHTML` instead of `$el.html`\n    //\n    // ```js\n    // attachElContent: function(html) {\n    //   this.el.innerHTML = html;\n    //   return this;\n    // }\n    // ```\n    attachElContent: function(html) {\n      this.$el.html(html);\n  \n      return this;\n    }\n  });\n  \n  /* jshint maxstatements: 14 */\n  \n  // Collection View\n  // ---------------\n  \n  // A view that iterates over a Backbone.Collection\n  // and renders an individual child view for each model.\n  Marionette.CollectionView = Marionette.View.extend({\n  \n    // used as the prefix for child view events\n    // that are forwarded through the collectionview\n    childViewEventPrefix: 'childview',\n  \n    // constructor\n    // option to pass `{sort: false}` to prevent the `CollectionView` from\n    // maintaining the sorted order of the collection.\n    // This will fallback onto appending childView's to the end.\n    constructor: function(options){\n      var initOptions = options || {};\n      if (_.isUndefined(this.sort)){\n        this.sort = _.isUndefined(initOptions.sort) ? true : initOptions.sort;\n      }\n  \n      this.once('render', this._initialEvents);\n      this._initChildViewStorage();\n  \n      Marionette.View.apply(this, arguments);\n  \n      this.initRenderBuffer();\n    },\n  \n    // Instead of inserting elements one by one into the page,\n    // it's much more performant to insert elements into a document\n    // fragment and then insert that document fragment into the page\n    initRenderBuffer: function() {\n      this.elBuffer = document.createDocumentFragment();\n      this._bufferedChildren = [];\n    },\n  \n    startBuffering: function() {\n      this.initRenderBuffer();\n      this.isBuffering = true;\n    },\n  \n    endBuffering: function() {\n      this.isBuffering = false;\n      this._triggerBeforeShowBufferedChildren();\n      this.attachBuffer(this, this.elBuffer);\n      this._triggerShowBufferedChildren();\n      this.initRenderBuffer();\n    },\n  \n    _triggerBeforeShowBufferedChildren: function() {\n      if (this._isShown) {\n        _.each(this._bufferedChildren, _.partial(this._triggerMethodOnChild, 'before:show'));\n      }\n    },\n  \n    _triggerShowBufferedChildren: function() {\n      if (this._isShown) {\n        _.each(this._bufferedChildren, _.partial(this._triggerMethodOnChild, 'show'));\n  \n        this._bufferedChildren = [];\n      }\n    },\n  \n    // Internal method for _.each loops to call `Marionette.triggerMethodOn` on\n    // a child view\n    _triggerMethodOnChild: function(event, childView) {\n      Marionette.triggerMethodOn(childView, event);\n    },\n  \n    // Configured the initial events that the collection view\n    // binds to.\n    _initialEvents: function() {\n      if (this.collection) {\n        this.listenTo(this.collection, 'add', this._onCollectionAdd);\n        this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n        this.listenTo(this.collection, 'reset', this.render);\n  \n        if (this.sort) {\n          this.listenTo(this.collection, 'sort', this._sortViews);\n        }\n      }\n    },\n  \n    // Handle a child added to the collection\n    _onCollectionAdd: function(child) {\n      this.destroyEmptyView();\n      var ChildView = this.getChildView(child);\n      var index = this.collection.indexOf(child);\n      this.addChild(child, ChildView, index);\n    },\n  \n    // get the child view by model it holds, and remove it\n    _onCollectionRemove: function(model) {\n      var view = this.children.findByModel(model);\n      this.removeChildView(view);\n      this.checkEmpty();\n    },\n  \n    // Override from `Marionette.View` to trigger show on child views\n    onShowCalled: function() {\n      this.children.each(_.partial(this._triggerMethodOnChild, 'show'));\n    },\n  \n    // Render children views. Override this method to\n    // provide your own implementation of a render function for\n    // the collection view.\n    render: function() {\n      this._ensureViewIsIntact();\n      this.triggerMethod('before:render', this);\n      this._renderChildren();\n      this.triggerMethod('render', this);\n      return this;\n    },\n  \n    // Render view after sorting. Override this method to\n    // change how the view renders after a `sort` on the collection.\n    // An example of this would be to only `renderChildren` in a `CompositeView`\n    // rather than the full view.\n    resortView: function() {\n      this.render();\n    },\n  \n    // Internal method. This checks for any changes in the order of the collection.\n    // If the index of any view doesn't match, it will render.\n    _sortViews: function() {\n      // check for any changes in sort order of views\n      var orderChanged = this.collection.find(function(item, index){\n        var view = this.children.findByModel(item);\n        return !view || view._index !== index;\n      }, this);\n  \n      if (orderChanged) {\n        this.resortView();\n      }\n    },\n  \n    // Internal reference to what index a `emptyView` is.\n    _emptyViewIndex: -1,\n  \n    // Internal method. Separated so that CompositeView can have\n    // more control over events being triggered, around the rendering\n    // process\n    _renderChildren: function() {\n      this.destroyEmptyView();\n      this.destroyChildren();\n  \n      if (this.isEmpty(this.collection)) {\n        this.showEmptyView();\n      } else {\n        this.triggerMethod('before:render:collection', this);\n        this.startBuffering();\n        this.showCollection();\n        this.endBuffering();\n        this.triggerMethod('render:collection', this);\n      }\n    },\n  \n    // Internal method to loop through collection and show each child view.\n    showCollection: function() {\n      var ChildView;\n      this.collection.each(function(child, index) {\n        ChildView = this.getChildView(child);\n        this.addChild(child, ChildView, index);\n      }, this);\n    },\n  \n    // Internal method to show an empty view in place of\n    // a collection of child views, when the collection is empty\n    showEmptyView: function() {\n      var EmptyView = this.getEmptyView();\n  \n      if (EmptyView && !this._showingEmptyView) {\n        this.triggerMethod('before:render:empty');\n  \n        this._showingEmptyView = true;\n        var model = new Backbone.Model();\n        this.addEmptyView(model, EmptyView);\n  \n        this.triggerMethod('render:empty');\n      }\n    },\n  \n    // Internal method to destroy an existing emptyView instance\n    // if one exists. Called when a collection view has been\n    // rendered empty, and then a child is added to the collection.\n    destroyEmptyView: function() {\n      if (this._showingEmptyView) {\n        this.triggerMethod('before:remove:empty');\n  \n        this.destroyChildren();\n        delete this._showingEmptyView;\n  \n        this.triggerMethod('remove:empty');\n      }\n    },\n  \n    // Retrieve the empty view class\n    getEmptyView: function() {\n      return this.getOption('emptyView');\n    },\n  \n    // Render and show the emptyView. Similar to addChild method\n    // but \"add:child\" events are not fired, and the event from\n    // emptyView are not forwarded\n    addEmptyView: function(child, EmptyView) {\n  \n      // get the emptyViewOptions, falling back to childViewOptions\n      var emptyViewOptions = this.getOption('emptyViewOptions') ||\n                            this.getOption('childViewOptions');\n  \n      if (_.isFunction(emptyViewOptions)){\n        emptyViewOptions = emptyViewOptions.call(this, child, this._emptyViewIndex);\n      }\n  \n      // build the empty view\n      var view = this.buildChildView(child, EmptyView, emptyViewOptions);\n  \n      view._parent = this;\n  \n      // Proxy emptyView events\n      this.proxyChildEvents(view);\n  \n      // trigger the 'before:show' event on `view` if the collection view\n      // has already been shown\n      if (this._isShown) {\n        Marionette.triggerMethodOn(view, 'before:show');\n      }\n  \n      // Store the `emptyView` like a `childView` so we can properly\n      // remove and/or close it later\n      this.children.add(view);\n  \n      // Render it and show it\n      this.renderChildView(view, this._emptyViewIndex);\n  \n      // call the 'show' method if the collection view\n      // has already been shown\n      if (this._isShown) {\n        Marionette.triggerMethodOn(view, 'show');\n      }\n    },\n  \n    // Retrieve the `childView` class, either from `this.options.childView`\n    // or from the `childView` in the object definition. The \"options\"\n    // takes precedence.\n    // This method receives the model that will be passed to the instance\n    // created from this `childView`. Overriding methods may use the child\n    // to determine what `childView` class to return.\n    getChildView: function(child) {\n      var childView = this.getOption('childView');\n  \n      if (!childView) {\n        throw new Marionette.Error({\n          name: 'NoChildViewError',\n          message: 'A \"childView\" must be specified'\n        });\n      }\n  \n      return childView;\n    },\n  \n    // Render the child's view and add it to the\n    // HTML for the collection view at a given index.\n    // This will also update the indices of later views in the collection\n    // in order to keep the children in sync with the collection.\n    addChild: function(child, ChildView, index) {\n      var childViewOptions = this.getOption('childViewOptions');\n      childViewOptions = Marionette._getValue(childViewOptions, this, [child, index]);\n  \n      var view = this.buildChildView(child, ChildView, childViewOptions);\n  \n      // increment indices of views after this one\n      this._updateIndices(view, true, index);\n  \n      this._addChildView(view, index);\n  \n      view._parent = this;\n  \n      return view;\n    },\n  \n    // Internal method. This decrements or increments the indices of views after the\n    // added/removed view to keep in sync with the collection.\n    _updateIndices: function(view, increment, index) {\n      if (!this.sort) {\n        return;\n      }\n  \n      if (increment) {\n        // assign the index to the view\n        view._index = index;\n      }\n  \n      // update the indexes of views after this one\n      this.children.each(function (laterView) {\n        if (laterView._index >= view._index) {\n          laterView._index += increment ? 1 : -1;\n        }\n      });\n    },\n  \n  \n    // Internal Method. Add the view to children and render it at\n    // the given index.\n    _addChildView: function(view, index) {\n      // set up the child view event forwarding\n      this.proxyChildEvents(view);\n  \n      this.triggerMethod('before:add:child', view);\n  \n      // Store the child view itself so we can properly\n      // remove and/or destroy it later\n      this.children.add(view);\n      this.renderChildView(view, index);\n  \n      if (this._isShown && !this.isBuffering) {\n        Marionette.triggerMethodOn(view, 'show');\n      }\n  \n      this.triggerMethod('add:child', view);\n    },\n  \n    // render the child view\n    renderChildView: function(view, index) {\n      view.render();\n      this.attachHtml(this, view, index);\n      return view;\n    },\n  \n    // Build a `childView` for a model in the collection.\n    buildChildView: function(child, ChildViewClass, childViewOptions) {\n      var options = _.extend({model: child}, childViewOptions);\n      return new ChildViewClass(options);\n    },\n  \n    // Remove the child view and destroy it.\n    // This function also updates the indices of\n    // later views in the collection in order to keep\n    // the children in sync with the collection.\n    removeChildView: function(view) {\n  \n      if (view) {\n        this.triggerMethod('before:remove:child', view);\n        // call 'destroy' or 'remove', depending on which is found\n        if (view.destroy) { view.destroy(); }\n        else if (view.remove) { view.remove(); }\n  \n        delete view._parent;\n        this.stopListening(view);\n        this.children.remove(view);\n        this.triggerMethod('remove:child', view);\n  \n        // decrement the index of views after this one\n        this._updateIndices(view, false);\n      }\n  \n      return view;\n    },\n  \n    // check if the collection is empty\n    isEmpty: function() {\n      return !this.collection || this.collection.length === 0;\n    },\n  \n    // If empty, show the empty view\n    checkEmpty: function() {\n      if (this.isEmpty(this.collection)) {\n        this.showEmptyView();\n      }\n    },\n  \n    // You might need to override this if you've overridden attachHtml\n    attachBuffer: function(collectionView, buffer) {\n      collectionView.$el.append(buffer);\n    },\n  \n    // Append the HTML to the collection's `el`.\n    // Override this method to do something other\n    // than `.append`.\n    attachHtml: function(collectionView, childView, index) {\n      if (collectionView.isBuffering) {\n        // buffering happens on reset events and initial renders\n        // in order to reduce the number of inserts into the\n        // document, which are expensive.\n        collectionView.elBuffer.appendChild(childView.el);\n        collectionView._bufferedChildren.push(childView);\n      }\n      else {\n        // If we've already rendered the main collection, append\n        // the new child into the correct order if we need to. Otherwise\n        // append to the end.\n        if (!collectionView._insertBefore(childView, index)){\n          collectionView._insertAfter(childView);\n        }\n      }\n    },\n  \n    // Internal method. Check whether we need to insert the view into\n    // the correct position.\n    _insertBefore: function(childView, index) {\n      var currentView;\n      var findPosition = this.sort && (index < this.children.length - 1);\n      if (findPosition) {\n        // Find the view after this one\n        currentView = this.children.find(function (view) {\n          return view._index === index + 1;\n        });\n      }\n  \n      if (currentView) {\n        currentView.$el.before(childView.el);\n        return true;\n      }\n  \n      return false;\n    },\n  \n    // Internal method. Append a view to the end of the $el\n    _insertAfter: function(childView) {\n      this.$el.append(childView.el);\n    },\n  \n    // Internal method to set up the `children` object for\n    // storing all of the child views\n    _initChildViewStorage: function() {\n      this.children = new Backbone.ChildViewContainer();\n    },\n  \n    // Handle cleanup and other destroying needs for the collection of views\n    destroy: function() {\n      if (this.isDestroyed) { return; }\n  \n      this.triggerMethod('before:destroy:collection');\n      this.destroyChildren();\n      this.triggerMethod('destroy:collection');\n  \n      return Marionette.View.prototype.destroy.apply(this, arguments);\n    },\n  \n    // Destroy the child views that this collection view\n    // is holding on to, if any\n    destroyChildren: function() {\n      var childViews = this.children.map(_.identity);\n      this.children.each(this.removeChildView, this);\n      this.checkEmpty();\n      return childViews;\n    },\n  \n    // Set up the child view event forwarding. Uses a \"childview:\"\n    // prefix in front of all forwarded events.\n    proxyChildEvents: function(view) {\n      var prefix = this.getOption('childViewEventPrefix');\n  \n      // Forward all child view events through the parent,\n      // prepending \"childview:\" to the event name\n      this.listenTo(view, 'all', function() {\n        var args = _.toArray(arguments);\n        var rootEvent = args[0];\n        var childEvents = this.normalizeMethods(_.result(this, 'childEvents'));\n  \n        args[0] = prefix + ':' + rootEvent;\n        args.splice(1, 0, view);\n  \n        // call collectionView childEvent if defined\n        if (typeof childEvents !== 'undefined' && _.isFunction(childEvents[rootEvent])) {\n          childEvents[rootEvent].apply(this, args.slice(1));\n        }\n  \n        this.triggerMethod.apply(this, args);\n      }, this);\n    },\n  \n    _getImmediateChildren: function() {\n      return _.values(this.children._views);\n    }\n  });\n  \n  /* jshint maxstatements: 17, maxlen: 117 */\n  \n  // Composite View\n  // --------------\n  \n  // Used for rendering a branch-leaf, hierarchical structure.\n  // Extends directly from CollectionView and also renders an\n  // a child view as `modelView`, for the top leaf\n  Marionette.CompositeView = Marionette.CollectionView.extend({\n  \n    // Setting up the inheritance chain which allows changes to\n    // Marionette.CollectionView.prototype.constructor which allows overriding\n    // option to pass '{sort: false}' to prevent the CompositeView from\n    // maintaining the sorted order of the collection.\n    // This will fallback onto appending childView's to the end.\n    constructor: function() {\n      Marionette.CollectionView.apply(this, arguments);\n    },\n  \n    // Configured the initial events that the composite view\n    // binds to. Override this method to prevent the initial\n    // events, or to add your own initial events.\n    _initialEvents: function() {\n  \n      // Bind only after composite view is rendered to avoid adding child views\n      // to nonexistent childViewContainer\n  \n      if (this.collection) {\n        this.listenTo(this.collection, 'add', this._onCollectionAdd);\n        this.listenTo(this.collection, 'remove', this._onCollectionRemove);\n        this.listenTo(this.collection, 'reset', this._renderChildren);\n  \n        if (this.sort) {\n          this.listenTo(this.collection, 'sort', this._sortViews);\n        }\n      }\n    },\n  \n    // Retrieve the `childView` to be used when rendering each of\n    // the items in the collection. The default is to return\n    // `this.childView` or Marionette.CompositeView if no `childView`\n    // has been defined\n    getChildView: function(child) {\n      var childView = this.getOption('childView') || this.constructor;\n  \n      return childView;\n    },\n  \n    // Serialize the model for the view.\n    // You can override the `serializeData` method in your own view\n    // definition, to provide custom serialization for your view's data.\n    serializeData: function() {\n      var data = {};\n  \n      if (this.model){\n        data = _.partial(this.serializeModel, this.model).apply(this, arguments);\n      }\n  \n      return data;\n    },\n  \n    // Renders the model and the collection.\n    render: function() {\n      this._ensureViewIsIntact();\n      this.isRendered = true;\n      this.resetChildViewContainer();\n  \n      this.triggerMethod('before:render', this);\n  \n      this._renderTemplate();\n      this._renderChildren();\n  \n      this.triggerMethod('render', this);\n      return this;\n    },\n  \n    _renderChildren: function() {\n      if (this.isRendered) {\n        Marionette.CollectionView.prototype._renderChildren.call(this);\n      }\n    },\n  \n    // Render the root template that the children\n    // views are appended to\n    _renderTemplate: function() {\n      var data = {};\n      data = this.serializeData();\n      data = this.mixinTemplateHelpers(data);\n  \n      this.triggerMethod('before:render:template');\n  \n      var template = this.getTemplate();\n      var html = Marionette.Renderer.render(template, data, this);\n      this.attachElContent(html);\n  \n      // the ui bindings is done here and not at the end of render since they\n      // will not be available until after the model is rendered, but should be\n      // available before the collection is rendered.\n      this.bindUIElements();\n      this.triggerMethod('render:template');\n    },\n  \n    // Attaches the content of the root.\n    // This method can be overridden to optimize rendering,\n    // or to render in a non standard way.\n    //\n    // For example, using `innerHTML` instead of `$el.html`\n    //\n    // ```js\n    // attachElContent: function(html) {\n    //   this.el.innerHTML = html;\n    //   return this;\n    // }\n    // ```\n    attachElContent: function(html) {\n      this.$el.html(html);\n  \n      return this;\n    },\n  \n    // You might need to override this if you've overridden attachHtml\n    attachBuffer: function(compositeView, buffer) {\n      var $container = this.getChildViewContainer(compositeView);\n      $container.append(buffer);\n    },\n  \n    // Internal method. Append a view to the end of the $el.\n    // Overidden from CollectionView to ensure view is appended to\n    // childViewContainer\n    _insertAfter: function (childView) {\n      var $container = this.getChildViewContainer(this, childView);\n      $container.append(childView.el);\n    },\n  \n    // Internal method to ensure an `$childViewContainer` exists, for the\n    // `attachHtml` method to use.\n    getChildViewContainer: function(containerView, childView) {\n      if ('$childViewContainer' in containerView) {\n        return containerView.$childViewContainer;\n      }\n  \n      var container;\n      var childViewContainer = Marionette.getOption(containerView, 'childViewContainer');\n      if (childViewContainer) {\n  \n        var selector = Marionette._getValue(childViewContainer, containerView);\n  \n        if (selector.charAt(0) === '@' && containerView.ui) {\n          container = containerView.ui[selector.substr(4)];\n        } else {\n          container = containerView.$(selector);\n        }\n  \n        if (container.length <= 0) {\n          throw new Marionette.Error({\n            name: 'ChildViewContainerMissingError',\n            message: 'The specified \"childViewContainer\" was not found: ' + containerView.childViewContainer\n          });\n        }\n  \n      } else {\n        container = containerView.$el;\n      }\n  \n      containerView.$childViewContainer = container;\n      return container;\n    },\n  \n    // Internal method to reset the `$childViewContainer` on render\n    resetChildViewContainer: function() {\n      if (this.$childViewContainer) {\n        delete this.$childViewContainer;\n      }\n    }\n  });\n  \n  // Layout View\n  // -----------\n  \n  // Used for managing application layoutViews, nested layoutViews and\n  // multiple regions within an application or sub-application.\n  //\n  // A specialized view class that renders an area of HTML and then\n  // attaches `Region` instances to the specified `regions`.\n  // Used for composite view management and sub-application areas.\n  Marionette.LayoutView = Marionette.ItemView.extend({\n    regionClass: Marionette.Region,\n  \n    // Ensure the regions are available when the `initialize` method\n    // is called.\n    constructor: function(options) {\n      options = options || {};\n  \n      this._firstRender = true;\n      this._initializeRegions(options);\n  \n      Marionette.ItemView.call(this, options);\n    },\n  \n    // LayoutView's render will use the existing region objects the\n    // first time it is called. Subsequent calls will destroy the\n    // views that the regions are showing and then reset the `el`\n    // for the regions to the newly rendered DOM elements.\n    render: function() {\n      this._ensureViewIsIntact();\n  \n      if (this._firstRender) {\n        // if this is the first render, don't do anything to\n        // reset the regions\n        this._firstRender = false;\n      } else {\n        // If this is not the first render call, then we need to\n        // re-initialize the `el` for each region\n        this._reInitializeRegions();\n      }\n  \n      return Marionette.ItemView.prototype.render.apply(this, arguments);\n    },\n  \n    // Handle destroying regions, and then destroy the view itself.\n    destroy: function() {\n      if (this.isDestroyed) { return this; }\n  \n      this.regionManager.destroy();\n      return Marionette.ItemView.prototype.destroy.apply(this, arguments);\n    },\n  \n    // Add a single region, by name, to the layoutView\n    addRegion: function(name, definition) {\n      var regions = {};\n      regions[name] = definition;\n      return this._buildRegions(regions)[name];\n    },\n  \n    // Add multiple regions as a {name: definition, name2: def2} object literal\n    addRegions: function(regions) {\n      this.regions = _.extend({}, this.regions, regions);\n      return this._buildRegions(regions);\n    },\n  \n    // Remove a single region from the LayoutView, by name\n    removeRegion: function(name) {\n      delete this.regions[name];\n      return this.regionManager.removeRegion(name);\n    },\n  \n    // Provides alternative access to regions\n    // Accepts the region name\n    // getRegion('main')\n    getRegion: function(region) {\n      return this.regionManager.get(region);\n    },\n  \n    // Get all regions\n    getRegions: function(){\n      return this.regionManager.getRegions();\n    },\n  \n    // internal method to build regions\n    _buildRegions: function(regions) {\n      var defaults = {\n        regionClass: this.getOption('regionClass'),\n        parentEl: _.partial(_.result, this, 'el')\n      };\n  \n      return this.regionManager.addRegions(regions, defaults);\n    },\n  \n    // Internal method to initialize the regions that have been defined in a\n    // `regions` attribute on this layoutView.\n    _initializeRegions: function(options) {\n      var regions;\n      this._initRegionManager();\n  \n      regions = Marionette._getValue(this.regions, this, [options]) || {};\n  \n      // Enable users to define `regions` as instance options.\n      var regionOptions = this.getOption.call(options, 'regions');\n  \n      // enable region options to be a function\n      regionOptions = Marionette._getValue(regionOptions, this, [options]);\n  \n      _.extend(regions, regionOptions);\n  \n      // Normalize region selectors hash to allow\n      // a user to use the @ui. syntax.\n      regions = this.normalizeUIValues(regions);\n  \n      this.addRegions(regions);\n    },\n  \n    // Internal method to re-initialize all of the regions by updating the `el` that\n    // they point to\n    _reInitializeRegions: function() {\n      this.regionManager.invoke('reset');\n    },\n  \n    // Enable easy overriding of the default `RegionManager`\n    // for customized region interactions and business specific\n    // view logic for better control over single regions.\n    getRegionManager: function() {\n      return new Marionette.RegionManager();\n    },\n  \n    // Internal method to initialize the region manager\n    // and all regions in it\n    _initRegionManager: function() {\n      this.regionManager = this.getRegionManager();\n      this.regionManager._parent = this;\n  \n      this.listenTo(this.regionManager, 'before:add:region', function(name) {\n        this.triggerMethod('before:add:region', name);\n      });\n  \n      this.listenTo(this.regionManager, 'add:region', function(name, region) {\n        this[name] = region;\n        this.triggerMethod('add:region', name, region);\n      });\n  \n      this.listenTo(this.regionManager, 'before:remove:region', function(name) {\n        this.triggerMethod('before:remove:region', name);\n      });\n  \n      this.listenTo(this.regionManager, 'remove:region', function(name, region) {\n        delete this[name];\n        this.triggerMethod('remove:region', name, region);\n      });\n    },\n  \n    _getImmediateChildren: function() {\n      return _.chain(this.regionManager.getRegions())\n        .pluck('currentView')\n        .compact()\n        .value();\n    }\n  });\n  \n\n  // Behavior\n  // --------\n  \n  // A Behavior is an isolated set of DOM /\n  // user interactions that can be mixed into any View.\n  // Behaviors allow you to blackbox View specific interactions\n  // into portable logical chunks, keeping your views simple and your code DRY.\n  \n  Marionette.Behavior = Marionette.Object.extend({\n    constructor: function(options, view) {\n      // Setup reference to the view.\n      // this comes in handle when a behavior\n      // wants to directly talk up the chain\n      // to the view.\n      this.view = view;\n      this.defaults = _.result(this, 'defaults') || {};\n      this.options  = _.extend({}, this.defaults, options);\n  \n      Marionette.Object.apply(this, arguments);\n    },\n  \n    // proxy behavior $ method to the view\n    // this is useful for doing jquery DOM lookups\n    // scoped to behaviors view.\n    $: function() {\n      return this.view.$.apply(this.view, arguments);\n    },\n  \n    // Stops the behavior from listening to events.\n    // Overrides Object#destroy to prevent additional events from being triggered.\n    destroy: function() {\n      this.stopListening();\n    },\n  \n    proxyViewProperties: function (view) {\n      this.$el = view.$el;\n      this.el = view.el;\n    }\n  });\n  \n  /* jshint maxlen: 143 */\n  // Behaviors\n  // ---------\n  \n  // Behaviors is a utility class that takes care of\n  // gluing your behavior instances to their given View.\n  // The most important part of this class is that you\n  // **MUST** override the class level behaviorsLookup\n  // method for things to work properly.\n  \n  Marionette.Behaviors = (function(Marionette, _) {\n    // Borrow event splitter from Backbone\n    var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n  \n    function Behaviors(view, behaviors) {\n  \n      if (!_.isObject(view.behaviors)) {\n        return {};\n      }\n  \n      // Behaviors defined on a view can be a flat object literal\n      // or it can be a function that returns an object.\n      behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, 'behaviors'));\n  \n      // Wraps several of the view's methods\n      // calling the methods first on each behavior\n      // and then eventually calling the method on the view.\n      Behaviors.wrap(view, behaviors, _.keys(methods));\n      return behaviors;\n    }\n  \n    var methods = {\n      behaviorTriggers: function(behaviorTriggers, behaviors) {\n        var triggerBuilder = new BehaviorTriggersBuilder(this, behaviors);\n        return triggerBuilder.buildBehaviorTriggers();\n      },\n  \n      behaviorEvents: function(behaviorEvents, behaviors) {\n        var _behaviorsEvents = {};\n        var viewUI = this._uiBindings || _.result(this, 'ui');\n  \n        _.each(behaviors, function(b, i) {\n          var _events = {};\n          var behaviorEvents = _.clone(_.result(b, 'events')) || {};\n          var behaviorUI = b._uiBindings || _.result(b, 'ui');\n  \n          // Construct an internal UI hash first using\n          // the views UI hash and then the behaviors UI hash.\n          // This allows the user to use UI hash elements\n          // defined in the parent view as well as those\n          // defined in the given behavior.\n          var ui = _.extend({}, viewUI, behaviorUI);\n  \n          // Normalize behavior events hash to allow\n          // a user to use the @ui. syntax.\n          behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, ui);\n  \n          var j = 0;\n          _.each(behaviorEvents, function(behaviour, key) {\n            var match     = key.match(delegateEventSplitter);\n  \n            // Set event name to be namespaced using the view cid,\n            // the behavior index, and the behavior event index\n            // to generate a non colliding event namespace\n            // http://api.jquery.com/event.namespace/\n            var eventName = match[1] + '.' + [this.cid, i, j++, ' '].join(''),\n                selector  = match[2];\n  \n            var eventKey  = eventName + selector;\n            var handler   = _.isFunction(behaviour) ? behaviour : b[behaviour];\n  \n            _events[eventKey] = _.bind(handler, b);\n          }, this);\n  \n          _behaviorsEvents = _.extend(_behaviorsEvents, _events);\n        }, this);\n  \n        return _behaviorsEvents;\n      }\n    };\n  \n    _.extend(Behaviors, {\n  \n      // Placeholder method to be extended by the user.\n      // The method should define the object that stores the behaviors.\n      // i.e.\n      //\n      // ```js\n      // Marionette.Behaviors.behaviorsLookup: function() {\n      //   return App.Behaviors\n      // }\n      // ```\n      behaviorsLookup: function() {\n        throw new Marionette.Error({\n          message: 'You must define where your behaviors are stored.',\n          url: 'marionette.behaviors.html#behaviorslookup'\n        });\n      },\n  \n      // Takes care of getting the behavior class\n      // given options and a key.\n      // If a user passes in options.behaviorClass\n      // default to using that. Otherwise delegate\n      // the lookup to the users `behaviorsLookup` implementation.\n      getBehaviorClass: function(options, key) {\n        if (options.behaviorClass) {\n          return options.behaviorClass;\n        }\n  \n        // Get behavior class can be either a flat object or a method\n        return Marionette._getValue(Behaviors.behaviorsLookup, this, [options, key])[key];\n      },\n  \n      // Iterate over the behaviors object, for each behavior\n      // instantiate it and get its grouped behaviors.\n      parseBehaviors: function(view, behaviors) {\n        return _.chain(behaviors).map(function(options, key) {\n          var BehaviorClass = Behaviors.getBehaviorClass(options, key);\n  \n          var behavior = new BehaviorClass(options, view);\n          var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, 'behaviors'));\n  \n          return [behavior].concat(nestedBehaviors);\n        }).flatten().value();\n      },\n  \n      // Wrap view internal methods so that they delegate to behaviors. For example,\n      // `onDestroy` should trigger destroy on all of the behaviors and then destroy itself.\n      // i.e.\n      //\n      // `view.delegateEvents = _.partial(methods.delegateEvents, view.delegateEvents, behaviors);`\n      wrap: function(view, behaviors, methodNames) {\n        _.each(methodNames, function(methodName) {\n          view[methodName] = _.partial(methods[methodName], view[methodName], behaviors);\n        });\n      }\n    });\n  \n    // Class to build handlers for `triggers` on behaviors\n    // for views\n    function BehaviorTriggersBuilder(view, behaviors) {\n      this._view      = view;\n      this._viewUI    = _.result(view, 'ui');\n      this._behaviors = behaviors;\n      this._triggers  = {};\n    }\n  \n    _.extend(BehaviorTriggersBuilder.prototype, {\n      // Main method to build the triggers hash with event keys and handlers\n      buildBehaviorTriggers: function() {\n        _.each(this._behaviors, this._buildTriggerHandlersForBehavior, this);\n        return this._triggers;\n      },\n  \n      // Internal method to build all trigger handlers for a given behavior\n      _buildTriggerHandlersForBehavior: function(behavior, i) {\n        var ui = _.extend({}, this._viewUI, _.result(behavior, 'ui'));\n        var triggersHash = _.clone(_.result(behavior, 'triggers')) || {};\n  \n        triggersHash = Marionette.normalizeUIKeys(triggersHash, ui);\n  \n        _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i));\n      },\n  \n      // Internal method to create and assign the trigger handler for a given\n      // behavior\n      _setHandlerForBehavior: function(behavior, i, eventName, trigger) {\n        // Unique identifier for the `this._triggers` hash\n        var triggerKey = trigger.replace(/^\\S+/, function(triggerName) {\n          return triggerName + '.' + 'behaviortriggers' + i;\n        });\n  \n        this._triggers[triggerKey] = this._view._buildViewTrigger(eventName);\n      }\n    });\n  \n    return Behaviors;\n  \n  })(Marionette, _);\n  \n\n  // App Router\n  // ----------\n  \n  // Reduce the boilerplate code of handling route events\n  // and then calling a single method on another object.\n  // Have your routers configured to call the method on\n  // your object, directly.\n  //\n  // Configure an AppRouter with `appRoutes`.\n  //\n  // App routers can only take one `controller` object.\n  // It is recommended that you divide your controller\n  // objects in to smaller pieces of related functionality\n  // and have multiple routers / controllers, instead of\n  // just one giant router and controller.\n  //\n  // You can also add standard routes to an AppRouter.\n  \n  Marionette.AppRouter = Backbone.Router.extend({\n  \n    constructor: function(options) {\n      this.options = options || {};\n  \n      Backbone.Router.apply(this, arguments);\n  \n      var appRoutes = this.getOption('appRoutes');\n      var controller = this._getController();\n      this.processAppRoutes(controller, appRoutes);\n      this.on('route', this._processOnRoute, this);\n    },\n  \n    // Similar to route method on a Backbone Router but\n    // method is called on the controller\n    appRoute: function(route, methodName) {\n      var controller = this._getController();\n      this._addAppRoute(controller, route, methodName);\n    },\n  \n    // process the route event and trigger the onRoute\n    // method call, if it exists\n    _processOnRoute: function(routeName, routeArgs) {\n      // make sure an onRoute before trying to call it\n      if (_.isFunction(this.onRoute)) {\n        // find the path that matches the current route\n        var routePath = _.invert(this.getOption('appRoutes'))[routeName];\n        this.onRoute(routeName, routePath, routeArgs);\n      }\n    },\n  \n    // Internal method to process the `appRoutes` for the\n    // router, and turn them in to routes that trigger the\n    // specified method on the specified `controller`.\n    processAppRoutes: function(controller, appRoutes) {\n      if (!appRoutes) { return; }\n  \n      var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes\n  \n      _.each(routeNames, function(route) {\n        this._addAppRoute(controller, route, appRoutes[route]);\n      }, this);\n    },\n  \n    _getController: function() {\n      return this.getOption('controller');\n    },\n  \n    _addAppRoute: function(controller, route, methodName) {\n      var method = controller[methodName];\n  \n      if (!method) {\n        throw new Marionette.Error('Method \"' + methodName + '\" was not found on the controller');\n      }\n  \n      this.route(route, methodName, _.bind(method, controller));\n    },\n  \n    // Proxy `getOption` to enable getting options from this or this.options by name.\n    getOption: Marionette.proxyGetOption,\n  \n    triggerMethod: Marionette.triggerMethod,\n  \n    bindEntityEvents: Marionette.proxyBindEntityEvents,\n  \n    unbindEntityEvents: Marionette.proxyUnbindEntityEvents\n  });\n  \n  // Application\n  // -----------\n  \n  // Contain and manage the composite application as a whole.\n  // Stores and starts up `Region` objects, includes an\n  // event aggregator as `app.vent`\n  Marionette.Application = Marionette.Object.extend({\n    constructor: function(options) {\n      this._initializeRegions(options);\n      this._initCallbacks = new Marionette.Callbacks();\n      this.submodules = {};\n      _.extend(this, options);\n      this._initChannel();\n      Marionette.Object.call(this, options);\n    },\n  \n    // Command execution, facilitated by Backbone.Wreqr.Commands\n    execute: function() {\n      this.commands.execute.apply(this.commands, arguments);\n    },\n  \n    // Request/response, facilitated by Backbone.Wreqr.RequestResponse\n    request: function() {\n      return this.reqres.request.apply(this.reqres, arguments);\n    },\n  \n    // Add an initializer that is either run at when the `start`\n    // method is called, or run immediately if added after `start`\n    // has already been called.\n    addInitializer: function(initializer) {\n      this._initCallbacks.add(initializer);\n    },\n  \n    // kick off all of the application's processes.\n    // initializes all of the regions that have been added\n    // to the app, and runs all of the initializer functions\n    start: function(options) {\n      this.triggerMethod('before:start', options);\n      this._initCallbacks.run(options, this);\n      this.triggerMethod('start', options);\n    },\n  \n    // Add regions to your app.\n    // Accepts a hash of named strings or Region objects\n    // addRegions({something: \"#someRegion\"})\n    // addRegions({something: Region.extend({el: \"#someRegion\"}) });\n    addRegions: function(regions) {\n      return this._regionManager.addRegions(regions);\n    },\n  \n    // Empty all regions in the app, without removing them\n    emptyRegions: function() {\n      return this._regionManager.emptyRegions();\n    },\n  \n    // Removes a region from your app, by name\n    // Accepts the regions name\n    // removeRegion('myRegion')\n    removeRegion: function(region) {\n      return this._regionManager.removeRegion(region);\n    },\n  \n    // Provides alternative access to regions\n    // Accepts the region name\n    // getRegion('main')\n    getRegion: function(region) {\n      return this._regionManager.get(region);\n    },\n  \n    // Get all the regions from the region manager\n    getRegions: function(){\n      return this._regionManager.getRegions();\n    },\n  \n    // Create a module, attached to the application\n    module: function(moduleNames, moduleDefinition) {\n  \n      // Overwrite the module class if the user specifies one\n      var ModuleClass = Marionette.Module.getClass(moduleDefinition);\n  \n      var args = _.toArray(arguments);\n      args.unshift(this);\n  \n      // see the Marionette.Module object for more information\n      return ModuleClass.create.apply(ModuleClass, args);\n    },\n  \n    // Enable easy overriding of the default `RegionManager`\n    // for customized region interactions and business-specific\n    // view logic for better control over single regions.\n    getRegionManager: function() {\n      return new Marionette.RegionManager();\n    },\n  \n    // Internal method to initialize the regions that have been defined in a\n    // `regions` attribute on the application instance\n    _initializeRegions: function(options) {\n      var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};\n  \n      this._initRegionManager();\n  \n      // Enable users to define `regions` in instance options.\n      var optionRegions = Marionette.getOption(options, 'regions');\n  \n      // Enable region options to be a function\n      if (_.isFunction(optionRegions)) {\n        optionRegions = optionRegions.call(this, options);\n      }\n  \n      // Overwrite current regions with those passed in options\n      _.extend(regions, optionRegions);\n  \n      this.addRegions(regions);\n  \n      return this;\n    },\n  \n    // Internal method to set up the region manager\n    _initRegionManager: function() {\n      this._regionManager = this.getRegionManager();\n      this._regionManager._parent = this;\n  \n      this.listenTo(this._regionManager, 'before:add:region', function() {\n        Marionette._triggerMethod(this, 'before:add:region', arguments);\n      });\n  \n      this.listenTo(this._regionManager, 'add:region', function(name, region) {\n        this[name] = region;\n        Marionette._triggerMethod(this, 'add:region', arguments);\n      });\n  \n      this.listenTo(this._regionManager, 'before:remove:region', function() {\n        Marionette._triggerMethod(this, 'before:remove:region', arguments);\n      });\n  \n      this.listenTo(this._regionManager, 'remove:region', function(name) {\n        delete this[name];\n        Marionette._triggerMethod(this, 'remove:region', arguments);\n      });\n    },\n  \n    // Internal method to setup the Wreqr.radio channel\n    _initChannel: function() {\n      this.channelName = _.result(this, 'channelName') || 'global';\n      this.channel = _.result(this, 'channel') || Backbone.Wreqr.radio.channel(this.channelName);\n      this.vent = _.result(this, 'vent') || this.channel.vent;\n      this.commands = _.result(this, 'commands') || this.channel.commands;\n      this.reqres = _.result(this, 'reqres') || this.channel.reqres;\n    }\n  });\n  \n  /* jshint maxparams: 9 */\n  \n  // Module\n  // ------\n  \n  // A simple module system, used to create privacy and encapsulation in\n  // Marionette applications\n  Marionette.Module = function(moduleName, app, options) {\n    this.moduleName = moduleName;\n    this.options = _.extend({}, this.options, options);\n    // Allow for a user to overide the initialize\n    // for a given module instance.\n    this.initialize = options.initialize || this.initialize;\n  \n    // Set up an internal store for sub-modules.\n    this.submodules = {};\n  \n    this._setupInitializersAndFinalizers();\n  \n    // Set an internal reference to the app\n    // within a module.\n    this.app = app;\n  \n    if (_.isFunction(this.initialize)) {\n      this.initialize(moduleName, app, this.options);\n    }\n  };\n  \n  Marionette.Module.extend = Marionette.extend;\n  \n  // Extend the Module prototype with events / listenTo, so that the module\n  // can be used as an event aggregator or pub/sub.\n  _.extend(Marionette.Module.prototype, Backbone.Events, {\n  \n    // By default modules start with their parents.\n    startWithParent: true,\n  \n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic when extending Marionette.Module.\n    initialize: function() {},\n  \n    // Initializer for a specific module. Initializers are run when the\n    // module's `start` method is called.\n    addInitializer: function(callback) {\n      this._initializerCallbacks.add(callback);\n    },\n  \n    // Finalizers are run when a module is stopped. They are used to teardown\n    // and finalize any variables, references, events and other code that the\n    // module had set up.\n    addFinalizer: function(callback) {\n      this._finalizerCallbacks.add(callback);\n    },\n  \n    // Start the module, and run all of its initializers\n    start: function(options) {\n      // Prevent re-starting a module that is already started\n      if (this._isInitialized) { return; }\n  \n      // start the sub-modules (depth-first hierarchy)\n      _.each(this.submodules, function(mod) {\n        // check to see if we should start the sub-module with this parent\n        if (mod.startWithParent) {\n          mod.start(options);\n        }\n      });\n  \n      // run the callbacks to \"start\" the current module\n      this.triggerMethod('before:start', options);\n  \n      this._initializerCallbacks.run(options, this);\n      this._isInitialized = true;\n  \n      this.triggerMethod('start', options);\n    },\n  \n    // Stop this module by running its finalizers and then stop all of\n    // the sub-modules for this module\n    stop: function() {\n      // if we are not initialized, don't bother finalizing\n      if (!this._isInitialized) { return; }\n      this._isInitialized = false;\n  \n      this.triggerMethod('before:stop');\n  \n      // stop the sub-modules; depth-first, to make sure the\n      // sub-modules are stopped / finalized before parents\n      _.invoke(this.submodules, 'stop');\n  \n      // run the finalizers\n      this._finalizerCallbacks.run(undefined, this);\n  \n      // reset the initializers and finalizers\n      this._initializerCallbacks.reset();\n      this._finalizerCallbacks.reset();\n  \n      this.triggerMethod('stop');\n    },\n  \n    // Configure the module with a definition function and any custom args\n    // that are to be passed in to the definition function\n    addDefinition: function(moduleDefinition, customArgs) {\n      this._runModuleDefinition(moduleDefinition, customArgs);\n    },\n  \n    // Internal method: run the module definition function with the correct\n    // arguments\n    _runModuleDefinition: function(definition, customArgs) {\n      // If there is no definition short circut the method.\n      if (!definition) { return; }\n  \n      // build the correct list of arguments for the module definition\n      var args = _.flatten([\n        this,\n        this.app,\n        Backbone,\n        Marionette,\n        Backbone.$, _,\n        customArgs\n      ]);\n  \n      definition.apply(this, args);\n    },\n  \n    // Internal method: set up new copies of initializers and finalizers.\n    // Calling this method will wipe out all existing initializers and\n    // finalizers.\n    _setupInitializersAndFinalizers: function() {\n      this._initializerCallbacks = new Marionette.Callbacks();\n      this._finalizerCallbacks = new Marionette.Callbacks();\n    },\n  \n    // import the `triggerMethod` to trigger events with corresponding\n    // methods if the method exists\n    triggerMethod: Marionette.triggerMethod\n  });\n  \n  // Class methods to create modules\n  _.extend(Marionette.Module, {\n  \n    // Create a module, hanging off the app parameter as the parent object.\n    create: function(app, moduleNames, moduleDefinition) {\n      var module = app;\n  \n      // get the custom args passed in after the module definition and\n      // get rid of the module name and definition function\n      var customArgs = _.rest(arguments, 3);\n  \n      // Split the module names and get the number of submodules.\n      // i.e. an example module name of `Doge.Wow.Amaze` would\n      // then have the potential for 3 module definitions.\n      moduleNames = moduleNames.split('.');\n      var length = moduleNames.length;\n  \n      // store the module definition for the last module in the chain\n      var moduleDefinitions = [];\n      moduleDefinitions[length - 1] = moduleDefinition;\n  \n      // Loop through all the parts of the module definition\n      _.each(moduleNames, function(moduleName, i) {\n        var parentModule = module;\n        module = this._getModule(parentModule, moduleName, app, moduleDefinition);\n        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);\n      }, this);\n  \n      // Return the last module in the definition chain\n      return module;\n    },\n  \n    _getModule: function(parentModule, moduleName, app, def, args) {\n      var options = _.extend({}, def);\n      var ModuleClass = this.getClass(def);\n  \n      // Get an existing module of this name if we have one\n      var module = parentModule[moduleName];\n  \n      if (!module) {\n        // Create a new module if we don't have one\n        module = new ModuleClass(moduleName, app, options);\n        parentModule[moduleName] = module;\n        // store the module on the parent\n        parentModule.submodules[moduleName] = module;\n      }\n  \n      return module;\n    },\n  \n    // ## Module Classes\n    //\n    // Module classes can be used as an alternative to the define pattern.\n    // The extend function of a Module is identical to the extend functions\n    // on other Backbone and Marionette classes.\n    // This allows module lifecyle events like `onStart` and `onStop` to be called directly.\n    getClass: function(moduleDefinition) {\n      var ModuleClass = Marionette.Module;\n  \n      if (!moduleDefinition) {\n        return ModuleClass;\n      }\n  \n      // If all of the module's functionality is defined inside its class,\n      // then the class can be passed in directly. `MyApp.module(\"Foo\", FooModule)`.\n      if (moduleDefinition.prototype instanceof ModuleClass) {\n        return moduleDefinition;\n      }\n  \n      return moduleDefinition.moduleClass || ModuleClass;\n    },\n  \n    // Add the module definition and add a startWithParent initializer function.\n    // This is complicated because module definitions are heavily overloaded\n    // and support an anonymous function, module class, or options object\n    _addModuleDefinition: function(parentModule, module, def, args) {\n      var fn = this._getDefine(def);\n      var startWithParent = this._getStartWithParent(def, module);\n  \n      if (fn) {\n        module.addDefinition(fn, args);\n      }\n  \n      this._addStartWithParent(parentModule, module, startWithParent);\n    },\n  \n    _getStartWithParent: function(def, module) {\n      var swp;\n  \n      if (_.isFunction(def) && (def.prototype instanceof Marionette.Module)) {\n        swp = module.constructor.prototype.startWithParent;\n        return _.isUndefined(swp) ? true : swp;\n      }\n  \n      if (_.isObject(def)) {\n        swp = def.startWithParent;\n        return _.isUndefined(swp) ? true : swp;\n      }\n  \n      return true;\n    },\n  \n    _getDefine: function(def) {\n      if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {\n        return def;\n      }\n  \n      if (_.isObject(def)) {\n        return def.define;\n      }\n  \n      return null;\n    },\n  \n    _addStartWithParent: function(parentModule, module, startWithParent) {\n      module.startWithParent = module.startWithParent && startWithParent;\n  \n      if (!module.startWithParent || !!module.startWithParentIsConfigured) {\n        return;\n      }\n  \n      module.startWithParentIsConfigured = true;\n  \n      parentModule.addInitializer(function(options) {\n        if (module.startWithParent) {\n          module.start(options);\n        }\n      });\n    }\n  });\n  \n\n  return Marionette;\n}));\n","// Backbone.Wreqr (Backbone.Marionette)\n// ----------------------------------\n// v1.4.0\n//\n// Copyright (c)2016 Derick Bailey, Muted Solutions, LLC.\n// Distributed under MIT license\n//\n// http://github.com/marionettejs/backbone.wreqr\n\n\n(function(root, factory) {\n\n  if (typeof define === 'function' && define.amd) {\n    define(['backbone', 'underscore'], function(Backbone, _) {\n      return factory(Backbone, _);\n    });\n  } else if (typeof exports !== 'undefined') {\n    var Backbone = require('backbone');\n    var _ = require('underscore');\n    module.exports = factory(Backbone, _);\n  } else {\n    factory(root.Backbone, root._);\n  }\n\n}(this, function(Backbone, _) {\n  \"use strict\";\n\n  var previousWreqr = Backbone.Wreqr;\n\n  var Wreqr = Backbone.Wreqr = {};\n\n  Backbone.Wreqr.VERSION = '1.4.0';\n\n  Backbone.Wreqr.noConflict = function () {\n    Backbone.Wreqr = previousWreqr;\n    return this;\n  };\n\n  // Handlers\n  // --------\n  // A registry of functions to call, given a name\n  \n  Wreqr.Handlers = (function(Backbone, _){\n    \"use strict\";\n    \n    // Constructor\n    // -----------\n  \n    var Handlers = function(options){\n      this.options = options;\n      this._wreqrHandlers = {};\n      \n      if (_.isFunction(this.initialize)){\n        this.initialize(options);\n      }\n    };\n  \n    Handlers.extend = Backbone.Model.extend;\n  \n    // Instance Members\n    // ----------------\n  \n    _.extend(Handlers.prototype, Backbone.Events, {\n  \n      // Add multiple handlers using an object literal configuration\n      setHandlers: function(handlers){\n        _.each(handlers, _.bind(function(handler, name){\n          var context = null;\n  \n          if (_.isObject(handler) && !_.isFunction(handler)){\n            context = handler.context;\n            handler = handler.callback;\n          }\n  \n          this.setHandler(name, handler, context);\n        }, this));\n      },\n  \n      // Add a handler for the given name, with an\n      // optional context to run the handler within\n      setHandler: function(name, handler, context){\n        var config = {\n          callback: handler,\n          context: context\n        };\n  \n        this._wreqrHandlers[name] = config;\n  \n        this.trigger(\"handler:add\", name, handler, context);\n      },\n  \n      // Determine whether or not a handler is registered\n      hasHandler: function(name){\n        return !! this._wreqrHandlers[name];\n      },\n  \n      // Get the currently registered handler for\n      // the specified name. Throws an exception if\n      // no handler is found.\n      getHandler: function(name){\n        var config = this._wreqrHandlers[name];\n  \n        if (!config){\n          return;\n        }\n  \n        return function(){\n          return config.callback.apply(config.context, arguments);\n        };\n      },\n  \n      // Remove a handler for the specified name\n      removeHandler: function(name){\n        delete this._wreqrHandlers[name];\n      },\n  \n      // Remove all handlers from this registry\n      removeAllHandlers: function(){\n        this._wreqrHandlers = {};\n      }\n    });\n  \n    return Handlers;\n  })(Backbone, _);\n  \n  // Wreqr.CommandStorage\n  // --------------------\n  //\n  // Store and retrieve commands for execution.\n  Wreqr.CommandStorage = (function(){\n    \"use strict\";\n  \n    // Constructor function\n    var CommandStorage = function(options){\n      this.options = options;\n      this._commands = {};\n  \n      if (_.isFunction(this.initialize)){\n        this.initialize(options);\n      }\n    };\n  \n    // Instance methods\n    _.extend(CommandStorage.prototype, Backbone.Events, {\n  \n      // Get an object literal by command name, that contains\n      // the `commandName` and the `instances` of all commands\n      // represented as an array of arguments to process\n      getCommands: function(commandName){\n        var commands = this._commands[commandName];\n  \n        // we don't have it, so add it\n        if (!commands){\n  \n          // build the configuration\n          commands = {\n            command: commandName, \n            instances: []\n          };\n  \n          // store it\n          this._commands[commandName] = commands;\n        }\n  \n        return commands;\n      },\n  \n      // Add a command by name, to the storage and store the\n      // args for the command\n      addCommand: function(commandName, args){\n        var command = this.getCommands(commandName);\n        command.instances.push(args);\n      },\n  \n      // Clear all commands for the given `commandName`\n      clearCommands: function(commandName){\n        var command = this.getCommands(commandName);\n        command.instances = [];\n      }\n    });\n  \n    return CommandStorage;\n  })();\n  \n  // Wreqr.Commands\n  // --------------\n  //\n  // A simple command pattern implementation. Register a command\n  // handler and execute it.\n  Wreqr.Commands = (function(Wreqr, _){\n    \"use strict\";\n  \n    return Wreqr.Handlers.extend({\n      // default storage type\n      storageType: Wreqr.CommandStorage,\n  \n      constructor: function(options){\n        this.options = options || {};\n  \n        this._initializeStorage(this.options);\n        this.on(\"handler:add\", this._executeCommands, this);\n  \n        Wreqr.Handlers.prototype.constructor.apply(this, arguments);\n      },\n  \n      // Execute a named command with the supplied args\n      execute: function(name){\n        name = arguments[0];\n        var args = _.rest(arguments);\n  \n        if (this.hasHandler(name)){\n          this.getHandler(name).apply(this, args);\n        } else {\n          this.storage.addCommand(name, args);\n        }\n  \n      },\n  \n      // Internal method to handle bulk execution of stored commands\n      _executeCommands: function(name, handler, context){\n        var command = this.storage.getCommands(name);\n  \n        // loop through and execute all the stored command instances\n        _.each(command.instances, function(args){\n          handler.apply(context, args);\n        });\n  \n        this.storage.clearCommands(name);\n      },\n  \n      // Internal method to initialize storage either from the type's\n      // `storageType` or the instance `options.storageType`.\n      _initializeStorage: function(options){\n        var storage;\n  \n        var StorageType = options.storageType || this.storageType;\n        if (_.isFunction(StorageType)){\n          storage = new StorageType();\n        } else {\n          storage = StorageType;\n        }\n  \n        this.storage = storage;\n      }\n    });\n  \n  })(Wreqr, _);\n  \n  // Wreqr.RequestResponse\n  // ---------------------\n  //\n  // A simple request/response implementation. Register a\n  // request handler, and return a response from it\n  Wreqr.RequestResponse = (function(Wreqr, _){\n    \"use strict\";\n  \n    return Wreqr.Handlers.extend({\n      request: function(name){\n        if (this.hasHandler(name)) {\n          return this.getHandler(name).apply(this, _.rest(arguments));\n        }\n      }\n    });\n  \n  })(Wreqr, _);\n  \n  // Event Aggregator\n  // ----------------\n  // A pub-sub object that can be used to decouple various parts\n  // of an application through event-driven architecture.\n  \n  Wreqr.EventAggregator = (function(Backbone, _){\n    \"use strict\";\n    var EA = function(){};\n  \n    // Copy the `extend` function used by Backbone's classes\n    EA.extend = Backbone.Model.extend;\n  \n    // Copy the basic Backbone.Events on to the event aggregator\n    _.extend(EA.prototype, Backbone.Events);\n  \n    return EA;\n  })(Backbone, _);\n  \n  // Wreqr.Channel\n  // --------------\n  //\n  // An object that wraps the three messaging systems:\n  // EventAggregator, RequestResponse, Commands\n  Wreqr.Channel = (function(Wreqr){\n    \"use strict\";\n  \n    var Channel = function(channelName) {\n      this.vent        = new Backbone.Wreqr.EventAggregator();\n      this.reqres      = new Backbone.Wreqr.RequestResponse();\n      this.commands    = new Backbone.Wreqr.Commands();\n      this.channelName = channelName;\n    };\n  \n    _.extend(Channel.prototype, {\n  \n      // Remove all handlers from the messaging systems of this channel\n      reset: function() {\n        this.vent.off();\n        this.vent.stopListening();\n        this.reqres.removeAllHandlers();\n        this.commands.removeAllHandlers();\n        return this;\n      },\n  \n      // Connect a hash of events; one for each messaging system\n      connectEvents: function(hash, context) {\n        this._connect('vent', hash, context);\n        return this;\n      },\n  \n      connectCommands: function(hash, context) {\n        this._connect('commands', hash, context);\n        return this;\n      },\n  \n      connectRequests: function(hash, context) {\n        this._connect('reqres', hash, context);\n        return this;\n      },\n  \n      // Attach the handlers to a given message system `type`\n      _connect: function(type, hash, context) {\n        if (!hash) {\n          return;\n        }\n  \n        context = context || this;\n        var method = (type === 'vent') ? 'on' : 'setHandler';\n  \n        _.each(hash, _.bind(function(fn, eventName) {\n          this[type][method](eventName, _.bind(fn, context));\n        }, this));\n      }\n    });\n  \n  \n    return Channel;\n  })(Wreqr);\n  \n  // Wreqr.Radio\n  // --------------\n  //\n  // An object that lets you communicate with many channels.\n  Wreqr.radio = (function(Wreqr, _){\n    \"use strict\";\n  \n    var Radio = function() {\n      this._channels = {};\n      this.vent = {};\n      this.commands = {};\n      this.reqres = {};\n      this._proxyMethods();\n    };\n  \n    _.extend(Radio.prototype, {\n  \n      channel: function(channelName) {\n        if (!channelName) {\n          throw new Error('Channel must receive a name');\n        }\n  \n        return this._getChannel( channelName );\n      },\n  \n      _getChannel: function(channelName) {\n        var channel = this._channels[channelName];\n  \n        if(!channel) {\n          channel = new Wreqr.Channel(channelName);\n          this._channels[channelName] = channel;\n        }\n  \n        return channel;\n      },\n  \n      _proxyMethods: function() {\n        _.each(['vent', 'commands', 'reqres'], _.bind(function(system) {\n          _.each( messageSystems[system], _.bind(function(method) {\n            this[system][method] = proxyMethod(this, system, method);\n          }, this));\n        }, this));\n      }\n    });\n  \n  \n    var messageSystems = {\n      vent: [\n        'on',\n        'off',\n        'trigger',\n        'once',\n        'stopListening',\n        'listenTo',\n        'listenToOnce'\n      ],\n  \n      commands: [\n        'execute',\n        'setHandler',\n        'setHandlers',\n        'removeHandler',\n        'removeAllHandlers'\n      ],\n  \n      reqres: [\n        'request',\n        'setHandler',\n        'setHandlers',\n        'removeHandler',\n        'removeAllHandlers'\n      ]\n    };\n  \n    var proxyMethod = function(radio, system, method) {\n      return function(channelName) {\n        var messageSystem = radio._getChannel(channelName)[system];\n  \n        return messageSystem[method].apply(messageSystem, _.rest(arguments));\n      };\n    };\n  \n    return new Radio();\n  \n  })(Wreqr, _);\n  \n\n  return Backbone.Wreqr;\n\n}));\n"],"sourceRoot":""}