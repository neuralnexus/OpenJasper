{"version":3,"sources":["webpack://jrs-ui/../bi-report/src/bi/report/jive/model/ColumnComponentModel.js"],"names":["localLogger","logger","sortingToSchemaFormat","this","get","order","filteringToSchemaFormat","filterValueInBetweenIsUnderfinedOrNull","_","fieldValueStart","filterData","undefined","fieldValueEnd","jiveDataConverter","set","parent","config","genericProperties","silent","operator","value","onHeadingChange","headingFormat","name","size","bold","italic","underline","color","charAt","toUpperCase","slice","BaseComponentModel","api","sort","move","format","filter","hide","unhide","resize","defaults","canFilter","canFormatConditionally","canFormatHeading","canSort","clearData","columnIndex","columnLabel","conditionalFormattingData","dataType","filtering","headerToolbar","headingsTabContent","id","parentId","proxySelector","selector","module","type","jiveTypes","valuesTabContent","sortOrder","filterOperator","filterValue","constructor","detailsRowFormat","FormatModel","conditions","ConditionCollection","arguments","initialize","events","ACTION_PERFORMED","BEFORE_ACTION_PERFORMED","parse","attachEvents","listenTo","trigger","on","hasChanged","conditionPattern","reset","parms","it","payload","action","sortData","tableUuid","_notify","reportEvents","actionName","moveColumnData","columnToMoveIndex","columnToMoveNewIndex","index","showErrorDialog","$","columnData","columnIndexes","columnIds","resizeColumnData","direction","width","response","sortAscBtn","sortDescBtn","ascBtnSortOrder","dscBtnSortOrder","filterTypeOperator","filterPattern","clearFilter","obj","actions","sortColumnName","sortColumnType","isClearFilter","filterType","filterValueDataType","fieldName","localeCode","timeZoneId","isField","toJiveFormat","conditionType","map","conditionModel","toReportComponentObject","columns","thisColumnProps","uuid","interactive","componentType","interactiveComponentTypes","label","call","toJSON","updateFromReportComponentObject","setterObj","length","warn","font","backgroundColor","pattern"],"mappings":"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","file":"_chunks/chunk.9159.js","sourcesContent":["/*\n * Copyright (C) 2005 - 2022 TIBCO Software Inc. All rights reserved. Confidentiality & Proprietary.\n * Licensed pursuant to commercial TIBCO End User License Agreement.\n */\n\nimport BaseComponentModel from './BaseComponentModel';\nimport FormatModel from './FormatModel';\nimport jiveTypes from '../enum/jiveTypes';\nimport $ from 'jquery';\nimport _ from 'underscore';\nimport ConditionCollection from '../collection/ConditionCollection';\nimport interactiveComponentTypes from '../enum/interactiveComponentTypes';\nimport reportEvents from '../../enum/reportEvents';\nimport jiveDataConverter from '../util/jiveDataConverter';\n\nimport logger from \"js-sdk/src/common/logging/logger\";\n\nlet localLogger = logger.register(\"ColumnComponentModel\");\n\nfunction sortingToSchemaFormat() {\n    if (this.get('canSort')) {\n        if (this.get('sortOrder')) {\n            return { order: this.get('sortOrder') };\n        } else {\n            return {};\n        }\n    }\n    return undefined;\n}\nfunction filteringToSchemaFormat() {\n    if (this.get('canFilter')) {\n        // checking whether filterValue is set, we need to prevent an updated value getting overwritten by the original filterData\n        var filterValueInBetweenIsUnderfinedOrNull = _.isArray(this.get('filterValue')) && !_.every(this.get('filterValue'));\n        if (_.isUndefined(this.get('filterValue')) || _.isNull(this.get('filterValue')) || filterValueInBetweenIsUnderfinedOrNull) {\n            var fieldValueStart = this.get('filtering') ? this.get('filtering').filterData.fieldValueStart : undefined, fieldValueEnd = this.get('filtering') ? this.get('filtering').filterData.fieldValueEnd : undefined;    // TODO: optimize this\n            // dirty hack to update date/time filter after we already have settings from table\n            // TODO: optimize this\n            // dirty hack to update date/time filter after we already have settings from table\n            if (jiveDataConverter.dataTypeToSchemaFormat[this.get('dataType')] === 'datetime') {\n                if ((this.get('filterOperator') === 'between' || this.get('filterOperator') === 'not_between') && fieldValueStart != null && fieldValueEnd != null) {\n                    this.set('filterValue', [\n                        jiveDataConverter.jQueryUiTimestampToIsoTimestamp(fieldValueStart, this.parent && this.parent.config ? this.parent.config.genericProperties : undefined),\n                        jiveDataConverter.jQueryUiTimestampToIsoTimestamp(fieldValueEnd, this.parent && this.parent.config ? this.parent.config.genericProperties : undefined)\n                    ], { silent: true });\n                } else if (fieldValueStart != null) {\n                    this.set('filterValue', jiveDataConverter.jQueryUiTimestampToIsoTimestamp(fieldValueStart, this.parent && this.parent.config ? this.parent.config.genericProperties : undefined), { silent: true });\n                }\n            } else if (jiveDataConverter.dataTypeToSchemaFormat[this.get('dataType')] === 'time') {\n                if ((this.get('filterOperator') === 'between' || this.get('filterOperator') === 'not_between') && fieldValueStart != null && fieldValueEnd != null) {\n                    this.set('filterValue', [\n                        jiveDataConverter.jQueryUiTimeToIsoTime(fieldValueStart, this.parent && this.parent.config ? this.parent.config.genericProperties : undefined),\n                        jiveDataConverter.jQueryUiTimeToIsoTime(fieldValueEnd, this.parent && this.parent.config ? this.parent.config.genericProperties : undefined)\n                    ], { silent: true });\n                } else if (fieldValueStart != null) {\n                    this.set('filterValue', jiveDataConverter.jQueryUiTimeToIsoTime(fieldValueStart, this.parent && this.parent.config ? this.parent.config.genericProperties : undefined), { silent: true });\n                }\n            }\n        }\n        if (this.get('filterOperator') != null && this.get('filterValue') != null) {\n            return {\n                operator: this.get('filterOperator'),\n                value: this.get('filterValue')\n            };\n        } else {\n            return {};\n        }\n    }\n    return undefined;\n}\nfunction onHeadingChange() {\n    return {\n        'actionName': 'editTextElement',\n        'editTextElementData': {\n            'applyTo': 'heading',\n            'tableUuid': this.get('parentId'),\n            'columnIndex': this.get('columnIndex'),\n            'headingName': this.get('columnLabel'),\n            'fontName': this.headingFormat.get('font').name,\n            'fontSize': this.headingFormat.get('font').size,\n            'fontBold': this.headingFormat.get('font').bold,\n            'fontItalic': this.headingFormat.get('font').italic,\n            'fontUnderline': this.headingFormat.get('font').underline,\n            'fontColor': this.headingFormat.get('font').color,\n            'fontHAlign': this.headingFormat.get('align').charAt(0).toUpperCase() + this.headingFormat.get('align').slice(1),\n            'fontBackColor': this.headingFormat.get('backgroundColor') === 'transparent' ? '000000' : this.headingFormat.get('backgroundColor'),\n            'mode': this.headingFormat.get('backgroundColor') === 'transparent' ? 'Transparent' : 'Opaque'\n        }\n    };\n}\nexport default BaseComponentModel.extend({\n    api: {\n        sort: {},\n        move: {},\n        format: {},\n        filter: {},\n        hide: {},\n        unhide: {},\n        resize: {}\n    },\n    defaults: function () {\n        return {\n            canFilter: false,\n            canFormatConditionally: false,\n            canFormatHeading: false,\n            canSort: false,\n            clearData: {},\n            columnIndex: 0,\n            columnLabel: '',\n            conditionalFormattingData: {},\n            dataType: undefined,\n            filterData: {},\n            filtering: {},\n            headerToolbar: {},\n            headingsTabContent: {},\n            id: null,\n            parentId: null,\n            proxySelector: null,\n            selector: null,\n            module: 'jive.interactive.column',\n            type: jiveTypes.COLUMN,\n            valuesTabContent: {},\n            sortOrder: undefined,\n            filterOperator: undefined,\n            filterValue: undefined\n        };\n    },\n    constructor: function () {\n        this.detailsRowFormat = new FormatModel();\n        this.conditions = new ConditionCollection();\n        BaseComponentModel.prototype.constructor.apply(this, arguments);\n    },\n    initialize: function (config) {\n        this.config = config;\n        this.events = {\n            ACTION_PERFORMED: 'action',\n            BEFORE_ACTION_PERFORMED: 'beforeAction'\n        };\n        if (this.get('canFormatHeading')) {\n            this.headingFormat = new FormatModel(this.get('headingsTabContent'), {\n                parse: true,\n                silent: true\n            });\n        }\n        this.attachEvents();\n    },\n    attachEvents: function () {\n        this.headingFormat && this.listenTo(this.headingFormat, 'change', function () {\n            this.trigger('change:headingFormat', this);\n        }, this);\n        this.listenTo(this.detailsRowFormat, 'change', function () {\n            this.trigger('change:detailsRowFormat', this);\n        }, this);\n        this.listenTo(this.conditions, 'reset', function () {\n            this.trigger('change:conditions', this);\n        }, this);\n        this.on('change', function () {\n            if (this.hasChanged('filterValue') || this.hasChanged('filterOperator')) {\n                this.trigger('change:filter', this);\n            }\n        }, this);\n        this.on('parentTableComponentAttached', function () {\n            if (this.config.conditionalFormattingData) {\n                this.conditions.dataType = jiveDataConverter.dataTypeToSchemaFormat[this.config.dataType];\n                this.conditions.conditionPattern = this.config.conditionalFormattingData.conditionPattern;\n                this.conditions.parent = this;\n                this.conditions.reset(this.config.conditionalFormattingData.conditions, {\n                    silent: true,\n                    parse: true\n                });\n            }\n        });\n    },\n    sort: function (parms) {\n        var it = this, payload = { action: this.config.headerToolbar['sort' + parms.order + 'Btn'].sortData };\n        payload.action.sortData.tableUuid = it.config.parentId;\n        it._notify({ name: it.events.BEFORE_ACTION_PERFORMED });\n        it.trigger(reportEvents.ACTION, payload.action);\n    },\n    move: function (parms) {\n        var it = this, payload = {\n            action: {\n                actionName: 'move',\n                moveColumnData: {\n                    tableUuid: it.config.parentId,\n                    columnToMoveIndex: it.config.columnIndex,\n                    columnToMoveNewIndex: parms.index\n                }\n            }\n        };\n        it._notify({ name: it.events.BEFORE_ACTION_PERFORMED });\n        it.trigger(reportEvents.ACTION, payload.action);\n    },\n    format: function (parms) {\n        var it = this, payload = { action: parms };\n        it._notify({ name: it.events.BEFORE_ACTION_PERFORMED });\n        it.trigger(reportEvents.ACTION, payload.action, { showErrorDialog: true });\n    },\n    filter: function (parms) {\n        var it = this, filterParms = $.extend({}, it.config.filtering.filterData, parms), payload = {\n            action: {\n                actionName: 'filter',\n                filterData: filterParms\n            }\n        };\n        it._notify({ name: it.events.BEFORE_ACTION_PERFORMED });\n        it.trigger(reportEvents.ACTION, payload.action, { showErrorDialog: true });\n    },\n    hide: function () {\n        var it = this, payload = {\n            action: {\n                actionName: 'hideUnhideColumns',\n                columnData: {\n                    tableUuid: it.config.parentId,\n                    hide: true,\n                    columnIndexes: [this.config.columnIndex]\n                }\n            }\n        };\n        it._notify({ name: it.events.BEFORE_ACTION_PERFORMED });\n        it.trigger(reportEvents.ACTION, payload.action);\n    },\n    unhide: function (columnIds) {\n        var it = this, payload = {\n            action: {\n                actionName: 'hideUnhideColumns',\n                columnData: {\n                    tableUuid: it.config.parentId,\n                    hide: false,\n                    columnIndexes: columnIds ? columnIds : [this.config.columnIndex]\n                }\n            }\n        };\n        it._notify({ name: it.events.BEFORE_ACTION_PERFORMED });\n        it.trigger(reportEvents.ACTION, payload.action);\n    },\n    resize: function (parms) {\n        var it = this, payload = {\n            action: {\n                actionName: 'resize',\n                resizeColumnData: {\n                    tableUuid: it.config.parentId,\n                    columnIndex: this.config.columnIndex,\n                    direction: 'right',\n                    width: parms.width\n                }\n            }\n        };\n        it._notify({ name: it.events.BEFORE_ACTION_PERFORMED });\n        it.trigger(reportEvents.ACTION, payload.action);\n    },\n    parse: function (response) {\n        if (response.headerToolbar && response.headerToolbar.sortAscBtn && response.headerToolbar.sortDescBtn) {\n            var ascBtnSortOrder = response.headerToolbar.sortAscBtn.sortData.sortData.sortOrder, dscBtnSortOrder = response.headerToolbar.sortDescBtn.sortData.sortData.sortOrder, sortOrder;\n            if (ascBtnSortOrder === 'None') {\n                sortOrder = 'asc';\n            } else if (dscBtnSortOrder === 'None') {\n                sortOrder = 'desc';\n            }\n            response.sortOrder = sortOrder;\n        }\n        if (response.filtering && response.filtering.filterData) {\n            var dataType = jiveDataConverter.dataTypeToSchemaFormat[response.dataType], operator = response.filtering.filterData.filterTypeOperator, fieldValueStart = response.filtering.filterData.fieldValueStart, fieldValueEnd = response.filtering.filterData.fieldValueEnd, filterPattern = response.filtering.filterData.filterPattern;\n            if (response.filtering.filterData.clearFilter || fieldValueStart == null && operator == null) {\n                response.filterOperator = undefined;\n                response.filterValue = undefined;\n            } else {\n                var obj = jiveDataConverter.operatorAndValueToSchemaFormat(operator, dataType, fieldValueStart, fieldValueEnd, filterPattern);\n                response.filterOperator = obj.operator;\n                response.filterValue = obj.value;\n            }\n        }\n        if (response.headingsTabContent) {\n            response.canFormatHeading = true;\n        } else {\n            response.canFormatHeading = false;\n        }\n        if (response.valuesTabContent) {\n            this.detailsRowFormat.dataType = jiveDataConverter.dataTypeToSchemaFormat[response.dataType];\n            this.detailsRowFormat.set(this.detailsRowFormat.parse(response.valuesTabContent), { silent: true });\n        }\n        if (response.columnLabel) {\n            response.columnLabel = _.unescape(response.columnLabel);\n        }\n        return response;\n    },\n    actions: {\n        'change:sortOrder': function () {\n            var sortColumnName = this.get('headerToolbar').sortAscBtn.sortData.sortData.sortColumnName, sortColumnType = this.get('headerToolbar').sortAscBtn.sortData.sortData.sortColumnType, sortOrder;\n            switch (this.get('sortOrder')) {\n            case 'asc':\n                sortOrder = 'Asc';\n                break;\n            case 'desc':\n                sortOrder = 'Dsc';\n                break;\n            default:\n                sortOrder = 'None';\n                break;\n            }\n            return {\n                'actionName': 'sort',\n                'sortData': {\n                    'sortColumnName': sortColumnName,\n                    'sortColumnType': sortColumnType,\n                    'sortOrder': sortOrder,\n                    'tableUuid': this.get('parentId')\n                }\n            };\n        },\n        'change:filter': function () {\n            var filterOperator = this.get('filterOperator');\n            var filterValue = this.get('filterValue');\n            var isClearFilter = filterValue == null && filterOperator == null;\n            var filterData = this.get('filtering').filterData;\n            var filterType = this.get('dataType');\n            var filterValueDataType = jiveDataConverter.dataTypeToSchemaFormat[filterType];\n            var genericProperties = this.parent && this.parent.config ? this.parent.config.genericProperties : undefined;\n            var filterStartValue = jiveDataConverter.filterStartValue(filterOperator, filterValue, filterValueDataType, genericProperties);\n            var filterEndValue = jiveDataConverter.filterEndValue(filterOperator, filterValue, filterValueDataType, genericProperties);\n            var filterTypeOperator = jiveDataConverter.schemaFormatOperatorToFilterOperator(filterOperator, filterValue, filterValueDataType);\n            return {\n                'actionName': 'filter',\n                'filterData': {\n                    'fieldValueStart': filterStartValue,\n                    'fieldValueEnd': filterEndValue,\n                    'filterTypeOperator': filterTypeOperator,\n                    'clearFilter': isClearFilter,\n                    'filterPattern': filterData.filterPattern,\n                    'fieldName': filterData.fieldName,\n                    'localeCode': filterData.localeCode,\n                    'timeZoneId': filterData.timeZoneId,\n                    'isField': filterData.isField,\n                    'tableUuid': this.get('parentId'),\n                    'filterType': filterType\n                }\n            };\n        },\n        'change:headingFormat': onHeadingChange,\n        'change:columnLabel': onHeadingChange,\n        'change:detailsRowFormat': function () {\n            return {\n                'actionName': 'editTextElement',\n                'editTextElementData': {\n                    'applyTo': 'detailrows',\n                    'tableUuid': this.get('parentId'),\n                    'columnIndex': this.get('columnIndex'),\n                    'fontName': this.detailsRowFormat.get('font').name,\n                    'fontSize': this.detailsRowFormat.get('font').size,\n                    'fontBold': this.detailsRowFormat.get('font').bold,\n                    'fontItalic': this.detailsRowFormat.get('font').italic,\n                    'fontUnderline': this.detailsRowFormat.get('font').underline,\n                    'fontColor': this.detailsRowFormat.get('font').color,\n                    'formatPattern': this.detailsRowFormat.toJiveFormat(),\n                    'fontHAlign': this.detailsRowFormat.get('align').charAt(0).toUpperCase() + this.detailsRowFormat.get('align').slice(1),\n                    'fontBackColor': this.detailsRowFormat.get('backgroundColor') === 'transparent' ? '000000' : this.detailsRowFormat.get('backgroundColor'),\n                    'mode': this.detailsRowFormat.get('backgroundColor') === 'transparent' ? 'Transparent' : 'Opaque'\n                }\n            };\n        },\n        'change:conditions': function () {\n            var genericProperties = this.parent && this.parent.config ? this.parent.config.genericProperties : undefined;\n            return {\n                'actionName': 'conditionalFormatting',\n                'conditionalFormattingData': {\n                    'applyTo': 'detailrows',\n                    'tableUuid': this.get('parentId'),\n                    'columnIndex': this.get('columnIndex'),\n                    'conditionPattern': this.get('conditionalFormattingData').conditionPattern,\n                    'conditionType': this.get('conditionalFormattingData').conditionType,\n                    'conditions': this.conditions.map(function (conditionModel) {\n                        return conditionModel.toJiveFormat(genericProperties);\n                    })\n                }\n            };\n        }\n    },\n    toReportComponentObject: function () {\n        var columns = this.parent.get('allColumnsData');\n        if (columns) {\n            var thisColumnProps = _.findWhere(columns, { uuid: this.get('id') });\n            if (thisColumnProps) {\n                if (!thisColumnProps.interactive) {\n                    return undefined;\n                } else {\n                    return {\n                        id: this.get('id'),\n                        componentType: interactiveComponentTypes.TABLE_COLUMN,\n                        dataType: jiveDataConverter.dataTypeToSchemaFormat[this.get('dataType')],\n                        label: this.get('columnLabel'),\n                        name: this.get('name'),\n                        sort: sortingToSchemaFormat.call(this),\n                        filter: filteringToSchemaFormat.call(this),\n                        headingFormat: this.get('canFormatHeading') ? this.headingFormat.toJSON() : undefined,\n                        detailsRowFormat: this.detailsRowFormat.toJSON(),\n                        conditions: this.get('canFormatConditionally') ? this.conditions.toJSON() : undefined\n                    };\n                }\n            }\n        }\n        return undefined;\n    },\n    updateFromReportComponentObject: function (obj) {\n        var setterObj = {};\n        if (obj.sort) {\n            if (this.get('canSort')) {\n                if ('order' in obj.sort) {\n                    setterObj.sortOrder = obj.sort.order;\n                } else if (_.keys(obj.sort).length === 0) {\n                    setterObj.sortOrder = undefined;\n                }\n            } else {\n                localLogger.warn('The column cannot be sorted!');\n            }\n        }\n        if (obj.filter) {\n            if (this.get('canFilter')) {\n                if (_.keys(obj.filter).length === 0 || obj.filter.operator == null) {\n                    setterObj.filterOperator = undefined;\n                    setterObj.filterValue = undefined;\n                } else {\n                    setterObj.filterOperator = obj.filter.operator;\n                    setterObj.filterValue = obj.filter.value;\n                }\n            } else {\n                localLogger.warn('The column cannot be filtered!');\n            }\n        }\n        if (obj.label != null) {\n            if (this.get('canFormatHeading')) {\n                setterObj.columnLabel = obj.label;\n            } else {\n                localLogger.warn('The column label cannot be modified!');\n            }\n        }\n        if (obj.headingFormat) {\n            if (this.get('canFormatHeading')) {\n                obj.headingFormat.font = _.extend({}, this.headingFormat.get('font'), obj.headingFormat.font || {});\n                if (obj.headingFormat.backgroundColor && obj.headingFormat.backgroundColor !== 'transparent') {\n                    obj.headingFormat.backgroundColor = obj.headingFormat.backgroundColor.toUpperCase();\n                }\n                if (obj.headingFormat.font && obj.headingFormat.font.color) {\n                    obj.headingFormat.font.color = obj.headingFormat.font.color.toUpperCase();\n                }\n                this.headingFormat.set(obj.headingFormat);\n            } else {\n                localLogger.warn('The column heading cannot be modified!');\n            }\n        }\n        if (obj.detailsRowFormat) {\n            obj.detailsRowFormat.font = _.extend({}, this.detailsRowFormat.get('font'), obj.detailsRowFormat.font || {});\n            if (_.isObject(this.detailsRowFormat.get('pattern'))) {\n                if (!('Numeric' === this.get('dataType') && jiveDataConverter.DURATION_PATTERN === obj.detailsRowFormat.pattern)) {\n                    obj.detailsRowFormat.pattern = _.extend({}, this.detailsRowFormat.get('pattern'), obj.detailsRowFormat.pattern || {});\n                }\n            }\n            if (obj.detailsRowFormat.backgroundColor && obj.detailsRowFormat.backgroundColor !== 'transparent') {\n                obj.detailsRowFormat.backgroundColor = obj.detailsRowFormat.backgroundColor.toUpperCase();\n            }\n            if (obj.detailsRowFormat.font && obj.detailsRowFormat.font.color) {\n                obj.detailsRowFormat.font.color = obj.detailsRowFormat.font.color.toUpperCase();\n            }\n            this.detailsRowFormat.set(obj.detailsRowFormat);\n        }\n        if (obj.conditions) {\n            if (this.get('canFormatConditionally')) {\n                if (!(obj.conditions.length === 0 && this.conditions.length === 0)) {\n                    this.conditions.reset(obj.conditions);\n                }\n            } else {\n                localLogger.warn('The column cannot be formatted conditionally!');\n            }\n        }\n        this.set(setterObj);\n    }\n});"],"sourceRoot":""}