#########################################################
# Jaspersoft Security Configuration
#########################################################

# Turns request parameter validation on or off.
security.validation.input.on=true
# Turns CSRF attack guard on or off.
security.validation.csrf.on=true
# Turns sql validation on or off.
security.validation.sql.on=true

# RegExp to remove comments from SQL before validation. Removal of the
# comments before validation simplifies validSQL expression in
# validation.properties.   This property is optional.  If not specified, no
# comments would be removed from SQL queries: validSQL expression would have
# to account for possible comments in the query.
security.validation.sql.comments.regexp=(?:/\\*.*?\\*/)|(?:--.*?$)|(?:\\#.*?$)

# Turns encryption of encryption.param's defined below on or off.
encryption.on=false

# ENCRYPTION CONFIGURATION
# encryption.dynamic.key=true means that the 1 key will be generated per every single request.
# If 'false', the key will be drawn from a keystore (see KEYSTORE group below)
encryption.dynamic.key=true

# ENCRYPTION KEY GENERATION PARAMS
# RSA is the only encryption algorithm implemented so far
encryption.type=RSA
encryption.key.length=1024


# ENCRYPTED PARAMETERS
# In order for parameters to be encrypted, their property name should start with 'encryption.param.'
# The general convention for param name is encryption.param.[application area].
encryption.param.login=j_password
encryption.param.login.changePassword1=j_newpassword1
encryption.param.login.changePassword2=j_newpassword2
encryption.param.user.mgmt=entity.password

# KEYSTORE
# The following properties are used only when encryption.dynamic.key=false and encryption.on=true
# These properties configure the keystore housing the private-public encryption key pair.
#
# If you wish to generate your own keystore file with your own password, use 'keytool'
# java utility (Reference:  http://docs.oracle.com/javase/6/docs/technotes/tools/windows/keytool.html).
# 'keytool' is the master tool for keystore management.  It comes with jre/jdk (bin dir.).
#
# keystore.location can be on a classpath or an external-to-webapp file
keystore.location=keystore.jks
# password to verify keystore integrity
keystore.password=jasper123
# key pair alias used to retrieve correct key from keystore
keystore.key.alias=jasper
# keystore.key.alias's password
keystore.key.password=jasper321

# Logging message configuration in SecurityConfiguration class
log.msg.security.off=SECURITY for [%s] is OFF
msg.no.rule=No rule for parameter [%s]. Using default validation on input=[%s].
msg.cannot.load=Security configuration [%s] cannot be loaded.
