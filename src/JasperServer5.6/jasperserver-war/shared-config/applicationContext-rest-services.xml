<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
    <!-- REST v.2-->
    <context:component-scan base-package="com.jaspersoft.jasperserver.jaxrs, com.jaspersoft.jasperserver.rest">
        <context:exclude-filter type="regex" expression=".*UserWorkflowStorage"/>
    </context:component-scan>

    <alias name="${bean.configurationAllowedRoles}" alias="configurationAllowedRoles"/>

    <bean id="userWorkflowStorage" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interceptorNames">
            <list>
                <idref bean="filterOutNotPermittedWorkflows"/>
                <idref bean="userWorkflowStorageTarget"/>
            </list>
        </property>
    </bean>

    <bean id="filterOutNotPermittedWorkflows"
          class="org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor">
        <property name="authenticationManager">
            <ref bean="authenticationManager"/>
        </property>
        <property name="afterInvocationManager">
            <ref local="workflowsAfterInvocationManager"/>
        </property>
        <property name="accessDecisionManager">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.service.EmptyAccessDecisionManager"/>
        </property>

        <property name="objectDefinitionSource">
            <value>
                com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.data.UserWorkflowStorage.findByName=ADMINISTRATION_ALLOWED,CONFIGURATION_ALLOWED
                com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.data.UserWorkflowStorage.findAll=ADMINISTRATION_ALLOWED,CONFIGURATION_ALLOWED
                com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.data.UserWorkflowStorage.findAllByParentName=ADMINISTRATION_ALLOWED,CONFIGURATION_ALLOWED
            </value>
        </property>
    </bean>

    <bean id="workflowsAfterInvocationManager" class="org.springframework.security.afterinvocation.AfterInvocationProviderManager">
        <property name="providers">
            <list>
                <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.service.WorkflowsSecurityFilter">
                    <property name="supportedAttribute" value="CONFIGURATION_ALLOWED"/>
                    <property name="allowedRoles" ref="configurationAllowedRoles"/>
                    <property name="workflowsToSecure">
                        <list>
                            <value>serverSettings</value>
                        </list>
                    </property>
                </bean>
                <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.service.WorkflowsSecurityFilter">
                    <property name="supportedAttribute" value="ADMINISTRATION_ALLOWED"/>
                    <property name="allowedRoles" ref="${bean.administrationAllowedRoles}"/>
                    <property name="workflowsToSecure">
                        <list>
                            <value>admin</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="userWorkflowStorageTarget" class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.data.UserWorkflowStorage"/>

    <bean id="rolesJaxrsService" class="com.jaspersoft.jasperserver.jaxrs.authority.RolesJaxrsService">
        <property name="service" ref="${bean.userAndRoleService}" />
    </bean>
    <bean id="usersJaxrsService"  class="com.jaspersoft.jasperserver.jaxrs.authority.UsersJaxrsService">
        <property name="service" ref="${bean.userAndRoleService}" />
        <property name="attributesService" ref="${bean.userAttributesService}"/>

        <property name="maxLengthAttrName">
            <value type="int">255</value>
        </property>
        <property name="maxLengthAttrValue">
            <value type="int">255</value>
        </property>
    </bean>

    <alias name="${bean.permissionsRecipientIdentityResolver}" alias="concretePermissionsRecipientIdentityResolver"/>

    <util:map id="protocolMapping">
        <entry key="user">
            <value type="java.lang.Class">com.jaspersoft.jasperserver.api.metadata.user.domain.User</value>
        </entry>
        <entry key="role">
            <value type="java.lang.Class">com.jaspersoft.jasperserver.api.metadata.user.domain.Role</value>
        </entry>
    </util:map>

    <util:map id="contentTypeMapping">
        <entry key="pdf" value="application/pdf"/>
        <entry key="html" value="text/html"/>
        <entry key="xls" value="application/xls"/>
        <entry key="rtf" value="application/rtf"/>
        <entry key="csv" value="text/csv"/>
        <entry key="odt" value="application/vnd.oasis.opendocument.text"/>
        <entry key="txt" value="text/plain"/>
        <entry key="docx" value="application/vnd.openxmlformats-officedocument.wordprocessingml.document"/>
        <entry key="ods" value="application/vnd.oasis.opendocument.spreadsheet"/>
        <entry key="xlsx" value="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"/>
        <entry key="font" value="font/*"/>
        <entry key="jrxml" value="application/xml"/>
        <entry key="jar" value="application/zip"/>
        <entry key="prop" value="text/plain"/>
        <entry key="jrtx" value="application/xml"/>
        <entry key="xml" value="application/xml"/>
        <entry key="css" value="text/css"/>
        <entry key="accessGrantSchema" value="application/xml"/>
        <entry key="olapMondrianSchema" value="application/xml"/>
        <entry key="pptx" value="application/vnd.openxmlformats-officedocument.presentationml.presentation"/>
    </util:map>

    <util:list id="queryLanguagesCe">
        <value>sql</value>
        <value>hql</value>
        <value>domain</value>
        <value>HiveQL</value>
        <value>MongoDbQuery</value>
        <value>cql</value>
    </util:list>

    <alias name="${bean.queryLanguages}" alias="queryLanguages"/>

    <util:set id="cdsPropertiesToIgnore">
        <value>password</value>
        <value>_cds_name</value>
    </util:set>

    <bean id="exposedMessageSource" parent="messageSource" class="com.jaspersoft.jasperserver.jaxrs.bundle.ExposedResourceBundleMessageSource"  >
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="basenamePrefix" value="WEB-INF/bundles/"/>
    </bean>

    <!-- REST v.1-->
    <alias name="${bean.restUtils}" alias="concreteRestUtils"/>
    <alias name="${bean.restServiceRegistry}" alias="restServiceRegistry"/>
    <alias name="${bean.userAndRoleManagementService}" alias="concreteUserAndRoleManagementService"/>
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>

    <bean id="restServiceRegistryCE" class="com.jaspersoft.jasperserver.rest.MapRESTServiceRegistry">
        <property name="services">
            <map>
                <entry key="login" value-ref="restLoginService"/>
                <entry key="resources" value-ref="restResourcesService"/>
                <entry key="job" value-ref="restJobSchedService"/>
                <entry key="resource" value-ref="restResourceService"/>
                <entry key="report" value-ref="restReportService"/>
                <entry key="jobsummary" value-ref="restJobSummarySchedService"/>
                <entry key="user" value-ref="restUserService"/>
                <entry key="role" value-ref="restRoleService"/>
                <entry key="permission" value-ref="restPermissionService"/>
                <entry key="attribute" value-ref="restProfileAttributeService"/>
            </map>
        </property>
    </bean>

    <util:map id="specialRoles">
        <entry key="SUPERUSER" value="ROLE_SUPERUSER"/>
        <entry key="ADMINISTRATOR" value="ROLE_ADMINISTRATOR"/>
    </util:map>

    <util:list id="rolesToDisablePermissionEditForEveryone">
        <value>ROLE_SUPERUSER</value>
    </util:list>
    <util:list id="rolesToDisablePermissionEditForNonSuperuser">
        <value>ROLE_ADMINISTRATOR</value>
    </util:list>

    <alias name="${bean.foldersOnly}" alias="foldersOnly"/>
    <alias name="${bean.modifyProtected}" alias="modifyProtected"/>

    <bean id="modifyProtectedCe" class="java.util.HashSet">
        <!-- this set contains URI or regular expressions of delete protected resources.
        Currently there are technical JRS specific folders -->
        <constructor-arg index="0">
            <set>
                <value>/</value>
                <value>/temp</value>
                <value>/themes</value>
                <value>/themes/default</value>
                <value>/themes/default/.+</value>
            </set>
        </constructor-arg>
    </bean>

    <bean id="foldersOnlyCe" class="java.util.HashSet">
        <!-- this set contains URI or regular expressions of delete protected resources.
        Currently there are technical JRS specific folders -->
        <constructor-arg index="0">
            <set>
                <value>/</value>
            </set>
        </constructor-arg>
    </bean>

    <!--Hypermedia-->

    <!--Root Hypermedia Document-->

    <bean id="rootDocumentActivity" scope="prototype"  class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.root.activity.ReadRootDocumentActivity">
       <!--Mapping to activities-->
        <constructor-arg index="0">
            <util:map key-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation"
                      value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.activity.Activity">
                <entry key="contentReferences" value-ref="contentCollectionActivity"/>
                <entry key="resources" value-ref="searchResourceLookupActivity"/>
                <entry key="workflows" value-ref="workflowCollectionActivity"/>
            </util:map>
        </constructor-arg>
       <!--Treat next relations as links-->
        <constructor-arg index="1">
            <util:list value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation">
                <value>contentReferences</value>
                <value>resources</value>
                <value>workflows</value>
            </util:list>
        </constructor-arg>
       <!--Relations resolver-->
        <property name="visitor">
            <bean id="rootVisitor" scope="prototype" class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.root.visitor.RootDocumentRelationsVisitor"/>
        </property>
    </bean>

    <!--Workflow Collection configuration -->

    <bean id="workflowCollectionActivity" scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.activity.ReadUserWorkflowCollectionActivity">
        <!--Mapping to activities-->
        <constructor-arg index="0">
            <util:map key-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation"
                      value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.activity.Activity">
                <entry key="workflow"><null/></entry><!--Workaround for circular dependency, resolved in 'proceed' method-->
            </util:map>
        </constructor-arg>
        <!--Treat next relations as links-->
        <constructor-arg index="1">
            <util:list value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation"/>
        </constructor-arg>
        <!--Relations resolver-->
        <property name="visitor">
            <bean id="workflowCollectionVisitor" scope="prototype" class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.visitor.UserWorkflowCollectionRelationsVisitor"/>
        </property>
    </bean>

    <!-- Single Workflow configuration -->

    <bean id="workflowActivity" scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.activity.ReadUserWorkflowActivity">
        <!--Mapping to activities-->
        <constructor-arg index="0">
            <util:map key-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation"
                      value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.activity.Activity">
                <entry key="workflows"><null/></entry><!--Workaround for circular dependency, resolved in 'proceed' method-->
                <entry key="resources" value-ref="searchResourceLookupActivity"/>
                <entry key="folder" value-ref="browseResourceLookupActivity"/>
                <entry key="create" value-ref="createResourceActivity"/>
                <entry key="contentReference" value-ref="contentReferenceActivity"/>
                <entry key="admin" value-ref="defaultReadAdminActivity"/>
            </util:map>
        </constructor-arg>
        <!--Treat next relations as links-->
        <constructor-arg index="1">
            <util:list value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation">
                <value>workflows</value>
                <value>resources</value>
                <value>folder</value>
                <value>create</value>
                <value>admin</value>
            </util:list>
        </constructor-arg>
        <!--Relations resolver-->
        <property name="visitor">
            <bean id="workflowCollectionVisitor" scope="prototype" class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.visitor.UserWorkflowRelationVisitor"/>
        </property>
    </bean>

    <!--Wrapper for not existed dto model around server settings-->
    <bean id="defaultReadAdminActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.admin.ReadAdminActivity">
    </bean>

    <!--Search Hypermedia Activity configuration-->

    <bean id="ceExcludeFolderFilter" class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.root.ExcludeFolderFilter">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <util:list id="hypermediaSearchCustomFilters">
       <ref bean="${bean.excludeFolderFilter}"/>
    </util:list>

    <bean id="searchResourceLookupActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.resource.activity.SearchResourcesActivity">
        <!--Mapping to activities-->
        <constructor-arg index="0">
            <util:map key-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation"
                      value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.activity.Activity">
                <entry key="resource" value-ref="resourceLookupActivity"/>
            </util:map>
        </constructor-arg>
        <!--Treat next relations as links-->
        <constructor-arg index="1">
            <util:list value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation"/>
        </constructor-arg>
        <!--Relations resolver-->
        <property name="visitor">
            <bean id="searchRelationsVisitor" scope="prototype" class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.resource.visitor.SearchRelationVisitor"/>
        </property>
        <!--Default search criteria-->
        <property name="criteria">
            <bean class="com.jaspersoft.jasperserver.search.service.impl.RepositorySearchCriteriaImpl">
                <property name="searchMode" value="SEARCH" />
                <property name="startIndex" value="0" />
                <property name="maxCount" value="100" />
                <property name="showHidden" value="false" />
                <property name="customFilters" ref="hypermediaSearchCustomFilters"/>
            </bean>
        </property>
    </bean>

    <bean id="browseResourceLookupActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.resource.activity.BrowseResourcesActivity">
        <property name="criteria">
            <bean class="com.jaspersoft.jasperserver.search.service.impl.RepositorySearchCriteriaImpl">
                <property name="searchMode" value="BROWSE" />
            </bean>
        </property>
    </bean>

    <!--ResourceLookup Hypermedia configuration-->

    <bean id="resourceLookupActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.resource.activity.ReadResourceActivity">
        <!--Mapping to activities-->
        <constructor-arg index="0">
            <util:map key-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation"
                      value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.activity.Activity">
                <entry key="run" value-ref="runResourceActivity"/>
                <entry key="edit" value-ref="editResourceLookupActivity"/>
                <entry key="open" value-ref="openResourceActivity"/>
            </util:map>
        </constructor-arg>
        <!--Treat next relations as links-->
        <constructor-arg index="1">
            <util:list value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation">
                <value>run</value>
                <value>edit</value>
                <value>open</value>
            </util:list>
        </constructor-arg>
        <!--Relations resolver-->
        <property name="visitor">
            <bean id="readResourceLookupRelationVisitor" scope="prototype" class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.resource.visitor.ResourceLookupRelationsVisitor"/>
        </property>
    </bean>


    <bean id="editResourceLookupActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.resource.activity.EditResourceActivity">
    </bean>

    <bean id="runResourceActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.resource.activity.RunResourceActivity">
    </bean>

    <bean id="openResourceActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.resource.activity.OpenResourceActivity">
    </bean>

    <bean id="createResourceActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.resource.activity.CreateResourceActivity">
    </bean>

    <!--Content Reference configuration -->

    <bean id="contentReferenceActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.activity.ReadContentReferenceActivity">
    </bean>

    <bean id="contentCollectionActivity"
          scope="prototype"
          class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.activity.ReadContentReferenceCollectionActivity">
        <!--Mapping to activities-->
        <constructor-arg index="0">
            <util:map key-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation"
                      value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.activity.Activity">
                <entry key="contentReference" value-ref="contentReferenceActivity"/>
            </util:map>
        </constructor-arg>
        <!--Treat next relations as links-->
        <constructor-arg index="1">
            <util:list value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.common.Relation"/>
        </constructor-arg>
        <!--Relations resolver-->
        <property name="visitor">
            <bean id="contentReferenceVisitor" scope="prototype" class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.visitor.ContentReferenceCollectionRelationsVisitor"/>
        </property>
    </bean>

    <!--Workflows Data-->

    <util:map id="userWorkflows"
              map-class="java.util.LinkedHashMap"
              key-type="java.lang.String"
              value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
        <entry key="main">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="main"/>
                <property name="label" value="Main"/>
                <property name="description" value="Main functionality"/>
            </bean>
        </entry>
        <!--Main workflows-->
        <entry key="dataSource">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="dataSource"/>
                <property name="label" value="datasource.title"/>
                <property name="description" value="datasource.description"/>
                <property name="parentName" value="main"/>
                <property name="contentReferenceId" value="datasource"/>
            </bean>
        </entry>
        <entry key="domain">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="domain"/>
                <property name="label" value="domain.title"/>
                <property name="description" value="domain.description"/>
                <property name="parentName" value="main"/>
                <property name="contentReferenceId" value="domain"/>
            </bean>
        </entry>
        <entry key="adhocView">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="adhocView"/>
                <property name="label" value="adhocView.title"/>
                <property name="description" value="adhocView.description"/>
                <property name="parentName" value="main"/>
                <property name="contentReferenceId" value="adhoc"/>
            </bean>
        </entry>
        <entry key="report">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="report"/>
                <property name="label" value="report.title"/>
                <property name="description" value="report.description"/>
                <property name="parentName" value="main"/>
                <property name="contentReferenceId" value="report"/>

            </bean>
        </entry>
        <entry key="dashboard">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="dashboard"/>
                <property name="label" value="dashboard.title"/>
                <property name="description" value="dashboard.description"/>
                <property name="parentName" value="main"/>
                <property name="contentReferenceId" value="dashboard"/>

            </bean>
        </entry>
        <entry key="admin">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="admin"/>
                <property name="label" value="admin.title"/>
                <property name="description" value="admin.description"/>
                <property name="parentName" value="main"/>
            </bean>
        </entry>

        <!--Admin Workflows-->
        <entry key="users">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="users"/>
                <property name="label" value="users.title"/>
                <property name="description" value="users.description"/>
                <property name="parentName" value="admin"/>
            </bean>
        </entry>
        <entry key="roles">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="roles"/>
                <property name="label" value="roles.title"/>
                <property name="description" value="roles.description"/>
                <property name="parentName" value="admin"/>
            </bean>
        </entry>
        <entry key="repository">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="repository"/>
                <property name="label" value="repository.title"/>
                <property name="description" value="repository.description"/>
                <property name="parentName" value="admin"/>
            </bean>
        </entry>
        <entry key="serverSettings">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.dto.UserWorkflow">
                <property name="name" value="serverSettings"/>
                <property name="label" value="server.settings.title"/>
                <property name="description" value="server.settings.description"/>
                <property name="parentName" value="admin"/>
            </bean>
        </entry>

    </util:map>

    <!--Content References-->

    <util:map id="contentReference"
              map-class="java.util.LinkedHashMap"
              key-type="java.lang.String"
              value-type="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.dto.ContentReference">

        <!--Popular Content-->

        <entry key="videos">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.dto.ContentReference">
                <property name="id" value="videos"/>
                <property name="title" value="how.to.videos"/>
                <property name="description" value="how.to.videos"/>
                <property name="url" value="http://community.jaspersoft.com/wiki/jasperreports-server-how-videos-playlist"/>
                <property name="group" value="popular"/>
            </bean>
        </entry>
        <entry key="articles">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.dto.ContentReference">
                <property name="id" value="articles"/>
                <property name="title" value="how.to.articles"/>
                <property name="description" value="how.to.articles"/>
                <property name="url" value="http://community.jaspersoft.com/wiki"/>
                <property name="group" value="popular"/>
            </bean>
        </entry>
        <entry key="portal">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.dto.ContentReference">
                <property name="id" value="portal"/>
                <property name="title" value="online.portal"/>
                <property name="description" value="online.portal"/>
                <property name="url" value="http://www.jaspersoft.com/bi-training-center"/>
                <property name="group" value="popular"/>
            </bean>
        </entry>

        <!--Video Tutorials-->

        <entry key="datasource">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.dto.ContentReference">
                <property name="id" value="datasource"/>
                <property name="title" value="view.tutorial"/>
                <property name="description" value="datasource.tutorial.description"/>
                <property name="url" value="http://community.jaspersoft.com/wiki/jasperreports-server-data-analysis-video"/>
                <property name="group" value="tutorial"/>
            </bean>
        </entry>
        <entry key="domain">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.dto.ContentReference">
                <property name="id" value="domain"/>
                <property name="title" value="view.tutorial"/>
                <property name="description" value="domain.tutorial.description"/>
                <property name="url" value="http://community.jaspersoft.com/wiki/jasperreports-server-domains-video"/>
                <property name="group" value="tutorial"/>
            </bean>
        </entry>
        <entry key="adhoc">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.dto.ContentReference">
                <property name="id" value="adhoc"/>
                <property name="title" value="view.tutorial"/>
                <property name="description" value="adhoc.tutorial.description"/>
                <property name="url" value="http://community.jaspersoft.com/wiki/jasperreports-server-ad-hoc-views-video"/>
                <property name="group" value="tutorial"/>
            </bean>
        </entry>
        <entry key="report">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.dto.ContentReference">
                <property name="id" value="report"/>
                <property name="title" value="view.tutorial"/>
                <property name="description" value="report.tutorial.description"/>
                <property name="url" value="http://community.jaspersoft.com/wiki/jasperreports-server-reports-video"/>
                <property name="group" value="tutorial"/>
            </bean>
        </entry>
        <entry key="dashboard">
            <bean class="com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.content.dto.ContentReference">
                <property name="id" value="dashboard"/>
                <property name="title" value="view.tutorial"/>
                <property name="description" value="dashboard.tutorial.description"/>
                <property name="url" value="http://community.jaspersoft.com/wiki/jasperreports-server-dashboards-video"/>
                <property name="group" value="tutorial"/>
            </bean>
        </entry>

    </util:map>

    <!-- Repository search configurations. -->
    <bean id="defaultRestSearchConfiguration" class="com.jaspersoft.jasperserver.search.common.RepositorySearchConfiguration">
        <property name="customSorters" ref="customSorters"/>
        <property name="customFilters" ref="customFilters"/>
        <property name="itemsPerPage" value="100"/>
        <property name="maxItemsPerQuery" value="1000"/>
        <property name="searchSecurityResolver" ref="${bean.searchSecurityResolver}"/>
        <property name="systemFilters" ref="systemFilters"/>
        <property name="resourceLabelMaxLength" value="100"/>
        <property name="resourceNameMaxLength" value="100"/>
        <property name="resourceDescriptionMaxLength" value="250"/>
        <property name="customFiltersMap" ref="defaultCustomFiltersMap"/>
    </bean>

    <!-- NOTE: create a separate bean instead of alias if mode specific configuration is required. -->
    <alias name="defaultRestSearchConfiguration" alias="restSearchModeRepositorySearchConfiguration"/>
    <alias name="defaultRestSearchConfiguration" alias="restBrowseModeRepositorySearchConfiguration"/>

    <!-- Search mode settings. -->
    <bean id="restSearchSearchModeSettings" class="com.jaspersoft.jasperserver.search.mode.SearchModeSettings">
        <property name="initialStateResolver" ref="searchInitialStateResolver"/>
        <property name="jsonConverter" ref="searchModeJsonConverter"/>
        <property name="repositorySearchConfiguration" ref="restSearchModeRepositorySearchConfiguration"/>
    </bean>

    <bean id="restBrowseSearchModeSettings" class="com.jaspersoft.jasperserver.search.mode.SearchModeSettings">
        <property name="initialStateResolver" ref="browseInitialStateResolver"/>
        <property name="jsonConverter" ref="browseModeJsonConverter"/>
        <property name="repositorySearchConfiguration" ref="restBrowseModeRepositorySearchConfiguration"/>
    </bean>

    <bean id="restSearchModeSettingsResolver" class="com.jaspersoft.jasperserver.search.mode.impl.SearchModeSettingsResolverImpl">
        <property name="settingsMap">
            <map>
                <entry key="SEARCH" value-ref="restSearchSearchModeSettings"/>
                <entry key="BROWSE" value-ref="restBrowseSearchModeSettings"/>
            </map>
        </property>
    </bean>

</beans>