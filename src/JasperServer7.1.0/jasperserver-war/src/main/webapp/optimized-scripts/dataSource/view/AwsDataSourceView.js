define(["require","underscore","common/component/dialog/AlertDialog","dataSource/view/JdbcDataSourceView","dataSource/view/BaseDataSourceView","dataSource/model/AwsDataSourceModel","dataSource/view/dialog/UploadJdbcDriverDialog","dynamicTree.utils","core.events.bis","bundle!jasperserver_messages","text!dataSource/template/awsSpecificTemplate.htm","settings!awsSettings","dataSource/util/settingsUtility"],function(e){"use strict";var t=e("underscore"),s=e("common/component/dialog/AlertDialog"),a=e("dataSource/view/JdbcDataSourceView"),i=e("dataSource/view/BaseDataSourceView"),r=e("dataSource/model/AwsDataSourceModel"),o=e("dataSource/view/dialog/UploadJdbcDriverDialog"),n=e("dynamicTree.utils"),d=e("core.events.bis"),l=e("bundle!jasperserver_messages"),c=e("text!dataSource/template/awsSpecificTemplate.htm"),u=e("settings!awsSettings"),h=e("dataSource/util/settingsUtility");return a.extend({PAGE_TITLE_NEW_MESSAGE_CODE:"resource.datasource.aws.page.title.new",PAGE_TITLE_EDIT_MESSAGE_CODE:"resource.datasource.aws.page.title.edit",modelConstructor:r,events:function(){var e={};return t.extend(e,a.prototype.events),e["change input[name='credentialsType']"]="changeCredentialsType",e["click #findAwsDataSources"]="refreshAwsDataSourceTree",e},initialize:function(e){i.prototype.initialize.apply(this,arguments),this.deepDefaults=h.deepDefaults(e,{awsSettings:u}),this.listenTo(this.model,"change:credentialsType",this.onCredentialsTypeChange),this.listenTo(this.model,"change:driverClass",this.changeUploadDriverButtonState),this.listenTo(this.model,"change",this.updateInput),this.listenTo(this.model.drivers,"change add",this.recheckDriver)},changeCredentialsType:function(){var e=this.$("input[name='credentialsType']:checked").val();this.model.set("credentialsType",e)},recheckDriver:function(){this.model.validate({driverClass:this.model.get("driverClass")}),this.changeUploadDriverButtonState()},changeUploadDriverButtonState:function(){var e=this.$("#driverUploadButton");if(""===this.model.get("driverClass"))d.disable(e[0]);else{d.enable(e[0]);var t=this.model.drivers.getDriverByClass(this.model.get("driverClass"));e.find(".wrap").text(l[t&&t.get("available")?"resource.dataSource.jdbc.upload.editDriverButton":"resource.dataSource.jdbc.upload.addDriverButton"])}},initDriverUploadDialog:function(){var e=this,s=this.model.drivers.getDriverByClass(this.model.get("driverClass"));this.driverUploadDialog=new o({driverAvailable:!(!s||!s.get("available")),driverClass:this.model.get("driverClass")}),this.driverUploadDialog.on("driverUpload",function(s){e.model.drivers.markDriverAsAvailable(s.jdbcDriverClass),t.defer(t.bind(e.model.validate,e.model))})},updateInput:function(){var e=t.keys(this.model.changedAttributes()),s=["accessKey","secretKey","roleArn","connectionUrl","driverClass","dbName"],a=this;t.each(t.intersection(e,s),function(e){var t=a.model.get(e),s=a.$("[name='"+e+"']").val();s!==t&&a.$("[name='"+e+"']").val(t)})},onCredentialsTypeChange:function(){var e=this.model.get("credentialsType")===r.credentialsType.EC2;this.$("#aws_settings")[e?"hide":"show"](),e&&this.showAwsDsTree(this.model.getFullDbTreePath())},refreshAwsDataSourceTree:function(e){e.preventDefault(),this.showAwsDsTree("/")},render:function(){return this.$el.empty(),this.renderTimezoneSection(),this.renderAwsSpecificSection(),this.renderTestConnectionSection(),this.initDataSourceTree(),(this.options.isEditMode||this.model.get("credentialsType")===r.credentialsType.EC2)&&this.showAwsDsTree(this.model.getFullDbTreePath()),this},showAwsDsTree:function(e){this.model.validate({accessKey:this.model.get("accessKey"),secretKey:this.model.get("secretKey")}),this.model.isValid("secretKey")&&this.model.isValid("accessKey")&&this.awsDataSourceTree.showTreePrefetchNodes(e||"/")},templateData:function(){var e=a.prototype.templateData.apply(this,arguments);return t.extend(e,{credentialsType:r.credentialsType,awsRegions:this.deepDefaults.awsSettings.awsRegions,disableAwsDefaults:!this.deepDefaults.awsSettings.isEc2Instance||this.deepDefaults.awsSettings.suppressEc2CredentialsWarnings}),e},renderAwsSpecificSection:function(){this.$el.append(t.template(c,this.templateData())),this.changeUploadDriverButtonState()},initDataSourceTree:function(){var e=this.options.isEditMode,t=this,a={hideLoader:!0,bShowRoot:!1,treeId:"awsDataSourceTree",providerId:"awsDataSourceTreeDataProvider",selectLeavesOnly:!0,additionalParams:function(){return{arn:t.model.get("roleArn"),awsAccessKey:t.model.get("accessKey"),awsSecretKey:t.model.get("secretKey"),region:t.model.get("region"),datasourceUri:t.model.get("uri")}}};this.awsDataSourceTree=n.createRepositoryTree("awsDataSourceTree",a),this.awsDataSourceTree.httpErrorHandler=function(e){var t,a=!1;return(-1!==e.responseText.indexOf("AWS Access Key is invalid")||-1!==e.responseText.indexOf("The security token included in the request is invalid"))&&(a=l["error.aws.key.is.invalid"]),a!==!1||-1===e.responseText.indexOf("AWS Secret Key is invalid")&&-1===e.responseText.indexOf("The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method")||(a=l["error.aws.secret.key.is.invalid"]),a===!1&&-1!==e.responseText.indexOf("is not authorized to perform")&&(a=l["error.aws.arn.is.invalid"]),a===!1&&-1!==e.responseText.indexOf("The security token included in the request is invalid")&&(a=l["error.security.token.is.invalid"]),a?(t=new s({modal:!0}),t.setMessage(a),t.open(),!0):!1},this.awsDataSourceTree.observe("leaf:selected",function(s){var a=s.memo.node.param;if("awsDb"===a.type&&!e){var i=a.extra,r=i.dbUri.split("/");t.model.set({connectionUrlTemplate:i.jdbcTemplate,driverClass:i.jdbcDriverClass,dbName:i.dBName,dbHost:i.dnsAddress,dbPort:i.dbPort,sName:i.dBName,dbService:r[1],dbInstanceIdentifier:r[2]}),t.model.validate({driverClass:t.model.get("driverClass")})}}),this.awsDataSourceTree.observe("tree:loaded",function(){t.model.getFullDbTreePath()&&t.awsDataSourceTree.openAndSelectNode(t.model.getFullDbTreePath(),function(){e=!1})})},remove:function(){this.awsDataSourceTree&&this.awsDataSourceTree.stopObserving(),a.prototype.remove.apply(this,arguments)}})});