define(["require","jquery","underscore","bundle!all","jrs.configs","backbone","text!scheduler/template/editor/scheduleTabTemplate.htm","components/dateAndTime/DateAndTimePicker","scheduler/view/editor/holidayCalView","scheduler/collection/holidayCalsCollection"],function(e){"use strict";var t=e("jquery"),a=e("underscore"),n=e("bundle!all"),r=e("jrs.configs"),i=e("backbone"),l=e("text!scheduler/template/editor/scheduleTabTemplate.htm"),c=e("components/dateAndTime/DateAndTimePicker"),d=e("scheduler/view/editor/holidayCalView"),s=e("scheduler/collection/holidayCalsCollection"),o=r.calendar.timepicker.dateFormat,h=r.calendar.timepicker.timeFormat.replace(":ss","");return i.View.extend({events:{"change [name=startType]":"setStartType","change [name=startDate]":"setStartDate","change [name=schedulerTimeZone]":"setTimeZone","change [name=recurrenceType]":"setRecurrenceType","change [name=recurrenceInterval]":"setRecurrenceInterval","change [name=recurrenceIntervalUnit]":"setRecurrenceIntervalUnit","change [name=endat]":"setEnDat","change [name=occurrenceCount]":"setOccurrenceCount","change [name=simpleEndDate]":"setEndDate","change [name=calendarEndDate]":"setEndDate","change [name=whichMonth]":"monthRadioSelector","change [name=monthSelector]":"setMonthSelector","change [name=whichDay]":"dayRadioSelector","change [name=daySelector]":"setDaySelector","change [name=datesInMonth]":"setDatesInMonth","change [name=hours]":"setHours","change [name=minutes]":"setMinutes","change [name=calendarSelect]":"setCalendar"},initialize:function(){this.calCollection=new s,this.calView=new d({collection:this.calCollection}),this.calCollection.fetch({reset:!0,data:{calendarType:"holiday"}}),this.listenTo(this.model,"change:trigger",this.triggerChanged)},render:function(){this.setElement(t(a.template(l,{_:a,i18n:n,timeZones:r.timeZones}))),this.$el.find("[name=calendarBlockHolder]").append(this.calView.$el),this.setupDatepickersOn()},setupDatepickersOn:function(){this.$el.find(".datepicker").each(function(e,a){var n=t(a);new c({el:n[0],constrainInput:!0,dateFormat:o,timeFormat:h,showOn:"button",buttonText:""}),n.next().addClass("button").addClass("picker"),t(a)[0].getValue=function(){return t(this).val()}})},triggerChanged:function(){var e=this.model.get("trigger");this.$el.find("[name=startType]").filter("[value="+e.startType+"]").prop("checked",!0),this.$el.find("[name=startDate]").val(e.startDate),this.$el.find("[name=schedulerTimeZone]").val(e.timezone),this.$el.find("[name=recurrenceType]").val(e.type),this.$el.find("fieldset[data-recurrence]").addClass("hidden"),this.$el.find('fieldset[data-recurrence="'+e.type+'"]').removeClass("hidden"),"none"===e.type&&this.$el.find("[name=calendarBlockHolder]").addClass("hidden"),"simple"===e.type&&(this.$el.find("[name=recurrenceInterval]").val(e.recurrenceInterval),this.$el.find("[name=recurrenceIntervalUnit]").val(e.recurrenceIntervalUnit),this.$el.find("[name=endat]").filter("[value="+e.radioEndDate+"]").prop("checked",!0),this.$el.find("[name=occurrenceCount]").val(e.occurrenceCount),this.$el.find("[name=simpleEndDate]").val(e.endDate),this.$el.find("[name=calendarBlockHolder]").removeClass("hidden"),this.$el.find("[name=calendarSelect]").val(e.calendarName)),"calendar"===e.type&&(this.$el.find("[name=whichMonth]").filter("[value="+e.radioWhichMonth+"]").prop("checked",!0),this.$el.find("[name=monthSelector]").val(e.months.month),this.$el.find("[name=whichDay]").filter("[value="+e.radioWhichDay+"]").prop("checked",!0),this.$el.find("[name=daySelector]").val(e.weekDays.day),this.$el.find("[name=datesInMonth]").val(e.monthDays),this.$el.find("[name=hours]").val(e.hours),this.$el.find("[name=minutes]").val(e.minutes),this.$el.find("[name=calendarEndDate]").val(e.endDate),this.$el.find("[name=calendarBlockHolder]").removeClass("hidden"),this.$el.find("[name=calendarSelect]").val(e.calendarName))},setStartType:function(e){this.model.update("trigger",{startType:t(e.target).val()})},setStartDate:function(e){this.model.update("trigger",{startType:"2",startDate:t(e.target).val()})},setTimeZone:function(e){this.model.update("trigger",{timezone:t(e.target).val()})},setRecurrenceType:function(e){this.model.update("trigger",{type:t(e.target).val()})},setRecurrenceInterval:function(e){this.model.update("trigger",{recurrenceInterval:t(e.target).val()})},setRecurrenceIntervalUnit:function(e){this.model.update("trigger",{recurrenceIntervalUnit:t(e.target).val()})},setEnDat:function(e){this.model.update("trigger",{radioEndDate:t(e.target).val()})},setOccurrenceCount:function(e){this.model.update("trigger",{occurrenceCount:t(e.target).val()})},setEndDate:function(e){this.model.update("trigger",{endDate:t(e.target).val()})},monthRadioSelector:function(e){this.model.update("trigger",{radioWhichMonth:t(e.target).val()})},setMonthSelector:function(e){for(var a=t(e.target).val()||[],n=0,r=a.length;r>n;n++)a[n]=parseInt(a[n]);this.model.update("trigger",{months:{month:a}})},dayRadioSelector:function(e){this.model.update("trigger",{radioWhichDay:t(e.target).val()})},setDaySelector:function(e){for(var a=t(e.target).val()||[],n=0,r=a.length;r>n;n++)a[n]=parseInt(a[n]);this.model.update("trigger",{weekDays:{day:a}})},setDatesInMonth:function(e){this.model.update("trigger",{monthDays:t(e.target).val()})},setHours:function(e){this.model.update("trigger",{hours:t(e.target).val()})},setMinutes:function(e){this.model.update("trigger",{minutes:t(e.target).val()})},setCalendar:function(e){this.model.update("trigger",{calendarName:t(e.target).val()})}})});