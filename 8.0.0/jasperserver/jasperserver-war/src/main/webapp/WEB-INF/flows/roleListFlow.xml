<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2005 - 2020 TIBCO Software Inc. All rights reserved.
  ~ http://www.jaspersoft.com.
  ~
  ~ Unless you have purchased a commercial license agreement from Jaspersoft,
  ~ the following license terms apply:
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program. If not, see <http://www.gnu.org/licenses/>.
  -->

<flow xmlns="http://www.springframework.org/schema/webflow" xmlns:ns0="http://www.w3.org/2001/XMLSchema-instance"
      ns0:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd"
      start-state="initEvent">

    <action-state id="initEvent">
        <evaluate expression="roleManagerAction"/>
        <transition on="success" to="roleListView"/>
    </action-state>

    <!-- Transitions whose 'on' attributes check for externalContext.nativeRequest.method == 'POST' will happen
    only if the reqest's http method is POST.  This was done to protect sensitive areas against CSRF attacks.
    Currently, CSRFGuard only protects POST, PUT, DELETE; we want to avoid all server state changing requests via GET, etc.. -->
    <view-state id="roleListView" view="modules/manage/roles">
        <on-entry>
            <set name="flowScope.prevForm" value="'roleListView'"/>
        </on-entry>

        <transition on="browse" to="next">
            <evaluate expression="roleManagerAction.browse"/>
        </transition>
        <transition on="search" to="next">
            <evaluate expression="roleManagerAction.search"/>
        </transition>
        <transition on="next" to="next"/>

        <transition on="selectAndGetDetails" to="getDetails">
            <evaluate expression="roleManagerAction.select"/>
        </transition>

        <transition on="searchAssigned" to="nextAssigned">
            <evaluate expression="roleManagerAction.searchAssigned"/>
        </transition>

        <transition on="searchAvailable" to="nextAvailable">
            <evaluate expression="roleManagerAction.searchAvailable"/>
        </transition>
        <transition on="nextAssigned" to="nextAssigned"/>
        <transition on="nextAvailable" to="nextAvailable"/>

        <transition on="${currentEvent.id == 'delete' and externalContext.nativeRequest.method == 'POST'}" to="ajaxView">
            <evaluate expression="roleManagerAction.delete"/>
        </transition>
        <transition on="${currentEvent.id == 'deleteAll' and externalContext.nativeRequest.method == 'POST'}" to="ajaxView">
            <evaluate expression="roleManagerAction.deleteAll"/>
        </transition>
        <transition on="exist" to="ajaxView">
            <evaluate expression="roleManagerAction.exist"/>
        </transition>
        <transition on="${currentEvent.id == 'update' and externalContext.nativeRequest.method == 'POST'}" to="ajaxView">
            <evaluate expression="roleManagerAction.updateRole"/>
        </transition>
        <transition on="${currentEvent.id == 'create' and externalContext.nativeRequest.method == 'POST'}" to="ajaxView">
            <evaluate expression="roleManagerAction.create"/>
        </transition>
        <transition on="loadAssignedUsers" to="ajaxView">
            <evaluate expression="roleManagerAction.loadAssignedUsers"/>
        </transition>
        <transition on="loadAvailableUsers" to="ajaxView">
            <evaluate expression="roleManagerAction.loadAvailableUsers"/>
        </transition>
        <transition on="${currentEvent.id == 'updateRoleUsers' and externalContext.nativeRequest.method == 'POST'}" to="ajaxView">
            <evaluate expression="roleManagerAction.updateRoleUsers"/>
        </transition>
        <transition on="initEdit" to="ajaxView">
            <evaluate expression="roleManagerAction.initEdit"/>
        </transition>
        <transition on="cancelEdit" to="ajaxView">
            <evaluate expression="roleManagerAction.cancelEdit"/>
        </transition>
        <transition on="cancelEdit" to="ajaxView">
            <evaluate expression="roleManagerAction.cancelEdit"/>
        </transition>
        <transition on="initChangeUsers" to="ajaxView">
            <evaluate expression="roleManagerAction.initChangeUsers"/>
        </transition>
        <transition on="revertUsersChanges" to="ajaxView">
            <evaluate expression="roleManagerAction.revertUsersChanges"/>
        </transition>
    </view-state>

    <action-state id="next">
        <evaluate expression="roleManagerAction"/>
        <transition on="success" to="ajaxView"/>
    </action-state>

    <action-state id="getDetails">
        <evaluate expression="roleManagerAction"/>
        <transition on="success" to="ajaxView"/>
    </action-state>

    <action-state id="nextAssigned">
        <evaluate expression="roleManagerAction"/>
        <transition on="success" to="ajaxView"/>
    </action-state>

    <action-state id="nextAvailable">
        <evaluate expression="roleManagerAction"/>
        <transition on="success" to="ajaxView"/>
    </action-state>

    <view-state id="ajaxView" view="ajax/ajaxresponse"/>

    <view-state id="ajaxError" view="ajax/ajaxerror"/>

    <!-- exceptions handling -->
    <decision-state id="backFromError">
        <if test="not (flowScope.prevForm == null or flowScope.prevForm == '')" then="${flowScope.prevForm}"
            else="initEvent"/>
    </decision-state>

    <view-state id="errorPage" view="modules/system/errorPage">
        <on-entry>
            <evaluate expression="errorPageHandlerAction"/>
        </on-entry>
    </view-state>

    <global-transitions>
        <transition on="backFromErrorPage" to="backFromError"/>
        <transition on-exception="java.lang.Throwable" to="errorPage"/>
    </global-transitions>

    <!-- end exceptions handling -->

    <bean-import resource="spring-config.xml"/>
    <bean-import resource="roleBeans.xml"/>

</flow>
