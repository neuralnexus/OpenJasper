#
# Copyright (C) 2005 - 2020 TIBCO Software Inc. All rights reserved.
# http://www.jaspersoft.com.
#
# Unless you have purchased a commercial license agreement from Jaspersoft,
# the following license terms apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

#########################################################
# Jaspersoft Security Configuration
#########################################################

# Turns request parameter validation on or off.
security.validation.input.on=false
# Turns sql validation on or off.
security.validation.sql.on=true

# RegExp to remove comments from SQL before validation. Removal of the
# comments before validation simplifies validSQL expression in
# validation.properties.   This property is optional.  If not specified, no
# comments would be removed from SQL queries: validSQL expression would have
# to account for possible comments in the query.
security.validation.sql.comments.regexp=(?:/\\*.*?\\*/)|(?:--[\\w\\W]+?$)|(?:\\#[\\w\\W]+?$)

# A property to  enable additional validation SQL queries with semicolon inside
# via getting query metadata
# Enabling this property allows SQL queries with semicolon in data part
# Disabling can improve performance for some odd JDBC drivers
validate.sql.via.metadata.query.execution=true

# Turns encryption of encryption.param's defined below on or off.
encryption.on=false

# ENCRYPTION CONFIGURATION
# encryption.dynamic.key=true means that the 1 key will be generated per every single request.
# If 'false', the key will be drawn from a keystore (see KEYSTORE group below)
encryption.dynamic.key=true

# ENCRYPTION KEY GENERATION PARAMS
# RSA is the only encryption algorithm implemented so far

# ENCRYPTED PARAMETERS
# In order for parameters to be encrypted, their property name should start with 'encryption.param.'
# The general convention for param name is encryption.param.[application area].
encryption.param.login=j_password
encryption.param.login.changePassword1=j_newpassword1
encryption.param.login.changePassword2=j_newpassword2
encryption.param.user.mgmt=entity.password

# KEYSTORE
# The following properties are used only when encryption.dynamic.key=false and encryption.on=true
# These properties configure the keystore housing the private-public encryption key pair.
#
# If you wish to generate your own keystore file with your own password, use 'keytool'
# java utility (Reference:  http://docs.oracle.com/javase/6/docs/technotes/tools/windows/keytool.html).
# 'keytool' is the master tool for keystore management.  It comes with jre/jdk (bin dir.).


# Logging message configuration in SecurityConfiguration class
log.msg.security.off=SECURITY for [%s] is OFF
msg.no.rule=No rule for parameter [%s]. Using default validation on input=[%s].
msg.cannot.load=Security configuration [%s] cannot be loaded.

# xss.soft.html.escape.tag.whitelist: XSS HTML tag whitelist
# The tags in the comma separated list won't be escaped on the page during the dynamic
# html output from js.  If the list is not specified, it will default to the list hard-coded in xssUtil.js.
# One can add tags(s) to the default tag whitelist by prepending xss.soft.html.escape.tag.whitelist with +.
# E.g. xss.soft.html.escape.tag.whitelist=+tag1,tag2
# <tag1> wont's be escaped, <tag3> will become &lt;tag3>.  Adding <script> is NOT RECOMMENDED; it will partly
# disable XSS protection.
# To replace the default whitelist completely, don't prepend xss.soft.html.escape.tag.whitelist with +.
xss.soft.html.escape.tag.whitelist=

# xss.soft.html.escape.attrib.map: Keys of the map are case insensitive regex's for html tag attributes that switch
# html to javascript context.  Since the regex's are strings in the properties file, regex escape class \s must be \\\\s, etc.
# During soft escape of HTML output (via jQuery/prototype), the map keys will be replaced with the map values via
# Javascript String.replace.
# - If the xss.soft.html.escape.attrib.map is absent or not set, the hard-coded default is used.  It's equivalent to this map
# xss.soft.html.escape.attrib.map={'\\\\bjavascript:': '', '\\\\bon(\\\\w+?)\\\\s*=': '&#111;&#110;$1=', '\\\\bsrcdoc\\\\s*=': '&#115;&#114;&#99;doc='}
# - xss.soft.html.escape.attrib.map={} will disable HTML attribute escaping against XSS (NOT RECOMMENDED!).
# - You can add more attribute pairs by copying over the default map and inserting them.  E.g. removing data:text/html:
# xss.soft.html.escape.attrib.map={'\\\\bjavascript:': '', '\\\\bon(\\\\w+?)\\\\s*=': '&#111;&#110;$1=', '\\\\bsrcdoc\\\\s*=': '&#115;&#114;&#99;doc=', \
#           '\\\\bdata:\\\\s*text/html\\\\b': ''}
#
# CAVEAT: Modify at your own risk.  To work properly, the regex keys in the map must be very specific.  Also, the replacement values in
# the map should never be the same as any regex keys.  O/w, multiple replacement will happen; the output would be corrupted in unpredictable ways.
# E.g. {'a':'b', 'b':'c'} - a will be replaced with b. b with c.
xss.soft.html.escape.attrib.map=