<!--
  ~ Copyright (C) 2005 - 2019 TIBCO Software Inc. All rights reserved.
  ~ http://www.jaspersoft.com.
  ~
  ~ Unless you have purchased a commercial license agreement from Jaspersoft,
  ~ the following license terms apply:
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program. If not, see <http://www.gnu.org/licenses/>.
  -->

<!--
      2016-10-31   thorick  per the work on:
           https://jira.tibco.com/browse/JS-30422
      This configuration is targeted specifically at
      JBoss EAP 6  which HAS the feature:
      use JRS mail-1.4.jar instead of EAP mail-1.4.4.jar
      per this configuration
 -->


<jboss-deployment-structure>
    <!-- This corresponds to the top level deployment. For a war this is the war's module, for an ear -->
    <!-- This is the top level ear module, which contains all the classes in the EAR's lib folder     -->
    <deployment>

        <!-- http://bugzilla.jaspersoft.com/show_bug.cgi?id=44406
                2016-08-01 sblazhyi
                        Exclude the jboss resteasy as we use jersey
        -->
    
        <exclude-subsystems>
            <subsystem name="resteasy"/>
        </exclude-subsystems>
       

        <!-- Exclusions allow you to prevent the server from automatically adding some dependencies
              [dlitvak issue 26714]
              Reference:  https://community.jboss.org/thread/195902  -->

        <exclusions>

			<!--		
				2016-09-28  thorick
				https://jira.tibco.com/browse/JS-30422
				Do not pick up JBoss  javax.mail.api module.  
				To do that we have to exclude the entire javaee.api
			-->
            <module name="javaee.api"/>

            <module name="com.sun.xml.bind"/>


            <!-- 2013-07-15 thorick
                            http://bugzilla.jaspersoft.com/show_bug.cgi?id=33137
                            do not use JBoss logging, positively use JRS logging classes instead
                            -->
            <module name="org.apache.commons.logging"/>
            <module name="org.apache.log4j"/>
            <module name="org.slf4j"/>
            <module name="org.slf4j.ext"/>
            <module name="org.slf4j.impl"/>
            <module name="org.slf4j.jcl-over-slf4j"/>



            <!-- 2013-01-22 thorick
                            Exclude all of RestEasy since jasper uses Jersey for JAX-RS work.
                            If we don't do this here, JBoss will load RestEasy when it detects
                            any JAX-RS Annotated classes in jasperserver*.war
            -->
            <module name="org.jboss.resteasy.resteasy-atom-provider"/>
            <module name="org.jboss.resteasy.resteasy-cdi"/>
            <module name="org.jboss.resteasy.resteasy-jackson-provider"/>
            <module name="org.jboss.resteasy.resteasy-jaxb-provider"/>
            <module name="org.jboss.resteasy.resteasy-jaxrs"/>
            <module name="org.jboss.resteasy.resteasy-jettison-provider"/>
            <module name="org.jboss.resteasy.resteasy-jsapi"/>
            <module name="org.jboss.resteasy.resteasy-multipart-provider"/>
            <module name="org.jboss.resteasy.resteasy-yaml-provider"/>

            <!-- 2016-06-30 gbacon
                            exclude resteasy-jackson2-provider since we are now using com.fasterxml.jackson
                            which is referred to as the resteasy-jackson2-provider module by wildfly
            -->

            <module name="org.jboss.resteasy.resteasy-jackson2-provider"/>

            <!-- 2013-03-20 thorick
                            exclude all of Hibernate 4.  We want Jasper's Hibernate 3
            -->
            <module name="org.hibernate"/>
            <module name="org.hibernate.commons-annotations"/>
            <module name="org.hibernate.envers"/>
            <module name="org.hibernate.validator"/>


            <!-- 2013-02-01 thorick
                            Exclude the jboss jsf/jstl packages
            -->
            <module name="javax.faces.api"/>
            <module name="javax.servlet.jstl.api"/>
            <module name="javax.xml.bind.api"/>


            <!-- http://bugzilla.jaspersoft.com/show_bug.cgi?id=44406
                    2016-08-01 sblazhyi
                            Exclude the jboss ws packages & its dependants
            -->
            <module name="javaee.api"/>
            <module name="org.jboss.resteasy.async-http-servlet-30"/>
            <module name="org.jboss.resteasy.resteasy-validator-provider-11"/>
            <module name="org.jboss.ws.api"/>
            <module name="org.jboss.ws.spi"/>
            <module name="org.jboss.as.jaxrs"/>
            <module name="org.jboss.resteasy.jackson-provider"/>
            <module name="org.jboss.resteasy.resteasy-hibernatevalidator-provider"/>
            <module name="org.codehaus.jackson.jackson-core-asl"/>
            <module name="org.codehaus.jackson.jackson-jaxrs"/>
            <module name="org.codehaus.jackson.jackson-mapper-asl"/>
            <module name="org.codehaus.jackson.jackson-xc"/>
            <module name="org.codehaus.jettison"/>
            <module name="javax.ws.rs.api"/>

            <!--  http://bugzilla.jaspersoft.com/show_bug.cgi?id=44994 -->
            <module name="javax.annotation"/>
			
			<!--  
				2016-09-28  thorick
				https://jira.tibco.com/browse/JS-30422
				do NOT include the default mail jar
			-->
			<module name="javax.mail.api"/>
        </exclusions>


        <!--  2013-01-24  thorick
                          add custom modules that we specifically want
                          typically these are modules that were created for use by jasperserver
                          that override default modules that are implicitly loaded by JBoss
        -->
        <dependencies>   
			<!--  http://bugzilla.jaspersoft.com/show_bug.cgi?id=31907

                  2013-04-11  thorick

                  Server side rendering of SVG charts requires an explicit dependency
                  on a module that encapsulates  batik.
                  I don't really understand why as I would have guessed that if left in
                  WEB-INF/lib these jars should be available,
                  but it turns out that for server side rendering THEY ARE NOT AVAILABLE !
                  Declaring a dependency on this jaspserver created module makes them available.
			-->
            <module name="jaspersoft.org.apache.batik"/>
            <module name="jaspersoft.javax.validation.api" slot="1.1" export="true"/>

            <!--
                2013-03-26  thorick
                            There are difficulties getting ant to create the new module
                            dirs in the JBoss installation module subdirectories on
                            both windows and Linux.
                            mkdir of the new module subdirs FAILS inexplicably

                            since we do not need to create any new modules that are
                            composites for this release 5.1, we can get away with not
                            explicitely creating any modules.

                            instead we've excluded the JBoss default modules and
                            will simply pick up the required jars from WEB-INF/lib

            <module name="com.sun.xml.bind" slot="2.1.5"/>
            <module name="javax.faces.api" slot="1.1"/>
            <module name="javax.servlet.jstl.api" slot="1.1.2"/>
            <module name="javax.xml.bind.api" slot="2.1"/>
            <module name="org.apache.log4j" slot="1.2.12"/>
            -->

			 <!-- 
             2014-01-29 nirmal
               		http://bugzilla.jaspersoft.com/show_bug.cgi?id=33207
               		These lines declare modules which have not yet been defined. So its definitions
               		would be searched in reseources section following this section.
            		
            -->
            <module name="javax.faces.api"/>
            <module name="javax.servlet.jstl.api"/>
			<module name="javax.xml.bind.api"/>
			

            <!--  http://bugzilla.jaspersoft.com/show_bug.cgi?id=31844 jboss7-->
            <module name="org.apache.xalan"/>

            <!--  http://bugzilla.jaspersoft.com/show_bug.cgi?id=31700 -->
            <module name="org.apache.commons.io"/>

            <!-- http://bugzilla.jaspersoft.com/show_bug.cgi?id=31845  -->
            <module name="org.apache.xerces"/>

            <!--  per Volodya:  this is required to workaround a JBoss problem (not including the module) -->
            <module name="org.jboss.as.jmx"/>

			
			<!--  
				2016-09-28  thorick
				https://jira.tibco.com/browse/JS-30422				
			    add back all modules in javaee.api that we excluded  
				EXCEPT for javax.mail.api  which we want to install our own version of	"1.4:
			-->

			<module name="javax.activation.api" export="true"/>
			<module name="javax.annotation.api" export="true"/>
			<module name="javax.ejb.api" export="true"/>
			<module name="javax.el.api" export="true"/>
			<module name="javax.enterprise.api" export="true"/>
			<module name="javax.enterprise.deploy.api" export="true"/>
			<module name="javax.inject.api" export="true"/>
			<module name="javax.interceptor.api" export="true"/>
			<module name="javax.jms.api" export="true"/>
			<module name="javax.jws.api" export="true"/>
			<module name="javax.management.j2ee.api" export="true"/>
			<module name="javax.persistence.api" export="true"/>
			<module name="javax.resource.api" export="true"/>
			<module name="javax.rmi.api" export="true"/>
			<module name="javax.security.auth.message.api" export="true"/>
			<module name="javax.security.jacc.api" export="true"/>
			<module name="javax.servlet.api" export="true"/>
			<module name="javax.servlet.jsp.api" export="true"/>
			<module name="javax.transaction.api" export="true"/>
			<module name="javax.validation.api" export="true"/>
			<module name="javax.xml.bind.api" export="true"/>
			<module name="javax.xml.registry.api" export="true"/>
			<module name="javax.xml.soap.api" export="true"/>
		
		<!--  thorick 2016-10-17   try NOT using a slot and pickup directly from WEB-INF/lib as a resource
			<module name="javax.mail.api" slot="1.4"/> 	
		-->
		
			<!-- This one always goes last. According to some JBoss spokesperson -->
			<module name="javax.api" export="true"/>

            <!-- http://bugzilla.jaspersoft.com/show_bug.cgi?id=31687 -->
            <system>
                <paths>
                    <path name="com/sun/management"/>

                    <!--  http://bugzilla.jaspersoft.com/show_bug.cgi?id=44994 -->
                    <path name="javax/annotation"/>
                </paths>
            </system>
        </dependencies>

        <!-- Add additional classes to the deployment module. In this case, it is the same as including the jar in the EAR's lib directory
            [dlitvak] Jboss7 seems to read jars from vfs (virtual) directory: a security mechanism?
            Jboss's classloader assigns vfs location to CodeSource object of the loaded jar classes.
            In order to assign the class object physical deployment module location, wwe found it necessary to introduce this file with
            additional resource roots marked with use-physical-code-source="true" (issue 26780)

            References:     https://community.jboss.org/thread/170527
                            https://issues.jboss.org/browse/AS7-308
                            https://docs.jboss.org/author/display/AS7/Class+Loading+in+AS7?_sscc=t

        -->
        <resources>
                	
					<!--  thorick trial -->
			<resource-root path="WEB-INF/lib/mail-1.4.jar" use-physical-code-source="true"/>
		
        	<!--
               2014-01-29 nirmal
               		http://bugzilla.jaspersoft.com/show_bug.cgi?id=33207
               		This forces jboss to read the jar from WEB-INF/lib folder. These are the jars used for the modules under dependencies.               				
            -->
            <!--   thorick  2016-12-07
                    remove as part of the 3rd party lib security upgrade
            <resource-root path="WEB-INF/lib/jsf-api-1.1.jar" use-physical-code-source="true"/>
            -->

            <resource-root path="WEB-INF/lib/jaxb-api-2.1.jar" use-physical-code-source="true"/> 
            
            
            <!--
               2014-03-17 nirmal
               		http://bugzilla.jaspersoft.com/show_bug.cgi?id=36566
               		changed from 1.38 to 1.50
               schubar
               		https://jira.tibco.com/browse/JS-55716, https://jira.tibco.com/browse/JS-55746
               		changed from 1.62 to 1.64
            -->
            <resource-root path="WEB-INF/lib/bcprov-jdk15on-1.64.jar" use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/bcpkix-jdk15on-1.64.jar" use-physical-code-source="true"/>

            <!--
               2013-01-22 thorick
                          http://bugzilla.jaspersoft.com/show_bug.cgi?id=30447

                          This is causing the JBoss VFS to actually try and LOAD a jar with this
                          name.  Since no jar with this name exists.  Deployment rolls back with
                          an NPE.

            <resource-root path="WEB-INF/lib/bcprov-jdk14-138.jar" use-physical-code-source="true"/>
            -->

            <!-- 2013-06-24: thorick   http://bugzilla.jaspersoft.com/show_bug.cgi?id=32933 --> 
            <!-- 2014-04-22: tkavanagh http://bugzilla.jaspersoft.com/show_bug.cgi?id=37122 --> 


            <!-- =============================================================================== --> 
            <!--                                                                                 --> 
            <!-- Setup JDBC Driver                                                               --> 
            <!--                                                                                 --> 
            <!-- Add JDBC jars for installation and/or for the DataSource drop list in the UI    --> 
            <!-- =============================================================================== --> 

            <resource-root path="WEB-INF/lib/postgresql-9.2-1002.jdbc4.jar" use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/mariadb-java-client-1.1.2.jar" use-physical-code-source="true"/>

            <!-- Uncomment out JDBC driver line below to add to the JDBC driver dropdown list in the UI.      --> 
            <!-- Or to add a driver in order to connect to the jasperserver repository database.              --> 
            <!-- Make sure that the file name of the driver matches exactly.                                  --> 
            <!--                                                                                              --> 
            <!-- <resource-root path="WEB-INF/lib/ojdbc6-11.2.0.jar" use-physical-code-source="true"/>      -->  
            <!-- <resource-root path="WEB-INF/lib/sqljdbc-1.6-2206.100.jar" use-physical-code-source="true"/> -->
            <!-- <resource-root path="WEB-INF/lib/db2jcc-9.7.jar" use-physical-code-source="true"/>           -->
            <!-- <resource-root path="WEB-INF/lib/vertica_4.1.19_jdk_5.jar" use-physical-code-source="true"/> -->


            <!-- 2013-07-15 thorick
                            http://bugzilla.jaspersoft.com/show_bug.cgi?id=33137
                            do not use JBoss logging, positively use JRS logging classes instead
                            -->
            <resource-root path="WEB-INF/lib/log4j-web-2.11.2.jar"  use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/log4j-slf4j-impl-2.11.2.jar"  use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/log4j-jul-2.11.2.jar"  use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/log4j-jcl-2.11.2.jar"  use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/log4j-core-2.11.2.jar"  use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/log4j-api-2.11.2.jar"  use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/log4j-1.2-api-2.11.2.jar"  use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/slf4j-api-1.7.25.jar"  use-physical-code-source="true"/>
            <resource-root path="WEB-INF/lib/commons-logging-1.2.jar" use-physical-code-source="true"/>

            <resource-root path="WEB-INF/lib/javax.ws.rs-api-2.0.1.jar" use-physical-code-source="true"/>
        </resources>
    </deployment>


</jboss-deployment-structure>
