<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (C) 2005 - 2019 TIBCO Software Inc. All rights reserved.
  ~ http://www.jaspersoft.com.
  ~
  ~ Unless you have purchased a commercial license agreement from Jaspersoft,
  ~ the following license terms apply:
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program. If not, see <http://www.gnu.org/licenses/>.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security-4.2.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.jaspersoft.jasperserver.api.common.crypto"/>

    <!-- ======================== AUTHENTICATION ======================= -->
    <bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
        <constructor-arg name="providers">
            <list>
                <ref bean="${bean.daoAuthenticationProvider}"/>
                <!-- anonymousAuthenticationProvider only needed if filterInvocationInterceptor.alwaysReauthenticate is set to true
                    <ref bean="anonymousAuthenticationProvider"/> -->
                <!--ref bean="jaasAuthenticationProvider"/-->
            </list>
        </constructor-arg>
    </bean>

    <bean id="anonymousUserDescriptor" class="org.springframework.security.core.userdetails.memory.UserAttribute">
        <property name="password" value="anonymousUser"/>
        <property name="authoritiesAsString">
            <list>
                <value type="java.lang.String">ROLE_ANONYMOUS</value>
            </list>
        </property>

    </bean>

<!-- anonymousAuthenticationProvider only needed if filterInvocationInterceptor.alwaysReauthenticate is set to true
    <bean id="anonymousAuthenticationProvider" class="org.springframework.security.providers.anonymous.AnonymousAuthenticationProvider">
        <property name="key"><value>foobar</value></property>
    </bean>
-->

    <bean id="daoAuthenticationProvider" class="com.jaspersoft.jasperserver.api.security.internalAuth.InternalDaoAuthenticationProvider">
        <!-- jdbcDaoImpl -->
        <!-- <property name="userDetailsService"><ref bean="inMemoryDaoImpl"/></property> -->
        <property name="userDetailsService"><ref bean="${bean.internalUserAuthorityService}"/></property>
        <property name="passwordEncoder"><ref bean="passwordEncoder"/></property>
    </bean>

    <!--The fallbackFactory should never be itself like ref="passwordEncoder"-->
    <bean id="passwordEncoder" class="com.jaspersoft.jasperserver.api.common.crypto.CipherFactory" lazy-init="true">
      <property name="cipherClass" value="com.jaspersoft.jasperserver.api.common.crypto.PasswordCipherer"/>
      <property name="confId" value="#{T(com.jaspersoft.jasperserver.crypto.conf.PasswordEncoderEnc).ID}"/>
      <property name="fallbackFactory" ref="&amp;passwordEncoder_7_2" />
    </bean>

    <bean id="passwordEncoder_7_2" class="com.jaspersoft.jasperserver.api.common.crypto.CipherFactory" lazy-init="true">
        <property name="cipherClass" value="com.jaspersoft.jasperserver.api.common.crypto.PasswordCipherer"/>
        <property name="confId" value="#{T(com.jaspersoft.jasperserver.crypto.conf.DeprecatedPasswordEncoderEnc).ID}"/>
    </bean>

    <bean id="importExportCipher" class="com.jaspersoft.jasperserver.api.common.crypto.CipherFactory" lazy-init="true">
        <property name="cipherClass" value="com.jaspersoft.jasperserver.api.common.crypto.Cipherer"/>
        <property name="confId" value="#{T(com.jaspersoft.jasperserver.crypto.conf.ImportExportEnc).ID}"/>
        <property name="fallbackFactory" ref="&amp;importExport_7_2" />
    </bean>

    <bean id="importExport_7_2" class="com.jaspersoft.jasperserver.api.common.crypto.CipherFactory" lazy-init="true">
        <property name="cipherClass" value="com.jaspersoft.jasperserver.api.common.crypto.Cipherer"/>
        <property name="confId" value="#{T(com.jaspersoft.jasperserver.crypto.conf.DeprecatedImportExportEnc).ID}"/>
    </bean>

    <bean id="diagnosticDataCipherer" class="com.jaspersoft.jasperserver.api.common.crypto.CipherFactory" lazy-init="true">
        <property name="cipherClass" value="com.jaspersoft.jasperserver.api.common.crypto.DiagnosticDataCipherer"/>
        <property name="confId" value="#{T(com.jaspersoft.jasperserver.crypto.conf.DiagnosticDataEnc).ID}"/>
        <property name="allowEncryption" value="true"/>
    </bean>

    <bean id="httpParameterCipher" class="com.jaspersoft.jasperserver.api.common.crypto.CipherFactory" lazy-init="true">
        <property name="cipherClass" value="com.jaspersoft.jasperserver.api.security.encryption.EncryptionRSA"/>
        <property name="confId" value="#{T(com.jaspersoft.jasperserver.crypto.conf.DeprecatedHttpParameterEnc).ID}"/>
    </bean>

    <!--
    <bean id="jaasAuthenticationProvider" class="org.springframework.security.providers.jaas.JaasAuthenticationProvider">
        <property name="loginConfig">
            <value>/WEB-INF/login.conf</value>
        </property>
        <property name="loginContextName">
            <value>FileLogin</value>
        </property>
        <property name="callbackHandlers">
            <list>
                <bean class="org.springframework.security.providers.jaas.JaasNameCallbackHandler"/>
                <bean class="org.springframework.security.providers.jaas.JaasPasswordCallbackHandler"/>
            </list>
        </property>
        <property name="authorityGranters">
            <list>
                <bean class="org.appfuse.web.JaasAuthorityGranter"/>
            </list>
        </property>
    </bean>
    -->
    <!--
    <bean id="inMemoryDaoImpl" class="org.springframework.security.core.userdetails.memory.InMemoryDaoImpl">
        <property name="userMap">
            <value>
                tomcat=536c0b339345616c1b33caf454454d8b8a190d6c,ROLE_USER
                springlive=2a9152cff1d25b5bbaa3e5fbc7acdc6905c9f251,ROLE_USER
            </value>
        </property>
    </bean>
    -->

    <!-- ########### For LDAP authentication in JasperReport Server 4.7. In JRS > 5.1, all configuration is included in a single file (see sample's) ##############

    <bean id="ldapContextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
    <constructor-arg value="ldap://scopeserv1:389/dc=panscopic,dc=com"/>
    -->
    <!--
         You may not need the next properties
         <property name="userDn"><value>uid=admin,ou=system</value></property>
         <property name="password"><value>secret</value></property>
         -->
    <!--
       </bean>
         -->

    <!--
       For LDAP authentication
       This bean is not used by default

       <bean id="userSearch"
                class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
         <constructor-arg index="0">
           <value></value>
         </constructor-arg>
         <constructor-arg index="1">
           <value>(uid={0})</value>
         </constructor-arg>
         <constructor-arg index="2">
           <ref bean="ldapContextSource" />
         </constructor-arg>
         <property name="searchSubtree">
           <value>true</value>
         </property>
       </bean>

       <bean id="ldapAuthenticationProvider" class="org.springframework.security.providers.ldap.LdapAuthenticationProvider">
         <constructor-arg>
           <bean class="org.springframework.security.providers.ldap.authenticator.BindAuthenticator">
              <constructor-arg><ref bean="ldapContextSource"/></constructor-arg>
              <!- -property name="userDnPatterns"><list><value>uid={0}</value></list></property- ->
              <property name="userSearch" ref="userSearch"/>
           </bean>
         </constructor-arg>
         <constructor-arg>
           <bean class="org.springframework.security.ldap.populator.DefaultLdapAuthoritiesPopulator">
              <constructor-arg index="0"><ref bean="ldapContextSource"/></constructor-arg>
              <constructor-arg index="1"><value></value></constructor-arg>
              <property name="groupRoleAttribute"><value>cn</value></property>
              <property name="groupSearchFilter"><value>(&amp;(uniqueMember={0})(objectclass=groupofuniquenames))</value></property>
              <property name="searchSubtree"><value>true</value></property>
           </bean>
         </constructor-arg>
       </bean>
       ############################################################-->

    <!-- Automatically receives AuthenticationEvent messages -->
    <bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>

    <bean id="userLocalesList" class="com.jaspersoft.jasperserver.war.common.LocalesListImpl">
        <property name="locales">
            <list>
                <value type="java.util.Locale">en</value>
                <value type="java.util.Locale">de</value>
                <value type="java.util.Locale">es</value>
                <value type="java.util.Locale">fr</value>
                <value type="java.util.Locale">it</value>
                <value type="java.util.Locale">ja</value>
                <value type="java.util.Locale">pt_BR</value>
                <value type="java.util.Locale">zh_CN</value>
            </list>
        </property>
    </bean>

   <!--
   <bean id="rememberMeProcessingFilter" class="org.springframework.security.ui.rememberme.RememberMeProcessingFilter">
      <property name="authenticationManager"><ref bean="authenticationManager"/></property>
      <property name="rememberMeServices"><ref bean="rememberMeServices"/></property>
   </bean>

   <bean id="rememberMeServices" class="org.springframework.security.ui.rememberme.TokenBasedRememberMeServices">
      <property name="externalUserDetailsService"><ref bean="inMemoryDaoImpl"/></property>
      <property name="key"><value>springRocks</value></property>
   </bean>
   
   <bean id="rememberMeAuthenticationProvider" class="org.springframework.security.providers.rememberme.RememberMeAuthenticationProvider">
      <property name="key"><value>springRocks</value></property>
   </bean>
   -->     
    
    <!--
    <bean id="runAsManager" class="org.springframework.security.runas.RunAsImplAuthenticationProvider">
    <property name="key"><value>my_run_as_password</value></property>
    </bean>
    -->
    
    <bean id="requestMethodsFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter"/>

    <!-- Optionally, you can specify a "rolePrefix" property to change 
         (or remove) the ROLE_ prefix for role names. -->
    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter"/>

    <!-- ===================== ACL-BASED SECURITY ==================== -->
    
     <!-- ACL permission masks used by this application -->
    <util:constant id="JasperServerPermission.ADMINISTRATION" static-field="com.jaspersoft.jasperserver.api.metadata.security.JasperServerPermission.ADMINISTRATION"/>
    <util:constant id="JasperServerPermission.READ_WRITE" static-field="com.jaspersoft.jasperserver.api.metadata.security.JasperServerPermission.READ_WRITE"/>
    <util:constant id="JasperServerPermission.READ" static-field="com.jaspersoft.jasperserver.api.metadata.security.JasperServerPermission.READ"/>
    <util:constant id="JasperServerPermission.DELETE" static-field="com.jaspersoft.jasperserver.api.metadata.security.JasperServerPermission.DELETE"/>
    <util:constant id="JasperServerPermission.EXECUTE" static-field="com.jaspersoft.jasperserver.api.metadata.security.JasperServerPermission.EXECUTE"/>
    <util:constant id="JasperServerPermission.NOTHING" static-field="com.jaspersoft.jasperserver.api.metadata.security.JasperServerPermission.NOTHING"/>

    <bean id="repositoryOIRetrievalStrategy" class="com.jaspersoft.jasperserver.api.metadata.user.service.impl.ResourceObjectIdentityRetrievalStrategyImpl"/>
    <bean id="sidRetrievalStrategy" class="com.jaspersoft.jasperserver.api.metadata.user.service.impl.JasperServerSidRetrievalStrategyImpl"/>
    <bean id="permissionGrantingStrategy" class="com.jaspersoft.jasperserver.api.metadata.security.JasperServerPermissionGrantingStrategy"/>

    <!--Helper bean which can be used to check permissions on resources, uses same approach as Spring Security -->
    <bean id="aclSecurityCheckerCE" class="com.jaspersoft.jasperserver.api.metadata.user.service.impl.AclPermissionsSecurityChecker">
        <property name="aclService" ref="internalAclServiceCE"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
        <property name="permissionGrantingStrategy" ref="permissionGrantingStrategy"/>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
    </bean>

    <alias name="${bean.AclPermissionsSecurityChecker}" alias="aclSecurityChecker"/>

    <bean id="ehCacheBasedJasperServerAclCache" class="com.jaspersoft.jasperserver.api.security.EhCacheBasedJasperServerAclCache">
        <constructor-arg name="cache" ref="aclCache"/>
        <constructor-arg name="permissionGrantingStrategy" ref="permissionGrantingStrategy"/>
    </bean>
    <bean id="ehCacheAclService" class="com.jaspersoft.jasperserver.api.security.EhCacheAclServiceImpl">
        <constructor-arg name="nonMutableAclCache" ref="ehCacheBasedJasperServerAclCache"/>
    </bean>
    <!-- An access decision voter that reads ACL_USER_ADMIN settings -->
    <bean id="aclUserAdminVoter" class="org.springframework.security.acls.AclEntryVoter">
        <constructor-arg name="aclService" ref="internalAclServiceCE"/>
        <constructor-arg name="processConfigAttribute" type="java.lang.String" value="ACL_USER_ADMIN"/>
        <constructor-arg name="requirePermission">
            <list>
                <ref bean="JasperServerPermission.ADMINISTRATION"/>
            </list>
        </constructor-arg>
        <property name="processDomainObjectClass">
            <value>com.jaspersoft.jasperserver.api.metadata.common.domain.Resource</value>
        </property>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
    </bean>
    
    <!-- An access decision voter that reads ACL_USER_READ settings  -->
    <bean id="aclUserReadVoter" class="com.jaspersoft.jasperserver.api.metadata.security.ContextSensitiveAclEntryVoter">
        <constructor-arg name="aclService" ref="internalAclServiceCE"/>
        <constructor-arg name="processConfigAttribute" type="java.lang.String" value="ACL_USER_READ"/>
        <constructor-arg name="requirePermission">
            <list>
                <ref bean="JasperServerPermission.NOTHING"/>
            </list>
        </constructor-arg>

        <property name="processDomainObjectClass">
            <value>java.lang.String</value>
        </property>
        <property name="requiredPermissionsMap">
			<map>
				<entry key="default">
					<list>
						<ref bean="JasperServerPermission.ADMINISTRATION"/>
						<ref bean="JasperServerPermission.READ"/>
					</list>
				</entry>
				<entry key="execute">
					<list>
						<ref bean="JasperServerPermission.ADMINISTRATION"/>
						<ref bean="JasperServerPermission.READ"/>
						<ref bean="JasperServerPermission.EXECUTE"/>
					</list>
				</entry>
			</map>
        </property>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
    </bean>
    
    <!-- An access decision voter that reads ACL_USER_UPDATE settings  -->
    <bean id="aclUserUpdateVoter" class="org.springframework.security.acls.AclEntryVoter">
        <constructor-arg name="aclService" ref="internalAclServiceCE"/>
        <constructor-arg name="processConfigAttribute" type="java.lang.String" value="ACL_USER_UPDATE"/>
        <constructor-arg name="requirePermission">
            <array>
                <ref bean="JasperServerPermission.ADMINISTRATION"/>
                <ref bean="JasperServerPermission.READ_WRITE"/>
            </array>
        </constructor-arg>

        <property name="processDomainObjectClass">
            <value>com.jaspersoft.jasperserver.api.metadata.common.domain.Resource</value>
        </property>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
    </bean>
     
    <!-- An access decision voter that reads ACL_USER_READ settings -->
    <bean id="aclUserDeleteVoter" class="org.springframework.security.acls.AclEntryVoter">
        <constructor-arg name="aclService" ref="internalAclServiceCE"/>
        <constructor-arg name="processConfigAttribute" type="java.lang.String" value="ACL_USER_DELETE"/>
        <constructor-arg name="requirePermission">
            <array>
                <ref bean="JasperServerPermission.ADMINISTRATION"/>
                <ref bean="JasperServerPermission.DELETE"/>
            </array>
        </constructor-arg>
        <property name="processDomainObjectClass">
            <value>java.lang.String</value>
        </property>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
    </bean>
    
    
    <!-- An access decision manager used by the business objects -->
    <bean id="aclAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg name="decisionVoters">
            <list>
                <ref bean="roleVoter"/>
                <ref bean="aclUserAdminVoter"/>
                <ref bean="aclUserUpdateVoter"/>
                <!-- <ref bean="aclUserCreateVoter"/> -->
                <ref bean="aclUserDeleteVoter"/>
                <ref bean="aclUserReadVoter"/>
                <ref bean="aclUserMoveVoter"/>
                <ref bean="aclUserCopyVoter"/>
                <ref bean="aclUserMultiCopyVoter"/>
            </list>
        </constructor-arg>
        <property name="allowIfAllAbstainDecisions"><value>true</value></property>
    </bean>
    

    <!-- ===================== METHOD-LEVEL SECURITY ==================== 
    Read methods:  
           getResource
           getResourceData - Does not return a resource
           getContentResourceData - Does not return a resource
           getFolder
           getAllFolders
           getSubFolders
           findResource
           loadResourcesList*
           loadClientResources*
           getChildrenFolderName - Does not return a resource
        Write methods:
               saveFolder - Problems handling not existent objects...
               saveResource - Problems handling not existent objects...
               newResource - Not useful....
        Delete methods:
               deleteResource
               deleteFolder
               delete - Not useful....
    -->
    <bean id="hibernateRepoServiceSecurity"
        class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
        <property name="authenticationManager"><ref bean="authenticationManager"/></property>
        <property name="accessDecisionManager"><ref bean="aclAccessDecisionManager"/></property>
        <property name="afterInvocationManager"><ref bean="afterInvocationManager"/></property>
        <property name="securityMetadataSource"><ref bean="repositoryServiceSecurityMetadataSource"/></property>
    </bean>


    <security:method-security-metadata-source id="repositoryServiceSecurityMetadataSource">
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.getResource" access="ACL_USER_READ, AFTER_ACL_READ_IN_RESTRICTED_EX_CONTEXT"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.findResource" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.saveResource" access="ACL_USER_ADMIN,ACL_USER_UPDATE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.deleteResource" access="ACL_USER_DELETE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.deleteFolder" access="ACL_USER_DELETE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.delete" access="ACL_USER_DELETE"/>
        <!-- Rest of methods are missing in HibernateRepositoryService interface -->
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.getResources" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.getFolder" access="ACL_USER_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.loadResourcesList" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.getResourcesByIdList" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.loadClientResources" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.getAllFolders" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.getAllSubfolders" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.getSubFolders" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.findResources" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.saveFolder" access="ACL_USER_ADMIN,ACL_USER_UPDATE"/>
        <!--<security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.moveFolder" access="ACL_USER_MOVE"/>-->
        <!--<security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.moveResource" access="ACL_USER_MOVE"/>-->
        <!--<security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.copyResource" access="ACL_USER_COPY"/>-->
        <!--<security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.copyResources" access="ACL_USER_MULTI_COPY"/>-->
        <!--<security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.copyFolder" access="ACL_USER_COPY"/>-->


        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getResource" access="ACL_USER_READ,AFTER_ACL_READ_IN_RESTRICTED_EX_CONTEXT"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getResources" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getFolder" access="ACL_USER_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.loadResourcesList" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getResourcesByIdList" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.loadClientResources" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getAllFolders" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getAllSubfolders" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getSubFolders" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.findResource" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.findResources" access="AFTER_ACL_COLLECTION_READ"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.saveFolder" access="ACL_USER_ADMIN,ACL_USER_UPDATE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.saveResource" access="ACL_USER_ADMIN,ACL_USER_UPDATE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.deleteResource" access="ACL_USER_DELETE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.deleteFolder" access="ACL_USER_DELETE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.delete" access="ACL_USER_DELETE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.moveFolder" access="ACL_USER_MOVE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.moveResource" access="ACL_USER_MOVE"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.copyResource" access="ACL_USER_COPY"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.copyRenameResource" access="ACL_USER_COPY"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.copyResources" access="ACL_USER_MULTI_COPY"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.copyFolder" access="ACL_USER_COPY"/>
        <security:protect method="com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.copyRenameFolder" access="ACL_USER_COPY"/>
        <!--
                   For comparison, this is the analogous configuration defined inline under aclUpdateMethodSecurityInterceptor

                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getResource=ACL_USER_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getResources=AFTER_ACL_COLLECTION_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getFolder=ACL_USER_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.loadResourcesList=AFTER_ACL_COLLECTION_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getResourcesByIdList=AFTER_ACL_COLLECTION_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.loadClientResources=AFTER_ACL_COLLECTION_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getAllFolders=AFTER_ACL_COLLECTION_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getAllSubfolders=AFTER_ACL_COLLECTION_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.getSubFolders=AFTER_ACL_COLLECTION_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.saveFolder=ACL_USER_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.saveResource=ACL_USER_UPDATE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.deleteResource=ACL_USER_DELETE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.deleteFolder=ACL_USER_DELETE
                      com.jaspersoft.jasperserver.api.metadata.common.service.RepositoryService.delete=ACL_USER_DELETE

        -->

    </security:method-security-metadata-source>

    <!--
    
    Not used
    
    <bean id="hibernateRepoServiceSecurity" 
        class="org.springframework.security.intercept.method.aspectj.AspectJSecurityInterceptor">
        <property name="authenticationManager"><ref bean="authenticationManager"/></property>
        <property name="accessDecisionManager"><ref bean="aclAccessDecisionManager"/></property>
        <property name="afterInvocationManager"><ref bean="afterInvocationManager"/></property>
        <property name="objectDefinitionSource">
            <value>
                com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.getRepoResource=ROLE_PermissionTestRoleAgain,AFTER_ACL_READ
                com.jaspersoft.jasperserver.api.metadata.common.service.impl.hibernate.HibernateRepositoryService.loadResourcesList=ROLE_PermissionTestRole,ROLE_PermissionTestRoleAgain,AFTER_ACL_COLLECTION_READ
            </value>
        </property>
    </bean>
    
    <bean id="domainObjectInstanceSecurityAspect" 
        class="com.jaspersoft.jasperserver.api.metadata.user.service.impl.ObjectSecurityAspect"
        factory-method="aspectOf">
        <property name="securityInterceptor"><ref bean="hibernateRepoServiceSecurity"/></property>
    </bean>
    -->
    
    <!-- ============== "AFTER INTERCEPTION" AUTHORIZATION =========== -->
    
    <bean id="afterInvocationManager" class="org.springframework.security.access.intercept.AfterInvocationProviderManager">
        <property name="providers">
            <list>
                <ref bean="afterAclRead"/>
                <ref bean="afterAclCollectionRead"/>
                <ref bean="afterAclReadInRestrictedExecutionContext"/>
            </list>
        </property>
    </bean>
    
    <!-- Processes AFTER_ACL_COLLECTION_READ configuration settings -->

    <bean id="afterAclCollectionRead"
        class="org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider">
        <constructor-arg name="aclService" ref="internalAclServiceCE"/>
        <constructor-arg name="requirePermission">
            <list>
                <ref bean="JasperServerPermission.ADMINISTRATION"/>
                <ref bean="JasperServerPermission.READ"/>
            </list>
        </constructor-arg>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>

    </bean>
       
    <!-- Processes AFTER_ACL_READ configuration settings -->

    <bean id="afterAclRead" class="org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationProvider">
        <constructor-arg name="aclService" ref="internalAclServiceCE"/>
        <constructor-arg name="requirePermission">
            <list>
                <ref bean="JasperServerPermission.ADMINISTRATION"/>
                <ref bean="JasperServerPermission.READ"/>
            </list>
        </constructor-arg>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>

    </bean>

    <bean id="afterAclReadInRestrictedExecutionContext" class="com.jaspersoft.jasperserver.api.metadata.security.RestrictedContextAfterInvocationProvider">
        <constructor-arg name="aclService" ref="internalAclServiceCE"/>
        <constructor-arg name="processConfigAttribute" value="AFTER_ACL_READ_IN_RESTRICTED_EX_CONTEXT" type="java.lang.String"/>
        <constructor-arg name="requirePermission">
            <list>
                <ref bean="JasperServerPermission.EXECUTE"/>
            </list>
        </constructor-arg>
        <constructor-arg name="ignoreRestrictedContextForPermission">
            <list>
                <ref bean="JasperServerPermission.ADMINISTRATION"/>
                <ref bean="JasperServerPermission.READ"/>
            </list>
        </constructor-arg>
        <!-- Defines zero or more resource types which must be
    	    subclasses of Resource.class, indicating which resource types must be not accessible in restricted
    	    execution context. -->
        <constructor-arg name="inAccessibleResourceTypes" ref="${bean.inAccessibleResourceTypes}"/>
        <!-- Defines zero or more resource types which must be
    	    subclasses of Resource.class, indicating which resource types must be skipped during decision.
    	    In was introduced in order to make accessible some subtypes of inAccessibleResourceTypes. -->
        <constructor-arg name="skipResourceTypes" ref="${bean.skipResourceTypes}"/>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
    </bean>

    <bean id="inAccessibleResourceTypesCe" class="java.util.HashSet">
        <constructor-arg index="0" type="java.util.Collection">
            <set>
                <value>com.jaspersoft.jasperserver.api.metadata.jasperreports.domain.ReportDataSource</value>
            </set>
        </constructor-arg>
    </bean>

    <bean id="skipResourceTypesCe" class="java.util.HashSet">
        <constructor-arg index="0" type="java.util.Collection">
            <set>
            </set>
        </constructor-arg>
    </bean>

    <!--Processes AFTER_ACL_COLLECTION_UPDATE configuration settings-->
    <bean id="afterAclCollectionUpdate" class="org.springframework.security.acls.afterinvocation.AclEntryAfterInvocationCollectionFilteringProvider" >
        <constructor-arg name="aclService" ref="internalAclServiceCE"/>
        <constructor-arg name="requirePermission">
            <list>
                <ref bean="JasperServerPermission.ADMINISTRATION"/>
                <ref bean="JasperServerPermission.READ_WRITE"/>
            </list>
        </constructor-arg>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>

        <!--<property name="processConfigAttribute">-->
            <!--<value>AFTER_ACL_COLLECTION_UPDATE</value>-->
        <!--</property>-->
    </bean>

    <bean id="customEditorConfigurer" class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <util:map>
                <entry key="com.jaspersoft.jasperserver.api.security.FlowDefinitionSource" value="com.jaspersoft.jasperserver.api.security.FlowDefinitionSourceEditor"/>
                <entry key="org.springframework.security.access.ConfigAttribute" value="com.jaspersoft.jasperserver.api.metadata.security.ConfigAttributeEditor"/>
            </util:map>
        </property>
    </bean>
    
<!--
TODO: SSU - Seems this bean is not needed
    <bean id="flowAclManager" class="org.springframework.security.acl.AclProviderManager">
        <property name="providers">
            <list>
                <ref bean="${bean.objectPermissionServiceInternal}"/>
            </list>
        </property>
    </bean>
-->

    <bean id="flowVoter" class="com.jaspersoft.jasperserver.api.security.FlowRoleAccessVoter">
        <property name="flowAccessAttribute" value="FLOW_ACCESS"/>
        <property name="flowDefinitionSource">
            <value>
                repoAdminFlow=ROLE_ADMINISTRATOR
                userListFlow=ROLE_ADMINISTRATOR
                roleListFlow=ROLE_ADMINISTRATOR
                editFolderFlow=ROLE_ADMINISTRATOR
                fileResourceFlow=ROLE_USER,ROLE_ADMINISTRATOR
                listOfValuesFlow=ROLE_USER,ROLE_ADMINISTRATOR
                reportDataSourceFlow=ROLE_USER,ROLE_ADMINISTRATOR
                inputControlsFlow=ROLE_USER,ROLE_ADMINISTRATOR
                tenantFlow=ROLE_ADMINISTRATOR
                addDataSourceFlow=ROLE_ADMINISTRATOR
                userEditFlow=ROLE_ADMINISTRATOR
                roleEditFlow=ROLE_ADMINISTRATOR
                queryReferenceFlow=ROLE_ADMINISTRATOR
                searchFlow=ROLE_USER,ROLE_ADMINISTRATOR
                *=ROLE_USER,ROLE_ADMINISTRATOR
            </value>
        </property>
    </bean>

    <bean id="addFlowDefinitionSources" class="com.jaspersoft.jasperserver.api.common.util.spring.GenericBeanUpdaterDefinition">
        <property name="beanName" value="flowVoter"/>
        <property name="propertyName" value="flowDefinitionSource"/>
        <property name="operation" value="append"/>
    </bean>

    <bean id="flowAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg name="decisionVoters">
            <list>
                <ref bean="flowVoter"/>
            </list>
        </constructor-arg>
        <property name="allowIfAllAbstainDecisions"><value>true</value></property>
    </bean>
    
    <bean id="flowExecuterSecurity" class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
        <property name="authenticationManager"><ref bean="authenticationManager"/></property>
        <property name="accessDecisionManager"><ref bean="flowAccessDecisionManager"/></property>
        <property name="securityMetadataSource">
            <security:method-security-metadata-source>
                <security:protect method="org.springframework.webflow.executor.FlowExecutor.launchExecution" access="FLOW_ACCESS"/>
            </security:method-security-metadata-source>
        </property>
    </bean>

	<bean id="repositoryServiceSecurityChecker"
			class="com.jaspersoft.jasperserver.api.metadata.common.service.impl.RepositoryServiceSecurityChecker">
        <property name="adminVoter" ref="aclUserAdminVoter"/>
        <property name="updateVoter" ref="aclUserUpdateVoter"/>
        <property name="deleteVoter" ref="aclUserDeleteVoter"/>
        <property name="readVoter" ref="aclUserReadVoter"/>
        <property name="folderReadVoter" ref="aclUserReadVoter"/>
        <property name="interceptor" ref="hibernateRepoServiceSecurity"/>
	</bean>


    <bean id="securityWrappedEngineService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interceptorNames">
            <list>
                <idref bean="cancelExecutionMethodSecurityInterceptor"/>
                <idref bean="${bean.engineServiceTarget}"/>
            </list>
        </property>
    </bean>

    <bean id="cancelExecutionMethodSecurityInterceptor"
          class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
        <property name="authenticationManager">
            <ref bean="authenticationManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref bean="cancelExecutionAccessDecisionManager"/>
        </property>
        <property name="securityMetadataSource">
            <security:method-security-metadata-source>
                <security:protect method="com.jaspersoft.jasperserver.api.engine.common.service.EngineService.cancelExecution" access="EXECUTION_OWNER,ROLE_ADMINISTRATOR,ROLE_SUPERUSER"/>
            </security:method-security-metadata-source>
        </property>
    </bean>

    <bean id="cancelExecutionAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg>
            <list>
                <ref bean="${bean.executionRoleVoter}"/>
                <ref bean="executionOwnerVoter"/>
            </list>
        </constructor-arg>
        <property name="allowIfAllAbstainDecisions"><value>true</value></property>
    </bean>

    <!--TODO: SSU - possible we can replace MultiAclEntryVoter for simplified undestandinf-->
    <bean id="aclUserMoveVoter" class="com.jaspersoft.jasperserver.api.metadata.security.MultiAclEntryVoter">
        <property name="configAttribute" value="ACL_USER_MOVE"/>
        <property name="aclService" ref="internalAclServiceCE"/>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
        <property name="argumentVoters">
            <list>
                <bean class="com.jaspersoft.jasperserver.api.metadata.security.BasicMethodArgumentVoter">
                    <property name="argumentType" value="java.lang.String"/>
                    <property name="argumentIndex" value="1"/>
                    <property name="accessPermissions">
                        <array>
                            <ref bean="JasperServerPermission.ADMINISTRATION"/>
                            <ref bean="JasperServerPermission.DELETE"/>
                        </array>
                    </property>
                </bean>
                <bean class="com.jaspersoft.jasperserver.api.metadata.security.BasicMethodArgumentVoter">
                    <property name="argumentType" value="java.lang.String"/>
                    <property name="argumentIndex" value="2"/>
                    <property name="accessPermissions">
                        <array>
                            <ref bean="JasperServerPermission.ADMINISTRATION"/>
                            <ref bean="JasperServerPermission.READ_WRITE"/>
                        </array>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
    
    <bean id="aclUserCopyVoter" class="com.jaspersoft.jasperserver.api.metadata.security.MultiAclEntryVoter">
        <property name="configAttribute" value="ACL_USER_COPY"/>
        <property name="aclService" ref="internalAclServiceCE"/>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
        <property name="argumentVoters">
            <list>
                <bean class="com.jaspersoft.jasperserver.api.metadata.security.BasicMethodArgumentVoter">
                    <property name="argumentType" value="java.lang.String"/>
                    <property name="argumentIndex" value="1"/>
                    <property name="accessPermissions">
                        <list>
                            <ref bean="JasperServerPermission.ADMINISTRATION"/>
                            <ref bean="JasperServerPermission.READ"/>
                        </list>
                    </property>
                </bean>
                <bean class="com.jaspersoft.jasperserver.api.metadata.security.BasicMethodArgumentVoter">
                    <property name="argumentType" value="java.lang.String"/>
                    <property name="argumentIndex" value="2"/>
                    <property name="accessPermissions">
                        <list>
                            <ref bean="JasperServerPermission.ADMINISTRATION"/>
                            <ref bean="JasperServerPermission.READ_WRITE"/>
                        </list>
                    </property>
                    <property name="argumentFunctor">
                        <bean class="com.jaspersoft.jasperserver.api.metadata.common.util.ParentPathFunctor"/>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
    
    <bean id="aclUserMultiCopyVoter" class="com.jaspersoft.jasperserver.api.metadata.security.MultiAclEntryVoter">
        <property name="configAttribute" value="ACL_USER_MULTI_COPY"/>
        <property name="aclService" ref="internalAclServiceCE"/>
        <property name="objectIdentityRetrievalStrategy" ref="repositoryOIRetrievalStrategy"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>

        <property name="argumentVoters">
            <list>
                <bean class="com.jaspersoft.jasperserver.api.metadata.security.BasicMethodCollectionArgumentVoter">
                    <property name="argumentType" value="java.lang.String[]"/>
                    <property name="accessPermissions">
                        <list>
                             <ref bean="JasperServerPermission.ADMINISTRATION"/>
                             <ref bean="JasperServerPermission.READ"/>
                        </list>
                    </property>
                </bean>
                <bean class="com.jaspersoft.jasperserver.api.metadata.security.BasicMethodArgumentVoter">
                    <property name="argumentType" value="java.lang.String"/>
                    <property name="accessPermissions">
                        <list>
                            <ref bean="JasperServerPermission.ADMINISTRATION"/>
                            <ref bean="JasperServerPermission.READ_WRITE"/>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />


    <!--OBJECT PERMISSIONS SECURITY-->

    <bean id="objectPermissionServiceInterceptorNamesSecured" class="java.util.ArrayList" parent="${bean.objectPermissionServiceInterceptorNames}">
        <constructor-arg  index="0" type="java.util.Collection">
            <list merge="true">
                <idref bean="${bean.objectPermissionSecurityInterceptorName}"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="objectPermissionServiceMethodSecurityInterceptor"
          class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
        <property name="authenticationManager">
            <ref bean="authenticationManager"/>
        </property>
        <property name="afterInvocationManager">
            <ref bean="getPermissionAfterInvocationProviderManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref bean="modifyPermissionAccessDecisionManager"/>
        </property>
        <property name="securityMetadataSource">
            <security:method-security-metadata-source>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ObjectPermissionService.putObjectPermission" access="NOT_PERMISSION_OWNER,NOT_RECIPIENT_ADM,NOT_LOCAL_FOLDER_AND_RESOURCE"/>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ObjectPermissionService.deleteObjectPermission" access="NOT_PERMISSION_OWNER,NOT_RECIPIENT_ADM"/>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ObjectPermissionService.deleteObjectPermissionForObject" access="ROLE_ADMINISTRATOR,ROLE_SUPERUSER"/>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ObjectPermissionService.deleteObjectPermissionsForRecipient" access="ROLE_ADMINISTRATOR,ROLE_SUPERUSER"/>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ObjectPermissionService.getObjectPermissionsForObject" access="NOT_PERMISSION_OWNER,NOT_RECIPIENT_ADM,CAN_ADMINISTER"/>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ObjectPermissionService.getEffectivePermissionsForObject" access="NOT_PERMISSION_OWNER,NOT_RECIPIENT_ADM,CAN_ADMINISTER"/>
            </security:method-security-metadata-source>
        </property>
    </bean>

    <bean id="modifyPermissionAccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg name="decisionVoters" type="java.util.List">
            <list>
                <ref bean="roleVoter"/>
                <ref bean="notPermissionOwnerPermissionArgumentVoter"/>
                <ref bean="notRecipientAdminObjectPermissionVoter"/>
                <ref bean="notLocalFolderAndResourceArgumentVoter"/>
            </list>
        </constructor-arg>
        <property name="allowIfAllAbstainDecisions">
            <value>true</value>
        </property>
    </bean>

    <bean id="getPermissionAfterInvocationProviderManager" class="org.springframework.security.access.intercept.AfterInvocationProviderManager">
        <property name="providers">
            <list>
                <ref bean="notPermissionOwnerPermissionArgumentVoter"/>
                <ref bean="notRecipientAdminObjectPermissionVoter"/>
                <ref bean="isAdministrableObjectPermissionArgumentVoter"/>
            </list>
        </property>
    </bean>

    <bean id="roleAdministrator" class="java.lang.String">
        <constructor-arg type="java.lang.String">
            <value>ROLE_ADMINISTRATOR</value>
        </constructor-arg>
    </bean>

    <bean id="configurationAllowedRolesCe" class="java.util.ArrayList">
        <!--This bean is used to specify roles, which are permitted configure JRS (server settings)-->
        <!-- It is used to secure output of the com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.data.UserWorkflowStorage-->
        <constructor-arg  index="0" type="java.util.Collection">
            <list merge="true" value-type="java.lang.String">
                <value>ROLE_ADMINISTRATOR</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="administrationAllowedRolesCe" class="java.util.ArrayList">
        <!--This bean is used to specify roles, which are permitted administrate JRS (users, roles etc.)-->
        <!-- It is used to secure output of the com.jaspersoft.jasperserver.jaxrs.poc.hypermedia.workflow.data.UserWorkflowStorage-->
        <constructor-arg  index="0" type="java.util.Collection">
            <list merge="true" value-type="java.lang.String">
                <value>ROLE_ADMINISTRATOR</value>
            </list>
        </constructor-arg>
    </bean>
    <bean name="repositoryAclService" class="com.jaspersoft.jasperserver.api.metadata.user.service.impl.RepositoryAclServiceImpl">
        <property name="permissionService" ref="${bean.objectPermissionServiceInternal}"/>
        <property name="sidRetrievalStrategy" ref="sidRetrievalStrategy"/>
        <property name="aclLookupStrategy" ref="internalAclServiceCE"/>
    </bean>

    <bean id="localHiddenFolderAclService" class="com.jaspersoft.jasperserver.api.metadata.user.service.impl.LocalFolderAndResourceAclService">
        <property name="aclLookupStrategy" ref="internalAclServiceCE"/>
        <property name="repositoryService" ref="unsecureRepositoryService"/>
    </bean>

    <!--This Aliases are used only for AnnotationBased injection-->
    <alias name="${bean.internalAclService}" alias="internalAclService"/>
    <alias name="${bean.externalAclService}" alias="externalAclService"/>

    <bean name="internalAclServiceCE" class="com.jaspersoft.jasperserver.api.security.AclLookupStrategyImpl">
        <property name="aclServices">
            <list>
                <ref bean="ehCacheAclService"/>
                <ref bean="localHiddenFolderAclService"/>
                <ref bean="repositoryAclService"/>
            </list>
        </property>
        <property name="nonMutableAclCache" ref="ehCacheBasedJasperServerAclCache"/>
    </bean>

    <!--Profile Attributes SECURITY-->
    <bean id="profileAttributeServiceInterceptorNamesSecured" class="java.util.ArrayList">
        <constructor-arg  index="0" type="java.util.Collection">
            <list merge="true">
                <idref bean="profileAttributesServiceServiceMethodSecurityInterceptor"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="profileAttributesServiceServiceMethodSecurityInterceptor"
          class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
        <property name="authenticationManager">
            <ref bean="authenticationManager"/>
        </property>
        <property name="afterInvocationManager">
            <ref bean="getProfileAttributesAfterInvocationProviderManager"/>
        </property>
        <property name="accessDecisionManager">
            <ref bean="modifyProfileAttributesAccessDecisionManager"/>
        </property>
        <property name="securityMetadataSource">
            <security:method-security-metadata-source>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ProfileAttributeService.getProfileAttributesForPrincipal" access="ACL_ATTRIBUTE_USER_READ"/>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ProfileAttributeService.putProfileAttribute" access="ROLE_ADMINISTRATOR, ACL_ATTRIBUTE_USER_ADMIN"/>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ProfileAttributeService.deleteProfileAttribute" access="ROLE_ADMINISTRATOR, ACL_ATTRIBUTE_USER_ADMIN"/>
                <security:protect method="com.jaspersoft.jasperserver.api.metadata.user.service.ProfileAttributeService.getCurrentUserProfileAttributes" access="ACL_ATTRIBUTE_USER_READ"/>
            </security:method-security-metadata-source>
        </property>
    </bean>
    
     <bean id="modifyProfileAttributesAccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <constructor-arg name="decisionVoters" type="java.util.List">
            <list>
                <ref bean="roleVoter"/>
                <ref bean="aclAttributeUserAdminVoter"/>
            </list>
        </constructor-arg>
        <property name="allowIfAllAbstainDecisions">
            <value>true</value>
        </property>
    </bean>

    <bean id="getProfileAttributesAfterInvocationProviderManager" class="org.springframework.security.access.intercept.AfterInvocationProviderManager">
        <property name="providers">
            <list>
                <ref bean="aclAttributeUserReadVoter"/>
            </list>
        </property>
    </bean>

    <bean id="aclAttributeUserAdminVoter" class="com.jaspersoft.jasperserver.api.metadata.security.AttributeArgumentVoter">
        <property name="configAttribute"  value="ACL_ATTRIBUTE_USER_ADMIN"/>
        <property name="requiredPermissions">
            <list>
                <ref bean="JasperServerPermission.ADMINISTRATION"/>
            </list>
        </property>
    </bean>

    <bean id="aclAttributeUserReadVoter" class="com.jaspersoft.jasperserver.api.metadata.security.ContextSensitiveAttributeArgumentVoter">
        <property name="configAttribute"  value="ACL_ATTRIBUTE_USER_READ"/>
        <property name="requiredPermissionsMap">
            <map>
                <entry key="default">
                    <list>
                        <ref bean="JasperServerPermission.ADMINISTRATION"/>
                        <ref bean="JasperServerPermission.READ"/>
                    </list>
                </entry>
                <entry key="execute">
                    <list>
                        <ref bean="JasperServerPermission.ADMINISTRATION"/>
                        <ref bean="JasperServerPermission.READ"/>
                        <ref bean="JasperServerPermission.EXECUTE"/>
                    </list>
                </entry>
            </map>
        </property>
    </bean>

    <util:list id="defaultAttributePermissions">
        <bean class="com.jaspersoft.jasperserver.api.metadata.user.domain.client.ObjectPermissionImpl">
            <property name="permissionMask" value="1"/>
            <property name="permissionRecipient" ref="roleAdministratorBean"/>
            <property name="URI" value="attr:/"/>
        </bean>
    </util:list>

    <bean id="roleAdministratorBean" class="com.jaspersoft.jasperserver.api.metadata.user.domain.client.RoleImpl">
        <property name="roleName" ref="roleAdministrator"/>
    </bean>

    <bean name="exceptionOutputManager" class="com.jaspersoft.jasperserver.api.common.error.handling.ExceptionOutputManagerImpl">
        <property name="outputControlMap">
            <map>
                <entry key="ERROR_UID">
                    <list>
                        <value>ROLE_USER</value>
                    </list>
                </entry>
                <entry key="STACKTRACE">
                    <list>
                        <value>ROLE_SUPERUSER</value>
                    </list>
                </entry>
                <entry key="MESSAGE">
                    <list>
                        <value>ROLE_SUPERUSER</value>
                    </list>
                </entry>
            </map>
        </property>
    </bean>
</beans>
